{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/tabs.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n"],"names":[],"mappings":";;;;;;;;;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,OAAO,2KAAkB;AAE/B,MAAM,yBAAW,2KAAgB,MAG/B,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC,2KAAkB;QACjB,KAAK;QACL,WAAW,IAAA,4HAAE,EACX,8FACA;QAED,GAAG,KAAK;;;;;;;;AAGb,SAAS,WAAW,GAAG,2KAAkB,CAAC,WAAW;AAErD,MAAM,4BAAc,2KAAgB,OAGlC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC,8KAAqB;QACpB,KAAK;QACL,WAAW,IAAA,4HAAE,EACX,uYACA;QAED,GAAG,KAAK;;;;;;;;AAGb,YAAY,WAAW,GAAG,8KAAqB,CAAC,WAAW;AAE3D,MAAM,4BAAc,2KAAgB,OAGlC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC,8KAAqB;QACpB,KAAK;QACL,WAAW,IAAA,4HAAE,EACX,mIACA;QAED,GAAG,KAAK;;;;;;;;AAGb,YAAY,WAAW,GAAG,8KAAqB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 81, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/table.tsx"],"sourcesContent":["\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AACA;AAEA;;;;AAEA,MAAM,sBAAQ,2KAAgB,MAG5B,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC;YACC,KAAK;YACL,WAAW,IAAA,4HAAE,EAAC,iCAAiC;YAC9C,GAAG,KAAK;;;;;;;;;;;;;AAIf,MAAM,WAAW,GAAG;AAEpB,MAAM,4BAAc,2KAAgB,OAGlC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC;QAAM,KAAK;QAAK,WAAW,IAAA,4HAAE,EAAC,mBAAmB;QAAa,GAAG,KAAK;;;;;;;;AAEzE,YAAY,WAAW,GAAG;AAE1B,MAAM,0BAAY,2KAAgB,OAGhC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC;QACC,KAAK;QACL,WAAW,IAAA,4HAAE,EAAC,8BAA8B;QAC3C,GAAG,KAAK;;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,4BAAc,2KAAgB,OAGlC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC;QACC,KAAK;QACL,WAAW,IAAA,4HAAE,EACX,2DACA;QAED,GAAG,KAAK;;;;;;;;AAGb,YAAY,WAAW,GAAG;AAE1B,MAAM,yBAAW,2KAAgB,OAG/B,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC;QACC,KAAK;QACL,WAAW,IAAA,4HAAE,EACX,6DACA;QAED,GAAG,KAAK;;;;;;;;AAGb,SAAS,WAAW,GAAG;AAEvB,MAAM,0BAAY,2KAAgB,QAGhC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC;QACC,KAAK;QACL,WAAW,IAAA,4HAAE,EACX,oGACA;QAED,GAAG,KAAK;;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,0BAAY,2KAAgB,QAGhC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC;QACC,KAAK;QACL,WAAW,IAAA,4HAAE,EAAC,kDAAkD;QAC/D,GAAG,KAAK;;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,6BAAe,2KAAgB,QAGnC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC;QACC,KAAK;QACL,WAAW,IAAA,4HAAE,EAAC,sCAAsC;QACnD,GAAG,KAAK;;;;;;;;AAGb,aAAa,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 249, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/data-table.tsx"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport {\n  ColumnDef,\n  flexRender,\n  getCoreRowModel,\n  useReactTable,\n  getPaginationRowModel,\n} from '@tanstack/react-table';\n\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport { Button } from '@/components/ui/button';\n\ninterface DataTableProps<TData, TValue> {\n  columns: ColumnDef<TData, TValue>[];\n  data: TData[];\n}\n\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n}: DataTableProps<TData, TValue>) {\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n  });\n\n  return (\n    <div>\n      <div className=\"rounded-md border\">\n        <Table>\n          <TableHeader>\n            {table.getHeaderGroups().map(headerGroup => (\n              <TableRow key={headerGroup.id}>\n                {headerGroup.headers.map(header => {\n                  return (\n                    <TableHead key={header.id}>\n                      {header.isPlaceholder\n                        ? null\n                        : flexRender(\n                            header.column.columnDef.header,\n                            header.getContext()\n                          )}\n                    </TableHead>\n                  );\n                })}\n              </TableRow>\n            ))}\n          </TableHeader>\n          <TableBody>\n            {table.getRowModel().rows?.length ? (\n              table.getRowModel().rows.map(row => (\n                <TableRow\n                  key={row.id}\n                  data-state={row.getIsSelected() && 'selected'}\n                >\n                  {row.getVisibleCells().map(cell => (\n                    <TableCell key={cell.id}>\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))\n            ) : (\n              <TableRow>\n                <TableCell\n                  colSpan={columns.length}\n                  className=\"h-24 text-center\"\n                >\n                  No results.\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </div>\n      <div className=\"flex items-center justify-end space-x-2 py-4\">\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => table.previousPage()}\n          disabled={!table.getCanPreviousPage()}\n        >\n          Previous\n        </Button>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => table.nextPage()}\n          disabled={!table.getCanNextPage()}\n        >\n          Next\n        </Button>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;;AAGA;AAAA;AAQA;AAQA;;;AAnBA;;;;AA0BO,SAAS,UAAyB,KAGT;QAHS,EACvC,OAAO,EACP,IAAI,EAC0B,GAHS;QAkC5B;;IA9BX,MAAM,QAAQ,IAAA,0MAAa,EAAC;QAC1B;QACA;QACA,iBAAiB,IAAA,2LAAe;QAChC,uBAAuB,IAAA,iMAAqB;IAC9C;IAEA,qBACE,6LAAC;;0BACC,6LAAC;gBAAI,WAAU;0BACb,cAAA,6LAAC,6IAAK;;sCACJ,6LAAC,mJAAW;sCACT,MAAM,eAAe,GAAG,GAAG,CAAC,CAAA,4BAC3B,6LAAC,gJAAQ;8CACN,YAAY,OAAO,CAAC,GAAG,CAAC,CAAA;wCACvB,qBACE,6LAAC,iJAAS;sDACP,OAAO,aAAa,GACjB,OACA,IAAA,uMAAU,EACR,OAAO,MAAM,CAAC,SAAS,CAAC,MAAM,EAC9B,OAAO,UAAU;2CALT,OAAO,EAAE;;;;;oCAS7B;mCAZa,YAAY,EAAE;;;;;;;;;;sCAgBjC,6LAAC,iJAAS;sCACP,EAAA,0BAAA,MAAM,WAAW,GAAG,IAAI,cAAxB,8CAAA,wBAA0B,MAAM,IAC/B,MAAM,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,CAAA,oBAC3B,6LAAC,gJAAQ;oCAEP,cAAY,IAAI,aAAa,MAAM;8CAElC,IAAI,eAAe,GAAG,GAAG,CAAC,CAAA,qBACzB,6LAAC,iJAAS;sDACP,IAAA,uMAAU,EAAC,KAAK,MAAM,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,UAAU;2CADzC,KAAK,EAAE;;;;;mCAJpB,IAAI,EAAE;;;;0DAWf,6LAAC,gJAAQ;0CACP,cAAA,6LAAC,iJAAS;oCACR,SAAS,QAAQ,MAAM;oCACvB,WAAU;8CACX;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAQX,6LAAC;gBAAI,WAAU;;kCACb,6LAAC,+IAAM;wBACL,SAAQ;wBACR,MAAK;wBACL,SAAS,IAAM,MAAM,YAAY;wBACjC,UAAU,CAAC,MAAM,kBAAkB;kCACpC;;;;;;kCAGD,6LAAC,+IAAM;wBACL,SAAQ;wBACR,MAAK;wBACL,SAAS,IAAM,MAAM,QAAQ;wBAC7B,UAAU,CAAC,MAAM,cAAc;kCAChC;;;;;;;;;;;;;;;;;;AAMT;GAhFgB;;QAIA,0MAAa;;;KAJb","debugId":null}},
    {"offset": {"line": 399, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/checkbox.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,yBAAW,2KAAgB,MAG/B,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC,+KAAsB;QACrB,KAAK;QACL,WAAW,IAAA,4HAAE,EACX,kTACA;QAED,GAAG,KAAK;kBAET,cAAA,6LAAC,oLAA2B;YAC1B,WAAW,IAAA,4HAAE,EAAC;sBAEd,cAAA,6LAAC,gNAAK;gBAAC,WAAU;;;;;;;;;;;;;;;;;;AAIvB,SAAS,WAAW,GAAG,+KAAsB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 453, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/finance/cheque-management/cheque-management-columns.tsx"],"sourcesContent":["\n'use client';\n\nimport { type ColumnDef } from '@tanstack/react-table';\nimport { type Cheque } from './schema';\nimport { Checkbox } from '@/components/ui/checkbox';\n\nexport const columns: ColumnDef<Cheque>[] = [\n  {\n    id: 'select',\n    header: ({ table }) => (\n      <Checkbox\n        checked={table.getIsAllPageRowsSelected()}\n        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n        aria-label=\"Select all\"\n      />\n    ),\n    cell: ({ row }) => (\n      <Checkbox\n        checked={row.getIsSelected()}\n        onCheckedChange={(value) => row.toggleSelected(!!value)}\n        aria-label=\"Select row\"\n      />\n    ),\n    enableSorting: false,\n    enableHiding: false,\n  },\n  {\n    accessorKey: 'type',\n    header: 'Type',\n  },\n  {\n    accessorKey: 'party',\n    header: 'Party',\n  },\n  {\n    accessorKey: 'bankName',\n    header: 'Bank Name',\n  },\n  {\n    accessorKey: 'chequeNo',\n    header: 'Cheque No',\n  },\n  {\n    accessorKey: 'dueDate',\n    header: 'Due Date',\n  },\n  {\n    accessorKey: 'amount',\n    header: 'Amount',\n  },\n  {\n    accessorKey: 'status',\n    header: 'Status',\n  },\n];\n"],"names":[],"mappings":";;;;;AAKA;AAJA;;;AAMO,MAAM,UAA+B;IAC1C;QACE,IAAI;QACJ,QAAQ;gBAAC,EAAE,KAAK,EAAE;iCAChB,6LAAC,mJAAQ;gBACP,SAAS,MAAM,wBAAwB;gBACvC,iBAAiB,CAAC,QAAU,MAAM,yBAAyB,CAAC,CAAC,CAAC;gBAC9D,cAAW;;;;;;;QAGf,MAAM;gBAAC,EAAE,GAAG,EAAE;iCACZ,6LAAC,mJAAQ;gBACP,SAAS,IAAI,aAAa;gBAC1B,iBAAiB,CAAC,QAAU,IAAI,cAAc,CAAC,CAAC,CAAC;gBACjD,cAAW;;;;;;;QAGf,eAAe;QACf,cAAc;IAChB;IACA;QACE,aAAa;QACb,QAAQ;IACV;IACA;QACE,aAAa;QACb,QAAQ;IACV;IACA;QACE,aAAa;QACb,QAAQ;IACV;IACA;QACE,aAAa;QACb,QAAQ;IACV;IACA;QACE,aAAa;QACb,QAAQ;IACV;IACA;QACE,aAAa;QACb,QAAQ;IACV;IACA;QACE,aAAa;QACb,QAAQ;IACV;CACD","debugId":null}},
    {"offset": {"line": 528, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/finance/cheque-management/cheque-management-client.tsx"],"sourcesContent":["\n'use client';\n\nimport { useState, useEffect } from 'react';\nimport { DataTable } from '@/components/data-table';\nimport { columns } from './cheque-management-columns';\nimport { type Cheque } from './schema';\n\ninterface ChequeManagementClientProps {\n    initialCheques: Cheque[];\n    isLoading: boolean;\n}\n\nexport function ChequeManagementClient({ initialCheques, isLoading }: ChequeManagementClientProps) {\n    return (\n        <div>\n            <DataTable columns={columns} data={initialCheques} />\n        </div>\n    );\n}\n"],"names":[],"mappings":";;;;;AAIA;AACA;AAJA;;;;AAYO,SAAS,uBAAuB,KAA0D;QAA1D,EAAE,cAAc,EAAE,SAAS,EAA+B,GAA1D;IACnC,qBACI,6LAAC;kBACG,cAAA,6LAAC,mJAAS;YAAC,SAAS,+LAAO;YAAE,MAAM;;;;;;;;;;;AAG/C;KANgB","debugId":null}},
    {"offset": {"line": 566, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/finance/cheque-management/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { z } from 'zod';\nimport { revalidatePath } from 'next/cache';\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { Cheque, chequeSchema, ChequeBook, chequeBookSchema, ChequeLeaf } from './schema';\n\nconst chequesFilePath = path.join(process.cwd(), 'src/data/cheques-data.json');\nconst chequeBooksFilePath = path.join(process.cwd(), 'src/data/cheque-books-data.json');\n\nasync function readData(filePath: string) {\n    try {\n        await fs.access(filePath);\n        const data = await fs.readFile(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            return [];\n        }\n        throw error;\n    }\n}\n\nasync function writeCheques(data: Cheque[]) {\n    await fs.writeFile(chequesFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\nasync function writeChequeBooks(data: ChequeBook[]) {\n    await fs.writeFile(chequeBooksFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\nexport async function getCheques(filters: { party?: string; status?: string } = {}) {\n    let cheques = await readData(chequesFilePath);\n    if (filters.party) {\n        cheques = cheques.filter(cheque => cheque.partyName.toLowerCase().includes(filters.party!.toLowerCase()));\n    }\n    if (filters.status) {\n        cheques = cheques.filter(cheque => cheque.status === filters.status);\n    }\n    return cheques;\n}\n\nexport async function addCheque(data: Omit<Cheque, 'id' | 'status'>) {\n    const validation = chequeSchema.omit({ id: true, status: true }).safeParse(data);\n    if (!validation.success) {\n        return { success: false, error: 'Invalid data format.' };\n    }\n    const allCheques = await readData(chequesFilePath);\n    const newCheque: Cheque = {\n        ...validation.data,\n        id: `CHQ-${Date.now()}`,\n        status: 'In Hand',\n    };\n    allCheques.push(newCheque);\n    await writeCheques(allCheques);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n\nexport async function depositCheques(chequeIds: string[], depositDate: string, bankAccountId: string) {\n    if (!chequeIds || chequeIds.length === 0) return { success: false, error: 'No cheques selected.' };\n    let allCheques = await readData(chequesFilePath);\n    allCheques = allCheques.map(cheque => \n        chequeIds.includes(cheque.id) \n            ? { ...cheque, status: 'Deposited', depositDate, bankAccountId } \n            : cheque\n    );\n    await writeCheques(allCheques);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n\nexport async function returnCheque(chequeId: string, returnDate: string, reason: string) {\n    let allCheques = await readData(chequesFilePath);\n    const chequeIndex = allCheques.findIndex(c => c.id === chequeId);\n    if (chequeIndex === -1) return { success: false, error: 'Cheque not found.' };\n    allCheques[chequeIndex] = { ...allCheques[chequeIndex], status: 'Returned', returnDate, returnReason: reason };\n    await writeCheques(allCheques);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n\nexport async function withdrawCheques(chequeIds: string[]) {\n    if (!chequeIds || chequeIds.length === 0) return { success: false, error: 'No cheques selected.' };\n    let allCheques = await readData(chequesFilePath);\n    allCheques = allCheques.map(cheque => chequeIds.includes(cheque.id) ? { ...cheque, status: 'Withdrawn' } : cheque);\n    await writeCheques(allCheques);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n\nexport async function getChequeBooks() {\n    return await readData(chequeBooksFilePath);\n}\n\nexport async function getChequeLeaves(filters: { bank?: string; bookNo?: string; status?: string } = {}): Promise<ChequeLeaf[]> {\n    const books = await getChequeBooks();\n    const cheques = await getCheques();\n    let leaves: ChequeLeaf[] = [];\n\n    for (const book of books) {\n        for (let i = book.chequeStartNo; i <= book.chequeEndNo; i++) {\n            const chequeNo = i.toString().padStart(6, '0');\n            const usedCheque = cheques.find(c => c.chequeNo === chequeNo && c.bookNo === book.bookNo);\n            leaves.push({\n                id: `${book.id}-${chequeNo}`,\n                chequeNo: chequeNo,\n                bookNo: book.bookNo,\n                bankName: book.bankName,\n                status: usedCheque ? 'Used' : 'Unused',\n                partyName: usedCheque?.partyName,\n                date: usedCheque?.date,\n                amount: usedCheque?.amount\n            });\n        }\n    }\n\n    if (filters.bank) {\n        leaves = leaves.filter(leaf => leaf.bankName === filters.bank);\n    }\n    if (filters.bookNo) {\n        leaves = leaves.filter(leaf => leaf.bookNo === filters.bookNo);\n    }\n    if (filters.status) {\n        leaves = leaves.filter(leaf => leaf.status === filters.status);\n    }\n\n    return leaves;\n}\n\nexport async function addChequeBook(data: Omit<ChequeBook, 'id' | 'leafsUsed'>) {\n    const validation = chequeBookSchema.omit({ id: true, leafsUsed: true }).safeParse(data);\n    if (!validation.success) {\n        return { success: false, error: 'Invalid data format.' };\n    }\n    \n    const allBooks = await getChequeBooks();\n    const newBook: ChequeBook = {\n        ...validation.data,\n        id: `CB-${Date.now()}`,\n        leafsUsed: 0,\n    };\n\n    if (allBooks.some(book => book.bookNo === newBook.bookNo)) {\n        return { success: false, error: 'A cheque book with this book number already exists.' };\n    }\n\n    allBooks.push(newBook);\n    \n    await writeChequeBooks(allBooks);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n\nexport async function updateChequeBook(data: Omit<ChequeBook, 'leafsUsed'>) {\n    const validation = chequeBookSchema.omit({ leafsUsed: true }).safeParse(data);\n    if (!validation.success) {\n        return { success: false, error: 'Invalid data format.' };\n    }\n\n    const allBooks = await getChequeBooks();\n    const bookIndex = allBooks.findIndex(b => b.id === data.id);\n    if (bookIndex === -1) {\n        return { success: false, error: 'Cheque book not found.' };\n    }\n\n    if (allBooks.some(book => book.bookNo === data.bookNo && book.id !== data.id)) {\n        return { success: false, error: 'A cheque book with this book number already exists.' };\n    }\n    \n    const currentBook = allBooks[bookIndex];\n    allBooks[bookIndex] = {\n      ...currentBook,\n      ...validation.data,\n      id: currentBook.id,\n    };\n    \n    await writeChequeBooks(allBooks);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n\nexport async function deleteChequeBook(id: string) {\n    const allBooks = await getChequeBooks();\n    const updatedBooks = allBooks.filter(b => b.id !== id);\n    if (allBooks.length === updatedBooks.length) {\n        return { success: false, error: 'Cheque book not found.' };\n    }\n    await writeChequeBooks(updatedBooks);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n"],"names":[],"mappings":";;;;;;;IAiCsB,aAAA,WAAA,GAAA,IAAA,kPAAA,EAAA,8CAAA,uOAAA,EAAA,KAAA,GAAA,6OAAA,EAAA","debugId":null}},
    {"offset": {"line": 581, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/input.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n"],"names":[],"mappings":";;;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,2KAAgB,MAC5B,QAAgC;QAA/B,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAO;IAC5B,qBACE,6LAAC;QACC,MAAM;QACN,WAAW,IAAA,4HAAE,EACX,kYACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAEF,MAAM,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 617, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/dialog.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,SAAS,6KAAoB;AAEnC,MAAM,gBAAgB,gLAAuB;AAE7C,MAAM,eAAe,+KAAsB;AAE3C,MAAM,cAAc,8KAAqB;AAEzC,MAAM,8BAAgB,2KAAgB,CAGpC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC,gLAAuB;QACtB,KAAK;QACL,WAAW,IAAA,4HAAE,EACX,0JACA;QAED,GAAG,KAAK;;;;;;;KAVP;AAaN,cAAc,WAAW,GAAG,gLAAuB,CAAC,WAAW;AAE/D,MAAM,8BAAgB,2KAAgB,OAGpC,QAAoC;QAAnC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO;yBAClC,6LAAC;;0BACC,6LAAC;;;;;0BACD,6LAAC,gLAAuB;gBACtB,KAAK;gBACL,WAAW,IAAA,4HAAE,EACX,+fACA;gBAED,GAAG,KAAK;;oBAER;kCACD,6LAAC,8KAAqB;wBAAC,WAAU;;0CAC/B,6LAAC,oMAAC;gCAAC,WAAU;;;;;;0CACb,6LAAC;gCAAK,WAAU;0CAAU;;;;;;;;;;;;;;;;;;;;;;;;;;AAKlC,cAAc,WAAW,GAAG,gLAAuB,CAAC,WAAW;AAE/D,MAAM,eAAe;QAAC,EACpB,SAAS,EACT,GAAG,OACkC;yBACrC,6LAAC;QACC,WAAW,IAAA,4HAAE,EACX,sDACA;QAED,GAAG,KAAK;;;;;;;MATP;AAYN,aAAa,WAAW,GAAG;AAE3B,MAAM,eAAe;QAAC,EACpB,SAAS,EACT,GAAG,OACkC;yBACrC,6LAAC;QACC,WAAW,IAAA,4HAAE,EACX,iEACA;QAED,GAAG,KAAK;;;;;;;MATP;AAYN,aAAa,WAAW,GAAG;AAE3B,MAAM,4BAAc,2KAAgB,OAGlC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC,8KAAqB;QACpB,KAAK;QACL,WAAW,IAAA,4HAAE,EACX,qDACA;QAED,GAAG,KAAK;;;;;;;;AAGb,YAAY,WAAW,GAAG,8KAAqB,CAAC,WAAW;AAE3D,MAAM,kCAAoB,2KAAgB,OAGxC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC,oLAA2B;QAC1B,KAAK;QACL,WAAW,IAAA,4HAAE,EAAC,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;;AAGb,kBAAkB,WAAW,GAAG,oLAA2B,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 794, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,gBAAgB,IAAA,0KAAG,EACvB;AAGF,MAAM,sBAAQ,2KAAgB,MAI5B,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC,4KAAmB;QAClB,KAAK;QACL,WAAW,IAAA,4HAAE,EAAC,iBAAiB;QAC9B,GAAG,KAAK;;;;;;;;AAGb,MAAM,WAAW,GAAG,4KAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 835, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/textarea.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {cn} from '@/lib/utils';\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({className, ...props}, ref) => {\n    return (\n      <textarea\n        className={cn(\n          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nTextarea.displayName = 'Textarea';\n\nexport {Textarea};\n"],"names":[],"mappings":";;;;;AAAA;AAEA;;;;AAKA,MAAM,yBAAW,2KAAgB,MAC/B,QAAwB;QAAvB,EAAC,SAAS,EAAE,GAAG,OAAM;IACpB,qBACE,6LAAC;QACC,WAAW,IAAA,4HAAE,EACX,qTACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAEF,SAAS,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 870, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/finance/cheque-management/schema.ts"],"sourcesContent":["\nimport { z } from 'zod';\n\n// Schema for individual cheques\nexport const chequeSchema = z.object({\n  id: z.string(),\n  type: z.enum(['Incoming', 'Outgoing']),\n  party: z.string(),\n  bankName: z.string(),\n  chequeNo: z.string(),\n  dueDate: z.string(),\n  amount: z.number(),\n  status: z.enum(['In Hand', 'Deposited', 'Cleared', 'Returned', 'Cancelled']),\n});\n\nexport const chequeBookSchema = z.object({\n    id: z.string(),\n    bankName: z.string(),\n    bookNo: z.string(),\n    chequeStartNo: z.number(),\n    chequeEndNo: z.number(),\n    noOfLeafs: z.number(),\n    leafsUsed: z.number().optional().default(0),\n    status: z.enum(['Active', 'Finished', 'Cancelled']),\n});\n\nexport const chequeLeafSchema = z.object({\n    chequeNo: z.string(),\n    bookNo: z.string(),\n    bankName: z.string(),\n    status: z.enum(['Used', 'Unused', 'Cancelled']),\n    date: z.string().optional(),\n    partyName: z.string().optional(),\n    property: z.string().optional(),\n    unitCode: z.string().optional(),\n    amount: z.number().optional(),\n});\n\nexport type Cheque = z.infer<typeof chequeSchema>;\nexport type ChequeBook = z.infer<typeof chequeBookSchema>;\nexport type ChequeLeaf = z.infer<typeof chequeLeafSchema>;\n"],"names":[],"mappings":";;;;;;;;AACA;;AAGO,MAAM,eAAe,0KAAC,CAAC,MAAM,CAAC;IACnC,IAAI,0KAAC,CAAC,MAAM;IACZ,MAAM,0KAAC,CAAC,IAAI,CAAC;QAAC;QAAY;KAAW;IACrC,OAAO,0KAAC,CAAC,MAAM;IACf,UAAU,0KAAC,CAAC,MAAM;IAClB,UAAU,0KAAC,CAAC,MAAM;IAClB,SAAS,0KAAC,CAAC,MAAM;IACjB,QAAQ,0KAAC,CAAC,MAAM;IAChB,QAAQ,0KAAC,CAAC,IAAI,CAAC;QAAC;QAAW;QAAa;QAAW;QAAY;KAAY;AAC7E;AAEO,MAAM,mBAAmB,0KAAC,CAAC,MAAM,CAAC;IACrC,IAAI,0KAAC,CAAC,MAAM;IACZ,UAAU,0KAAC,CAAC,MAAM;IAClB,QAAQ,0KAAC,CAAC,MAAM;IAChB,eAAe,0KAAC,CAAC,MAAM;IACvB,aAAa,0KAAC,CAAC,MAAM;IACrB,WAAW,0KAAC,CAAC,MAAM;IACnB,WAAW,0KAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,OAAO,CAAC;IACzC,QAAQ,0KAAC,CAAC,IAAI,CAAC;QAAC;QAAU;QAAY;KAAY;AACtD;AAEO,MAAM,mBAAmB,0KAAC,CAAC,MAAM,CAAC;IACrC,UAAU,0KAAC,CAAC,MAAM;IAClB,QAAQ,0KAAC,CAAC,MAAM;IAChB,UAAU,0KAAC,CAAC,MAAM;IAClB,QAAQ,0KAAC,CAAC,IAAI,CAAC;QAAC;QAAQ;QAAU;KAAY;IAC9C,MAAM,0KAAC,CAAC,MAAM,GAAG,QAAQ;IACzB,WAAW,0KAAC,CAAC,MAAM,GAAG,QAAQ;IAC9B,UAAU,0KAAC,CAAC,MAAM,GAAG,QAAQ;IAC7B,UAAU,0KAAC,CAAC,MAAM,GAAG,QAAQ;IAC7B,QAAQ,0KAAC,CAAC,MAAM,GAAG,QAAQ;AAC/B","debugId":null}},
    {"offset": {"line": 935, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/finance/cheque-management/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { z } from 'zod';\nimport { revalidatePath } from 'next/cache';\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { Cheque, chequeSchema, ChequeBook, chequeBookSchema, ChequeLeaf } from './schema';\n\nconst chequesFilePath = path.join(process.cwd(), 'src/data/cheques-data.json');\nconst chequeBooksFilePath = path.join(process.cwd(), 'src/data/cheque-books-data.json');\n\nasync function readData(filePath: string) {\n    try {\n        await fs.access(filePath);\n        const data = await fs.readFile(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            return [];\n        }\n        throw error;\n    }\n}\n\nasync function writeCheques(data: Cheque[]) {\n    await fs.writeFile(chequesFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\nasync function writeChequeBooks(data: ChequeBook[]) {\n    await fs.writeFile(chequeBooksFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\nexport async function getCheques(filters: { party?: string; status?: string } = {}) {\n    let cheques = await readData(chequesFilePath);\n    if (filters.party) {\n        cheques = cheques.filter(cheque => cheque.partyName.toLowerCase().includes(filters.party!.toLowerCase()));\n    }\n    if (filters.status) {\n        cheques = cheques.filter(cheque => cheque.status === filters.status);\n    }\n    return cheques;\n}\n\nexport async function addCheque(data: Omit<Cheque, 'id' | 'status'>) {\n    const validation = chequeSchema.omit({ id: true, status: true }).safeParse(data);\n    if (!validation.success) {\n        return { success: false, error: 'Invalid data format.' };\n    }\n    const allCheques = await readData(chequesFilePath);\n    const newCheque: Cheque = {\n        ...validation.data,\n        id: `CHQ-${Date.now()}`,\n        status: 'In Hand',\n    };\n    allCheques.push(newCheque);\n    await writeCheques(allCheques);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n\nexport async function depositCheques(chequeIds: string[], depositDate: string, bankAccountId: string) {\n    if (!chequeIds || chequeIds.length === 0) return { success: false, error: 'No cheques selected.' };\n    let allCheques = await readData(chequesFilePath);\n    allCheques = allCheques.map(cheque => \n        chequeIds.includes(cheque.id) \n            ? { ...cheque, status: 'Deposited', depositDate, bankAccountId } \n            : cheque\n    );\n    await writeCheques(allCheques);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n\nexport async function returnCheque(chequeId: string, returnDate: string, reason: string) {\n    let allCheques = await readData(chequesFilePath);\n    const chequeIndex = allCheques.findIndex(c => c.id === chequeId);\n    if (chequeIndex === -1) return { success: false, error: 'Cheque not found.' };\n    allCheques[chequeIndex] = { ...allCheques[chequeIndex], status: 'Returned', returnDate, returnReason: reason };\n    await writeCheques(allCheques);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n\nexport async function withdrawCheques(chequeIds: string[]) {\n    if (!chequeIds || chequeIds.length === 0) return { success: false, error: 'No cheques selected.' };\n    let allCheques = await readData(chequesFilePath);\n    allCheques = allCheques.map(cheque => chequeIds.includes(cheque.id) ? { ...cheque, status: 'Withdrawn' } : cheque);\n    await writeCheques(allCheques);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n\nexport async function getChequeBooks() {\n    return await readData(chequeBooksFilePath);\n}\n\nexport async function getChequeLeaves(filters: { bank?: string; bookNo?: string; status?: string } = {}): Promise<ChequeLeaf[]> {\n    const books = await getChequeBooks();\n    const cheques = await getCheques();\n    let leaves: ChequeLeaf[] = [];\n\n    for (const book of books) {\n        for (let i = book.chequeStartNo; i <= book.chequeEndNo; i++) {\n            const chequeNo = i.toString().padStart(6, '0');\n            const usedCheque = cheques.find(c => c.chequeNo === chequeNo && c.bookNo === book.bookNo);\n            leaves.push({\n                id: `${book.id}-${chequeNo}`,\n                chequeNo: chequeNo,\n                bookNo: book.bookNo,\n                bankName: book.bankName,\n                status: usedCheque ? 'Used' : 'Unused',\n                partyName: usedCheque?.partyName,\n                date: usedCheque?.date,\n                amount: usedCheque?.amount\n            });\n        }\n    }\n\n    if (filters.bank) {\n        leaves = leaves.filter(leaf => leaf.bankName === filters.bank);\n    }\n    if (filters.bookNo) {\n        leaves = leaves.filter(leaf => leaf.bookNo === filters.bookNo);\n    }\n    if (filters.status) {\n        leaves = leaves.filter(leaf => leaf.status === filters.status);\n    }\n\n    return leaves;\n}\n\nexport async function addChequeBook(data: Omit<ChequeBook, 'id' | 'leafsUsed'>) {\n    const validation = chequeBookSchema.omit({ id: true, leafsUsed: true }).safeParse(data);\n    if (!validation.success) {\n        return { success: false, error: 'Invalid data format.' };\n    }\n    \n    const allBooks = await getChequeBooks();\n    const newBook: ChequeBook = {\n        ...validation.data,\n        id: `CB-${Date.now()}`,\n        leafsUsed: 0,\n    };\n\n    if (allBooks.some(book => book.bookNo === newBook.bookNo)) {\n        return { success: false, error: 'A cheque book with this book number already exists.' };\n    }\n\n    allBooks.push(newBook);\n    \n    await writeChequeBooks(allBooks);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n\nexport async function updateChequeBook(data: Omit<ChequeBook, 'leafsUsed'>) {\n    const validation = chequeBookSchema.omit({ leafsUsed: true }).safeParse(data);\n    if (!validation.success) {\n        return { success: false, error: 'Invalid data format.' };\n    }\n\n    const allBooks = await getChequeBooks();\n    const bookIndex = allBooks.findIndex(b => b.id === data.id);\n    if (bookIndex === -1) {\n        return { success: false, error: 'Cheque book not found.' };\n    }\n\n    if (allBooks.some(book => book.bookNo === data.bookNo && book.id !== data.id)) {\n        return { success: false, error: 'A cheque book with this book number already exists.' };\n    }\n    \n    const currentBook = allBooks[bookIndex];\n    allBooks[bookIndex] = {\n      ...currentBook,\n      ...validation.data,\n      id: currentBook.id,\n    };\n    \n    await writeChequeBooks(allBooks);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n\nexport async function deleteChequeBook(id: string) {\n    const allBooks = await getChequeBooks();\n    const updatedBooks = allBooks.filter(b => b.id !== id);\n    if (allBooks.length === updatedBooks.length) {\n        return { success: false, error: 'Cheque book not found.' };\n    }\n    await writeChequeBooks(updatedBooks);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n"],"names":[],"mappings":";;;;;;;IA4CsB,YAAA,WAAA,GAAA,IAAA,kPAAA,EAAA,8CAAA,uOAAA,EAAA,KAAA,GAAA,6OAAA,EAAA","debugId":null}},
    {"offset": {"line": 950, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/lookups/actions.ts"],"sourcesContent":["'use server';\n\nimport { promises as fs } from 'fs';\nimport path from 'path';\n\nconst tenantsFilePath = path.join(process.cwd(), 'src/app/tenancy/tenants/tenants-data.json');\nconst landlordsFilePath = path.join(process.cwd(), 'src/app/landlords/landlords-data.json');\nconst vendorsFilePath = path.join(process.cwd(), 'src/app/purchasing/vendors/vendors-data.json');\nconst agentsFilePath = path.join(process.cwd(), 'src/app/agents/agents-data.json');\nconst customersFilePath = path.join(process.cwd(), 'src/app/crm/customers/customers-data.json');\nconst tenancyContractsFilePath = path.join(process.cwd(), 'src/app/tenancy/contract/contracts-data.json');\nconst leaseContractsFilePath = path.join(process.cwd(), 'src/app/lease/contract/contracts-data.json');\nconst unitsFilePath = path.join(process.cwd(), 'src/app/property/units/units-data.json');\nconst roomsFilePath = path.join(process.cwd(), 'src/app/property/rooms/rooms-data.json');\n\nasync function readFileData(filePath: string) {\n    try {\n        await fs.access(filePath);\n        const data = await fs.readFile(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            return [];\n        }\n        throw error;\n    }\n}\n\nexport async function getLookups() {\n    const [tenants, landlords, vendors, agents, customers, tenancyContracts, leaseContracts, units, rooms] = await Promise.all([\n        readFileData(tenantsFilePath),\n        readFileData(landlordsFilePath),\n        readFileData(vendorsFilePath),\n        readFileData(agentsFilePath),\n        readFileData(customersFilePath),\n        readFileData(tenancyContractsFilePath),\n        readFileData(leaseContractsFilePath),\n        readFileData(unitsFilePath),\n        readFileData(roomsFilePath),\n    ]);\n\n    return {\n        tenants: tenants.map((t: any) => ({ value: t.id, label: t.name, contractNo: t.contractNo })),\n        landlords: landlords.map((l: any) => ({ value: l.id, label: l.name })),\n        vendors: vendors.map((v: any) => ({ value: v.id, label: v.vendorName })),\n        agents: agents.map((a: any) => ({ value: a.id, label: a.name })),\n        customers: customers.map((c: any) => ({ value: c.id, label: c.name })),\n        tenancyContracts: tenancyContracts.map((c: any) => ({ value: c.contractNo, label: c.contractNo, property: c.property, unitCode: c.unitCode, roomCode: c.roomCode, partyName: c.tenantName, paymentSchedule: c.paymentSchedule })),\n        leaseContracts: leaseContracts.map((c: any) => ({ value: c.contractNo, label: c.contractNo, property: c.property, unitCode: c.unitCode, roomCode: c.roomCode, partyName: c.landlordName, paymentSchedule: c.paymentSchedule })),\n        units: units.map((u: any) => ({ value: u.unitCode, label: u.unitCode, propertyCode: u.propertyCode })),\n        rooms: rooms.map((r: any) => ({ value: r.roomCode, label: r.roomCode, unitCode: r.unitCode, propertyCode: r.propertyCode }))\n    };\n}\n"],"names":[],"mappings":";;;;;;;IA4BsB,aAAA,WAAA,GAAA,IAAA,kPAAA,EAAA,8CAAA,uOAAA,EAAA,KAAA,GAAA,6OAAA,EAAA","debugId":null}},
    {"offset": {"line": 965, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/command.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\ninterface CommandDialogProps extends DialogProps {}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none aria-selected:bg-accent aria-selected:text-accent-foreground data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAEA;AAEA;AACA;AAEA;AACA;AARA;;;;;;;AAUA,MAAM,wBAAU,2KAAgB,CAG9B,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC,oJAAgB;QACf,KAAK;QACL,WAAW,IAAA,4HAAE,EACX,6FACA;QAED,GAAG,KAAK;;;;;;;KAVP;AAaN,QAAQ,WAAW,GAAG,oJAAgB,CAAC,WAAW;AAIlD,MAAM,gBAAgB;QAAC,EAAE,QAAQ,EAAE,GAAG,OAA2B;IAC/D,qBACE,6LAAC,+IAAM;QAAE,GAAG,KAAK;kBACf,cAAA,6LAAC,sJAAa;YAAC,WAAU;sBACvB,cAAA,6LAAC;gBAAQ,WAAU;0BAChB;;;;;;;;;;;;;;;;AAKX;MAVM;AAYN,MAAM,6BAAe,2KAAgB,OAGnC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC;QAAI,WAAU;QAAkC,sBAAmB;;0BAClE,6LAAC,mNAAM;gBAAC,WAAU;;;;;;0BAClB,6LAAC,oJAAgB,CAAC,KAAK;gBACrB,KAAK;gBACL,WAAW,IAAA,4HAAE,EACX,0JACA;gBAED,GAAG,KAAK;;;;;;;;;;;;;;AAKf,aAAa,WAAW,GAAG,oJAAgB,CAAC,KAAK,CAAC,WAAW;AAE7D,MAAM,4BAAc,2KAAgB,OAGlC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC,oJAAgB,CAAC,IAAI;QACpB,KAAK;QACL,WAAW,IAAA,4HAAE,EAAC,mDAAmD;QAChE,GAAG,KAAK;;;;;;;;AAIb,YAAY,WAAW,GAAG,oJAAgB,CAAC,IAAI,CAAC,WAAW;AAE3D,MAAM,6BAAe,2KAAgB,OAGnC,CAAC,OAAO,oBACR,6LAAC,oJAAgB,CAAC,KAAK;QACrB,KAAK;QACL,WAAU;QACT,GAAG,KAAK;;;;;;;AAIb,aAAa,WAAW,GAAG,oJAAgB,CAAC,KAAK,CAAC,WAAW;AAE7D,MAAM,6BAAe,2KAAgB,OAGnC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC,oJAAgB,CAAC,KAAK;QACrB,KAAK;QACL,WAAW,IAAA,4HAAE,EACX,0NACA;QAED,GAAG,KAAK;;;;;;;;AAIb,aAAa,WAAW,GAAG,oJAAgB,CAAC,KAAK,CAAC,WAAW;AAE7D,MAAM,iCAAmB,2KAAgB,QAGvC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC,oJAAgB,CAAC,SAAS;QACzB,KAAK;QACL,WAAW,IAAA,4HAAE,EAAC,wBAAwB;QACrC,GAAG,KAAK;;;;;;;;AAGb,iBAAiB,WAAW,GAAG,oJAAgB,CAAC,SAAS,CAAC,WAAW;AAErE,MAAM,4BAAc,2KAAgB,QAGlC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC,oJAAgB,CAAC,IAAI;QACpB,KAAK;QACL,WAAW,IAAA,4HAAE,EACX,2OACA;QAED,GAAG,KAAK;;;;;;;;AAIb,YAAY,WAAW,GAAG,oJAAgB,CAAC,IAAI,CAAC,WAAW;AAE3D,MAAM,kBAAkB;QAAC,EACvB,SAAS,EACT,GAAG,OACmC;IACtC,qBACE,6LAAC;QACC,WAAW,IAAA,4HAAE,EACX,yDACA;QAED,GAAG,KAAK;;;;;;AAGf;OAbM;AAcN,gBAAgB,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 1173, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/popover.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n"],"names":[],"mappings":";;;;;;;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,UAAU,8KAAqB;AAErC,MAAM,iBAAiB,iLAAwB;AAE/C,MAAM,+BAAiB,2KAAgB,MAGrC,QAA4D;QAA3D,EAAE,SAAS,EAAE,QAAQ,QAAQ,EAAE,aAAa,CAAC,EAAE,GAAG,OAAO;yBAC1D,6LAAC,gLAAuB;kBACtB,cAAA,6LAAC,iLAAwB;YACvB,KAAK;YACL,OAAO;YACP,YAAY;YACZ,WAAW,IAAA,4HAAE,EACX,8aACA;YAED,GAAG,KAAK;;;;;;;;;;;;;AAIf,eAAe,WAAW,GAAG,iLAAwB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 1225, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/combobox.tsx"],"sourcesContent":["\n\"use client\"\n\nimport * as React from \"react\"\nimport { Check, ChevronsUpDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\"\nimport { Input } from \"./input\"\n\ntype ComboboxProps = {\n    options?: { value: string; label: string }[];\n    value: string;\n    onSelect: (value: string, label?: string) => void;\n    placeholder?: string;\n    disabled?: boolean;\n}\n\nexport function Combobox({ options = [], value, onSelect, placeholder, disabled }: ComboboxProps) {\n  const [open, setOpen] = React.useState(false)\n  const [inputValue, setInputValue] = React.useState(\"\")\n\n  const selectedOption = options.find((option) => \n    (option.value?.toLowerCase() === value?.toLowerCase())\n  );\n  \n  React.useEffect(() => {\n    setInputValue(selectedOption?.label || value || '')\n  }, [value, selectedOption])\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-expanded={open}\n          className=\"w-full justify-between font-normal\"\n          disabled={disabled}\n        >\n          <span className=\"truncate\">\n            {selectedOption?.label || value || placeholder || \"Select option...\"}\n          </span>\n          <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[--radix-popover-trigger-width] p-0\">\n        <Command>\n          <CommandInput \n            placeholder=\"Search or enter new...\"\n            value={inputValue}\n            onValueChange={setInputValue}\n           />\n          <CommandList>\n            <CommandEmpty onSelect={() => {\n                onSelect(inputValue, inputValue)\n                setOpen(false)\n            }}>\n                <div \n                    className=\"py-2 px-4 text-sm cursor-pointer hover:bg-accent\"\n                    onClick={() => {\n                         onSelect(inputValue, inputValue)\n                         setOpen(false)\n                    }}\n                >\n                    Add new: \"{inputValue}\"\n                </div>\n            </CommandEmpty>\n            <CommandGroup>\n              {options.map((option, index) => (\n                <CommandItem\n                  key={`${option.value}-${index}`}\n                  value={option.label}\n                  onSelect={(currentLabel) => {\n                    const selected = options.find(opt => opt.label.toLowerCase() === currentLabel.toLowerCase())\n                    onSelect(selected?.value || currentLabel, selected?.label || currentLabel)\n                    setOpen(false)\n                  }}\n                >\n                  <Check\n                    className={cn(\n                      \"mr-2 h-4 w-4\",\n                      value === option.value ? \"opacity-100\" : \"opacity-0\"\n                    )}\n                  />\n                  {option.label}\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  )\n}\n"],"names":[],"mappings":";;;;;AAGA;AACA;AAAA;AAEA;AACA;AACA;AAQA;;;AAfA;;;;;;;AA8BO,SAAS,SAAS,KAAuE;QAAvE,EAAE,UAAU,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,WAAW,EAAE,QAAQ,EAAiB,GAAvE;;IACvB,MAAM,CAAC,MAAM,QAAQ,GAAG,yKAAc,CAAC;IACvC,MAAM,CAAC,YAAY,cAAc,GAAG,yKAAc,CAAC;IAEnD,MAAM,iBAAiB,QAAQ,IAAI,CAAC,CAAC;YAClC;eAAA,EAAA,gBAAA,OAAO,KAAK,cAAZ,oCAAA,cAAc,WAAW,SAAO,kBAAA,4BAAA,MAAO,WAAW;;IAGrD,0KAAe;8BAAC;YACd,cAAc,CAAA,2BAAA,qCAAA,eAAgB,KAAK,KAAI,SAAS;QAClD;6BAAG;QAAC;QAAO;KAAe;IAE1B,qBACE,6LAAC,iJAAO;QAAC,MAAM;QAAM,cAAc;;0BACjC,6LAAC,wJAAc;gBAAC,OAAO;0BACrB,cAAA,6LAAC,+IAAM;oBACL,SAAQ;oBACR,MAAK;oBACL,iBAAe;oBACf,WAAU;oBACV,UAAU;;sCAEV,6LAAC;4BAAK,WAAU;sCACb,CAAA,2BAAA,qCAAA,eAAgB,KAAK,KAAI,SAAS,eAAe;;;;;;sCAEpD,6LAAC,mPAAc;4BAAC,WAAU;;;;;;;;;;;;;;;;;0BAG9B,6LAAC,wJAAc;gBAAC,WAAU;0BACxB,cAAA,6LAAC,iJAAO;;sCACN,6LAAC,sJAAY;4BACX,aAAY;4BACZ,OAAO;4BACP,eAAe;;;;;;sCAEjB,6LAAC,qJAAW;;8CACV,6LAAC,sJAAY;oCAAC,UAAU;wCACpB,SAAS,YAAY;wCACrB,QAAQ;oCACZ;8CACI,cAAA,6LAAC;wCACG,WAAU;wCACV,SAAS;4CACJ,SAAS,YAAY;4CACrB,QAAQ;wCACb;;4CACH;4CACc;4CAAW;;;;;;;;;;;;8CAG9B,6LAAC,sJAAY;8CACV,QAAQ,GAAG,CAAC,CAAC,QAAQ,sBACpB,6LAAC,qJAAW;4CAEV,OAAO,OAAO,KAAK;4CACnB,UAAU,CAAC;gDACT,MAAM,WAAW,QAAQ,IAAI,CAAC,CAAA,MAAO,IAAI,KAAK,CAAC,WAAW,OAAO,aAAa,WAAW;gDACzF,SAAS,CAAA,qBAAA,+BAAA,SAAU,KAAK,KAAI,cAAc,CAAA,qBAAA,+BAAA,SAAU,KAAK,KAAI;gDAC7D,QAAQ;4CACV;;8DAEA,6LAAC,gNAAK;oDACJ,WAAW,kIACT,gBACA,UAAU,OAAO,KAAK,GAAG,gBAAgB;;;;;;gDAG5C,OAAO,KAAK;;2CAdR,AAAC,GAAkB,OAAhB,OAAO,KAAK,EAAC,KAAS,OAAN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuB1C;GA5EgB;KAAA","debugId":null}},
    {"offset": {"line": 1406, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/finance/cheque-management/add-cheque-dialog.tsx"],"sourcesContent":["\n'use client';\n\nimport { useState, useEffect } from 'react';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n  DialogFooter,\n  DialogClose,\n} from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { useToast } from '@/hooks/use-toast';\nimport { Plus, Loader2 } from 'lucide-react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { chequeSchema, type Cheque } from './schema';\nimport { addCheque } from './actions';\nimport { getLookups } from '@/app/admin/lookups/actions';\nimport { Combobox } from '@/components/ui/combobox';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { type PaymentInstallment as TenancyPaymentInstallment } from '@/app/tenancy/contract/schema';\nimport { type PaymentInstallment as LeasePaymentInstallment } from '@/app/lease/contract/schema';\nimport { useCurrency } from '@/context/currency-context';\n\ntype ChequeFormData = Omit<Cheque, 'id'>;\nconst chequeFormSchema = chequeSchema.omit({ id: true });\n\ntype ContractLookup = { \n    value: string, \n    label: string, \n    property?: string, \n    unitCode?: string,\n    roomCode?: string,\n    partyName?: string,\n    paymentSchedule?: (TenancyPaymentInstallment | LeasePaymentInstallment)[],\n};\n\ntype Lookups = {\n    tenants: { value: string, label: string, contractNo?: string }[];\n    landlords: { value: string, label: string }[];\n    vendors: { value: string, label: string }[];\n    agents: { value: string, label: string }[];\n    customers: { value: string, label: string }[];\n    tenancyContracts: ContractLookup[];\n    leaseContracts: ContractLookup[];\n    units: { value: string, label: string, propertyCode: string }[];\n    rooms: { value: string, label: string, unitCode: string, propertyCode: string }[];\n}\n\nexport function AddChequeDialog({ onChequeAdded }: { onChequeAdded: () => void }) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isSaving, setIsSaving] = useState(false);\n  const { toast } = useToast();\n  const [lookups, setLookups] = useState<Lookups>({ tenants: [], landlords: [], vendors: [], agents: [], customers: [], tenancyContracts: [], leaseContracts: [], units: [], rooms: [] });\n  const { formatCurrency } = useCurrency();\n\n  const {\n    register,\n    handleSubmit,\n    control,\n    reset,\n    watch,\n    setValue,\n    formState: { errors },\n  } = useForm<ChequeFormData>({\n    resolver: zodResolver(chequeFormSchema),\n    defaultValues: {\n        chequeNo: '',\n        chequeDate: '',\n        amount: 0,\n        bankName: '',\n        status: 'In Hand',\n        type: 'Incoming',\n        partyType: 'Tenant',\n        partyName: '',\n        property: '',\n        unitCode: '',\n        roomCode: '',\n        contractNo: '',\n        remarks: '',\n    }\n  });\n\n  useEffect(() => {\n      if(isOpen) {\n        getLookups().then(setLookups);\n        reset();\n      }\n  }, [isOpen, reset]);\n  \n  const chequeType = watch('type');\n  const partyType = watch('partyType');\n  const selectedContractNo = watch('contractNo');\n  const selectedPartyCode = watch('partyName');\n  const selectedProperty = watch('property');\n\n  const partyOptions = {\n      'Tenant': lookups.tenants,\n      'Landlord': lookups.landlords,\n      'Customer': lookups.customers,\n      'Vendor': lookups.vendors,\n      'Agent': lookups.agents,\n  }[partyType] || [];\n  \n  const selectedPartyName = partyOptions.find(p => p.value === selectedPartyCode)?.label;\n\n  const contractOptions = partyType === 'Tenant' ? lookups.tenancyContracts : partyType === 'Landlord' ? lookups.leaseContracts : [];\n  \n  const filteredContracts = contractOptions.filter(c => c.partyName === selectedPartyName);\n  const filteredUnits = lookups.units.filter(u => u.propertyCode === selectedProperty);\n\n  const selectedContract = contractOptions.find(c => c.value === selectedContractNo);\n  \n  const handleContractSelect = (contractNo: string) => {\n      setValue('contractNo', contractNo);\n      const contract = contractOptions.find(c => c.value === contractNo);\n      if (contract) {\n          setValue('property', contract.property || '');\n          setValue('unitCode', contract.unitCode || '');\n          setValue('roomCode', contract.roomCode || '');\n          // Reset installment details when contract changes\n          setValue('chequeNo', '');\n          setValue('chequeDate', '');\n          setValue('amount', 0);\n          setValue('bankName', '');\n      }\n  }\n\n  const handleInstallmentSelect = (installmentString: string) => {\n    if (!selectedContract || !selectedContract.paymentSchedule) return;\n\n    const installmentIndex = parseInt(installmentString, 10);\n    const installment = selectedContract.paymentSchedule[installmentIndex];\n    \n    if (installment) {\n      setValue('chequeNo', installment.chequeNo || '');\n      setValue('chequeDate', installment.dueDate);\n      setValue('amount', installment.amount);\n      setValue('bankName', installment.bankName || '');\n    }\n  };\n\n  const onSubmit = async (data: ChequeFormData) => {\n    setIsSaving(true);\n    const result = await addCheque(data);\n\n    if (result.success) {\n      toast({\n        title: 'Cheque Added',\n        description: `Successfully added cheque #${data.chequeNo}.`,\n      });\n      setIsOpen(false);\n      onChequeAdded();\n    } else {\n      toast({\n        variant: 'destructive',\n        title: 'Error',\n        description: result.error,\n      });\n    }\n    setIsSaving(false);\n  };\n  \n  const handleTypeChange = (type: 'Incoming' | 'Outgoing') => {\n    setValue('type', type);\n    if(type === 'Incoming') setValue('partyType', 'Tenant');\n    if(type === 'Outgoing') setValue('partyType', 'Landlord');\n    setValue('partyName', '');\n    setValue('contractNo', '');\n    setValue('property', '');\n  }\n\n  return (\n    <Dialog open={isOpen} onOpenChange={setIsOpen}>\n      <DialogTrigger asChild>\n        <Button>\n          <Plus className=\"mr-2 h-4 w-4\" /> Cheque\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-xl\">\n        <form onSubmit={handleSubmit(onSubmit)}>\n            <DialogHeader>\n            <DialogTitle>Add New Cheque</DialogTitle>\n            <DialogDescription>\n                Fill in the details below to record a new cheque. Select a contract to auto-fill details.\n            </DialogDescription>\n            </DialogHeader>\n            <div className=\"grid gap-4 py-4 max-h-[70vh] overflow-y-auto pr-2\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                        <Label>Cheque Type</Label>\n                        <Controller\n                            name=\"type\"\n                            control={control}\n                            render={({ field }) => (\n                                <Select onValueChange={(value: 'Incoming' | 'Outgoing') => handleTypeChange(value)} value={field.value}>\n                                    <SelectTrigger><SelectValue/></SelectTrigger>\n                                    <SelectContent>\n                                        <SelectItem value=\"Incoming\">Incoming</SelectItem>\n                                        <SelectItem value=\"Outgoing\">Outgoing</SelectItem>\n                                    </SelectContent>\n                                </Select>\n                            )} />\n                    </div>\n                     <div className=\"space-y-2\">\n                        <Label>Party Type</Label>\n                        <Controller\n                            name=\"partyType\"\n                            control={control}\n                            render={({ field }) => (\n                                <Select onValueChange={field.onChange} value={field.value}>\n                                    <SelectTrigger><SelectValue/></SelectTrigger>\n                                    <SelectContent>\n                                        {chequeType === 'Incoming' ? (\n                                            <>\n                                                <SelectItem value=\"Tenant\">Tenant</SelectItem>\n                                                <SelectItem value=\"Customer\">Customer</SelectItem>\n                                            </>\n                                        ) : (\n                                            <>\n                                                 <SelectItem value=\"Landlord\">Landlord</SelectItem>\n                                                 <SelectItem value=\"Vendor\">Vendor</SelectItem>\n                                                 <SelectItem value=\"Agent\">Agent</SelectItem>\n                                            </>\n                                        )}\n                                    </SelectContent>\n                                </Select>\n                            )} />\n                    </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                     <div className=\"space-y-2\">\n                        <Label htmlFor=\"partyName\">{partyType}</Label>\n                        <Controller\n                            name=\"partyName\"\n                            control={control}\n                            render={({ field }) => (\n                                <Combobox\n                                    options={partyOptions}\n                                    value={field.value}\n                                    onSelect={(value) => {\n                                        setValue('partyName', value);\n                                        setValue('contractNo', '');\n                                        setValue('property', '');\n                                    }}\n                                    placeholder={`Select ${partyType}`}\n                                />\n                            )}\n                        />\n                         {errors.partyName && <p className=\"text-destructive text-xs mt-1\">{errors.partyName.message}</p>}\n                    </div>\n                     <div className=\"space-y-2\">\n                        <Label htmlFor=\"contractNo\">Contract No</Label>\n                         <Controller\n                            name=\"contractNo\"\n                            control={control}\n                            render={({ field }) => (\n                                <Combobox\n                                    options={filteredContracts}\n                                    value={field.value}\n                                    onSelect={handleContractSelect}\n                                    placeholder=\"Select Contract\"\n                                    disabled={!selectedPartyCode || contractOptions.length === 0}\n                                />\n                            )}\n                        />\n                    </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    <div className=\"space-y-2\">\n                        <Label htmlFor=\"property\">Property</Label>\n                        <Input id=\"property\" {...register('property')} placeholder=\"Associated property\" disabled />\n                    </div>\n                    <div className=\"space-y-2\">\n                        <Label htmlFor=\"unitCode\">Unit</Label>\n                         <Input id=\"unitCode\" {...register('unitCode')} placeholder=\"Unit\" disabled />\n                    </div>\n                    <div className=\"space-y-2\">\n                        <Label htmlFor=\"roomCode\">Room</Label>\n                         <Input id=\"roomCode\" {...register('roomCode')} placeholder=\"Room\" disabled />\n                    </div>\n                </div>\n\n                {selectedContract && selectedContract.paymentSchedule && (\n                     <div className=\"space-y-2\">\n                        <Label>Select Installment to Populate</Label>\n                        <Select onValueChange={handleInstallmentSelect}>\n                            <SelectTrigger>\n                                <SelectValue placeholder=\"Select an installment...\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                                {selectedContract.paymentSchedule.map((item, index) => (\n                                    <SelectItem key={index} value={String(index)}>\n                                        Installment {item.installment} - {formatCurrency(item.amount)} - Due: {item.dueDate}\n                                    </SelectItem>\n                                ))}\n                            </SelectContent>\n                        </Select>\n                    </div>\n                )}\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                        <Label htmlFor=\"chequeNo\">Cheque No</Label>\n                        <Input id=\"chequeNo\" {...register('chequeNo')} />\n                        {errors.chequeNo && <p className=\"text-destructive text-xs mt-1\">{errors.chequeNo.message}</p>}\n                    </div>\n                     <div className=\"space-y-2\">\n                        <Label htmlFor=\"chequeDate\">Cheque Due Date</Label>\n                        <Input id=\"chequeDate\" type=\"date\" {...register('chequeDate')} />\n                        {errors.chequeDate && <p className=\"text-destructive text-xs mt-1\">{errors.chequeDate.message}</p>}\n                    </div>\n                </div>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                     <div className=\"space-y-2\">\n                        <Label htmlFor=\"amount\">Amount</Label>\n                        <Input id=\"amount\" type=\"number\" {...register('amount', { valueAsNumber: true })} />\n                        {errors.amount && <p className=\"text-destructive text-xs mt-1\">{errors.amount.message}</p>}\n                    </div>\n                    <div className=\"space-y-2\">\n                        <Label htmlFor=\"bankName\">Bank Name</Label>\n                        <Input id=\"bankName\" {...register('bankName')} />\n                        {errors.bankName && <p className=\"text-destructive text-xs mt-1\">{errors.bankName.message}</p>}\n                    </div>\n                </div>\n                 <div className=\"space-y-2\">\n                    <Label htmlFor=\"remarks\">Remarks</Label>\n                    <Textarea id=\"remarks\" {...register('remarks')} />\n                </div>\n            </div>\n            <DialogFooter>\n                <DialogClose asChild>\n                    <Button type=\"button\" variant=\"outline\" onClick={() => reset()}>Cancel</Button>\n                </DialogClose>\n                <Button type=\"submit\" disabled={isSaving}>\n                    {isSaving && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                    Add Cheque\n                </Button>\n            </DialogFooter>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2316, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/calendar.tsx"],"sourcesContent":["\n\"use client\"\n\nimport * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ ...props }) => <ChevronLeft className=\"h-4 w-4\" />,\n        IconRight: ({ ...props }) => <ChevronRight className=\"h-4 w-4\" />,\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n"],"names":[],"mappings":";;;;;AAIA;AAAA;AACA;AAEA;AACA;AAPA;;;;;;AAWA,SAAS,SAAS,KAKF;QALE,EAChB,SAAS,EACT,UAAU,EACV,kBAAkB,IAAI,EACtB,GAAG,OACW,GALE;IAMhB,qBACE,6LAAC,8KAAS;QACR,iBAAiB;QACjB,WAAW,IAAA,4HAAE,EAAC,OAAO;QACrB,YAAY;YACV,QAAQ;YACR,OAAO;YACP,SAAS;YACT,eAAe;YACf,KAAK;YACL,YAAY,IAAA,4HAAE,EACZ,IAAA,uJAAc,EAAC;gBAAE,SAAS;YAAU,IACpC;YAEF,qBAAqB;YACrB,iBAAiB;YACjB,OAAO;YACP,UAAU;YACV,WACE;YACF,KAAK;YACL,MAAM;YACN,KAAK,IAAA,4HAAE,EACL,IAAA,uJAAc,EAAC;gBAAE,SAAS;YAAQ,IAClC;YAEF,eAAe;YACf,cACE;YACF,WAAW;YACX,aACE;YACF,cAAc;YACd,kBACE;YACF,YAAY;YACZ,GAAG,UAAU;QACf;QACA,YAAY;YACV,UAAU;oBAAC,EAAE,GAAG,OAAO;qCAAK,6LAAC,sOAAW;oBAAC,WAAU;;;;;;;YACnD,WAAW;oBAAC,EAAE,GAAG,OAAO;qCAAK,6LAAC,yOAAY;oBAAC,WAAU;;;;;;;QACvD;QACC,GAAG,KAAK;;;;;;AAGf;KAnDS;AAoDT,SAAS,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 2406, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/date-picker.tsx"],"sourcesContent":["\n\"use client\"\n\nimport * as React from \"react\"\nimport { format } from \"date-fns\"\nimport { Calendar as CalendarIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Calendar } from \"@/components/ui/calendar\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\"\n\ninterface DatePickerProps {\n  selected: Date | null;\n  onSelect: (date: Date | null) => void;\n}\n\nexport function DatePicker({ selected, onSelect }: DatePickerProps) {\n\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button\n          variant={\"outline\"}\n          className={cn(\n            \"w-[280px] justify-start text-left font-normal\",\n            !selected && \"text-muted-foreground\"\n          )}\n        >\n          <CalendarIcon className=\"mr-2 h-4 w-4\" />\n          {selected ? format(selected, \"PPP\") : <span>Pick a date</span>}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-auto p-0\">\n        <Calendar\n          mode=\"single\"\n          selected={selected ? selected : undefined}\n          onSelect={(date) => onSelect(date || null)}\n          initialFocus\n        />\n      </PopoverContent>\n    </Popover>\n  )\n}\n"],"names":[],"mappings":";;;;;AAIA;AACA;AAEA;AACA;AACA;AACA;AATA;;;;;;;;AAoBO,SAAS,WAAW,KAAuC;QAAvC,EAAE,QAAQ,EAAE,QAAQ,EAAmB,GAAvC;IAEzB,qBACE,6LAAC,iJAAO;;0BACN,6LAAC,wJAAc;gBAAC,OAAO;0BACrB,cAAA,6LAAC,+IAAM;oBACL,SAAS;oBACT,WAAW,IAAA,4HAAE,EACX,iDACA,CAAC,YAAY;;sCAGf,6LAAC,yNAAY;4BAAC,WAAU;;;;;;wBACvB,WAAW,IAAA,mKAAM,EAAC,UAAU,uBAAS,6LAAC;sCAAK;;;;;;;;;;;;;;;;;0BAGhD,6LAAC,wJAAc;gBAAC,WAAU;0BACxB,cAAA,6LAAC,mJAAQ;oBACP,MAAK;oBACL,UAAU,WAAW,WAAW;oBAChC,UAAU,CAAC,OAAS,SAAS,QAAQ;oBACrC,YAAY;;;;;;;;;;;;;;;;;AAKtB;KA1BgB","debugId":null}},
    {"offset": {"line": 2494, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/finance/cheque-management/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { z } from 'zod';\nimport { revalidatePath } from 'next/cache';\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { Cheque, chequeSchema, ChequeBook, chequeBookSchema, ChequeLeaf } from './schema';\n\nconst chequesFilePath = path.join(process.cwd(), 'src/data/cheques-data.json');\nconst chequeBooksFilePath = path.join(process.cwd(), 'src/data/cheque-books-data.json');\n\nasync function readData(filePath: string) {\n    try {\n        await fs.access(filePath);\n        const data = await fs.readFile(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            return [];\n        }\n        throw error;\n    }\n}\n\nasync function writeCheques(data: Cheque[]) {\n    await fs.writeFile(chequesFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\nasync function writeChequeBooks(data: ChequeBook[]) {\n    await fs.writeFile(chequeBooksFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\nexport async function getCheques(filters: { party?: string; status?: string } = {}) {\n    let cheques = await readData(chequesFilePath);\n    if (filters.party) {\n        cheques = cheques.filter(cheque => cheque.partyName.toLowerCase().includes(filters.party!.toLowerCase()));\n    }\n    if (filters.status) {\n        cheques = cheques.filter(cheque => cheque.status === filters.status);\n    }\n    return cheques;\n}\n\nexport async function addCheque(data: Omit<Cheque, 'id' | 'status'>) {\n    const validation = chequeSchema.omit({ id: true, status: true }).safeParse(data);\n    if (!validation.success) {\n        return { success: false, error: 'Invalid data format.' };\n    }\n    const allCheques = await readData(chequesFilePath);\n    const newCheque: Cheque = {\n        ...validation.data,\n        id: `CHQ-${Date.now()}`,\n        status: 'In Hand',\n    };\n    allCheques.push(newCheque);\n    await writeCheques(allCheques);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n\nexport async function depositCheques(chequeIds: string[], depositDate: string, bankAccountId: string) {\n    if (!chequeIds || chequeIds.length === 0) return { success: false, error: 'No cheques selected.' };\n    let allCheques = await readData(chequesFilePath);\n    allCheques = allCheques.map(cheque => \n        chequeIds.includes(cheque.id) \n            ? { ...cheque, status: 'Deposited', depositDate, bankAccountId } \n            : cheque\n    );\n    await writeCheques(allCheques);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n\nexport async function returnCheque(chequeId: string, returnDate: string, reason: string) {\n    let allCheques = await readData(chequesFilePath);\n    const chequeIndex = allCheques.findIndex(c => c.id === chequeId);\n    if (chequeIndex === -1) return { success: false, error: 'Cheque not found.' };\n    allCheques[chequeIndex] = { ...allCheques[chequeIndex], status: 'Returned', returnDate, returnReason: reason };\n    await writeCheques(allCheques);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n\nexport async function withdrawCheques(chequeIds: string[]) {\n    if (!chequeIds || chequeIds.length === 0) return { success: false, error: 'No cheques selected.' };\n    let allCheques = await readData(chequesFilePath);\n    allCheques = allCheques.map(cheque => chequeIds.includes(cheque.id) ? { ...cheque, status: 'Withdrawn' } : cheque);\n    await writeCheques(allCheques);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n\nexport async function getChequeBooks() {\n    return await readData(chequeBooksFilePath);\n}\n\nexport async function getChequeLeaves(filters: { bank?: string; bookNo?: string; status?: string } = {}): Promise<ChequeLeaf[]> {\n    const books = await getChequeBooks();\n    const cheques = await getCheques();\n    let leaves: ChequeLeaf[] = [];\n\n    for (const book of books) {\n        for (let i = book.chequeStartNo; i <= book.chequeEndNo; i++) {\n            const chequeNo = i.toString().padStart(6, '0');\n            const usedCheque = cheques.find(c => c.chequeNo === chequeNo && c.bookNo === book.bookNo);\n            leaves.push({\n                id: `${book.id}-${chequeNo}`,\n                chequeNo: chequeNo,\n                bookNo: book.bookNo,\n                bankName: book.bankName,\n                status: usedCheque ? 'Used' : 'Unused',\n                partyName: usedCheque?.partyName,\n                date: usedCheque?.date,\n                amount: usedCheque?.amount\n            });\n        }\n    }\n\n    if (filters.bank) {\n        leaves = leaves.filter(leaf => leaf.bankName === filters.bank);\n    }\n    if (filters.bookNo) {\n        leaves = leaves.filter(leaf => leaf.bookNo === filters.bookNo);\n    }\n    if (filters.status) {\n        leaves = leaves.filter(leaf => leaf.status === filters.status);\n    }\n\n    return leaves;\n}\n\nexport async function addChequeBook(data: Omit<ChequeBook, 'id' | 'leafsUsed'>) {\n    const validation = chequeBookSchema.omit({ id: true, leafsUsed: true }).safeParse(data);\n    if (!validation.success) {\n        return { success: false, error: 'Invalid data format.' };\n    }\n    \n    const allBooks = await getChequeBooks();\n    const newBook: ChequeBook = {\n        ...validation.data,\n        id: `CB-${Date.now()}`,\n        leafsUsed: 0,\n    };\n\n    if (allBooks.some(book => book.bookNo === newBook.bookNo)) {\n        return { success: false, error: 'A cheque book with this book number already exists.' };\n    }\n\n    allBooks.push(newBook);\n    \n    await writeChequeBooks(allBooks);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n\nexport async function updateChequeBook(data: Omit<ChequeBook, 'leafsUsed'>) {\n    const validation = chequeBookSchema.omit({ leafsUsed: true }).safeParse(data);\n    if (!validation.success) {\n        return { success: false, error: 'Invalid data format.' };\n    }\n\n    const allBooks = await getChequeBooks();\n    const bookIndex = allBooks.findIndex(b => b.id === data.id);\n    if (bookIndex === -1) {\n        return { success: false, error: 'Cheque book not found.' };\n    }\n\n    if (allBooks.some(book => book.bookNo === data.bookNo && book.id !== data.id)) {\n        return { success: false, error: 'A cheque book with this book number already exists.' };\n    }\n    \n    const currentBook = allBooks[bookIndex];\n    allBooks[bookIndex] = {\n      ...currentBook,\n      ...validation.data,\n      id: currentBook.id,\n    };\n    \n    await writeChequeBooks(allBooks);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n\nexport async function deleteChequeBook(id: string) {\n    const allBooks = await getChequeBooks();\n    const updatedBooks = allBooks.filter(b => b.id !== id);\n    if (allBooks.length === updatedBooks.length) {\n        return { success: false, error: 'Cheque book not found.' };\n    }\n    await writeChequeBooks(updatedBooks);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n"],"names":[],"mappings":";;;;;;;IA6DsB,iBAAA,WAAA,GAAA,IAAA,kPAAA,EAAA,8CAAA,uOAAA,EAAA,KAAA,GAAA,6OAAA,EAAA","debugId":null}},
    {"offset": {"line": 2509, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/finance/banking/actions.ts"],"sourcesContent":["'use server';\n\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { z } from 'zod';\nimport { revalidatePath } from 'next/cache';\nimport { bankAccountSchema, type BankAccount } from './schema';\nimport { type Payment, paymentSchema } from '../payment/schema';\nimport { type Cheque } from '../cheque-deposit/schema';\nimport { getWorkflowSettings } from '@/app/admin/workflow-settings/actions';\nimport { applyFinancialImpact } from '@/app/workflow/actions';\n\n\nconst accountsFilePath = path.join(process.cwd(), 'src/app/finance/banking/accounts-data.json');\nconst paymentsFilePath = path.join(process.cwd(), 'src/app/finance/payment/payments-data.json');\nconst pettyCashFilePath = path.join(process.cwd(), 'src/app/finance/banking/petty-cash.json');\nconst chequesFilePath = path.join(process.cwd(), 'src/app/finance/cheque-deposit/cheques-data.json');\n\n\nasync function readAccounts(): Promise<BankAccount[]> {\n    try {\n        await fs.access(accountsFilePath);\n        const data = await fs.readFile(accountsFilePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            await writeAccounts([]);\n            return [];\n        }\n        throw error;\n    }\n}\n\nasync function writeAccounts(data: BankAccount[]) {\n    await fs.writeFile(accountsFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\nexport async function readPettyCash() {\n    try {\n        await fs.access(pettyCashFilePath);\n        const data = await fs.readFile(pettyCashFilePath, 'utf-8');\n        if (!data || (Array.isArray(data) && data.length === 0)) return { balance: 0 };\n        return JSON.parse(data);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            return { balance: 0 };\n        }\n        throw error;\n    }\n}\n\nexport async function writePettyCash(data: { balance: number }) {\n    await fs.writeFile(pettyCashFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\n\nexport async function getBankAccounts() {\n    const storedAccounts = await readAccounts();\n    const pettyCashData = await readPettyCash();\n    const pettyCashAccount: BankAccount = {\n        id: \"acc_3\",\n        accountName: \"Petty Cash\",\n        bankName: \"Cash on Hand\",\n        accountNumber: \"N/A\",\n        balance: pettyCashData.balance,\n        currency: \"AED\",\n    };\n    return [pettyCashAccount, ...storedAccounts];\n}\n\n\nconst formSchema = bankAccountSchema.omit({ id: true });\n\nexport async function saveBankAccount(data: z.infer<typeof bankAccountSchema>, isNew: boolean) {\n    const validation = bankAccountSchema.safeParse(data);\n    if (!validation.success) {\n        return { success: false, error: 'Invalid data format.' };\n    }\n\n    try {\n        const allAccounts = await readAccounts();\n        \n        if (isNew) {\n            const newAccount: BankAccount = {\n                ...validation.data,\n                id: `acc_${Date.now()}`,\n            };\n            allAccounts.push(newAccount);\n        } else {\n            const index = allAccounts.findIndex(acc => acc.id === data.id);\n            if (index === -1) {\n                return { success: false, error: 'Account not found.' };\n            }\n            allAccounts[index] = validation.data;\n        }\n\n        await writeAccounts(allAccounts);\n        revalidatePath('/finance/banking');\n        return { success: true };\n\n    } catch (error) {\n        return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n\nexport async function deleteBankAccount(accountId: string) {\n     try {\n        if (accountId === 'acc_3') {\n            return { success: true }; // Silently succeed for petty cash\n        }\n        \n        const allAccounts = await readAccounts();\n        const updatedAccounts = allAccounts.filter(acc => acc.id !== accountId);\n        \n        if (allAccounts.length === updatedAccounts.length) {\n            return { success: false, error: 'Account not found.' };\n        }\n\n        await writeAccounts(updatedAccounts);\n        revalidatePath('/finance/banking');\n        return { success: true };\n\n    } catch (error) {\n        return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n\nasync function readAllPayments(): Promise<Payment[]> {\n    try {\n        const paymentsData = await fs.readFile(paymentsFilePath, 'utf-8');\n        return JSON.parse(paymentsData);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            return [];\n        }\n        console.error('Failed to read payments file:', error);\n        return [];\n    }\n}\n\nasync function writePayments(data: Payment[]) {\n    await fs.writeFile(paymentsFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\n\nasync function readAllCheques(): Promise<Cheque[]> {\n    try {\n        const chequesData = await fs.readFile(chequesFilePath, 'utf-8');\n        return JSON.parse(chequesData);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            return [];\n        }\n        console.error('Failed to read cheques file:', error);\n        return [];\n    }\n}\n\n\nexport async function getAllTransactions(): Promise<Payment[]> {\n    const payments = await readAllPayments();\n    \n    const allTransactions = [...payments].filter(p => p.currentStatus === 'POSTED');\n\n    return allTransactions.sort((a,b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n}\n\nexport async function getTransactionsForAccount(accountId: string): Promise<Payment[]> {\n     try {\n        const allTransactions = await readAllPayments();\n        \n        const accountPayments = allTransactions.filter((p: Payment) => {\n            if (p.currentStatus !== 'POSTED') return false; // Only show posted transactions\n            \n            if (accountId === 'acc_3') { // Petty Cash account\n                return p.paymentFrom === 'Petty Cash';\n            }\n            return p.bankAccountId === accountId;\n        });\n\n        return accountPayments.sort((a,b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n    } catch (error) {\n        console.error('Failed to read payments file:', error);\n        return [];\n    }\n}\n\nconst fundTransferSchema = z.object({\n    fromAccountId: z.string().min(1, \"From account is required.\"),\n    toAccountId: z.string().min(1, \"To account is required.\"),\n    amount: z.number().min(0.01, \"Amount must be positive.\"),\n    date: z.string().min(1, \"Date is required.\"),\n    remarks: z.string().optional(),\n});\n\n\nexport async function transferFunds(data: z.infer<typeof fundTransferSchema>) {\n    const validation = fundTransferSchema.safeParse(data);\n    if (!validation.success) {\n        return { success: false, error: 'Invalid data format.' };\n    }\n\n    const { fromAccountId, toAccountId, amount, date, remarks } = validation.data;\n\n    if (fromAccountId === toAccountId) {\n        return { success: false, error: \"From and To accounts cannot be the same.\" };\n    }\n    \n    try {\n        const workflowSettings = await getWorkflowSettings();\n        const initialStatus = workflowSettings.approvalProcessEnabled ? 'DRAFT' : 'POSTED';\n\n        if (initialStatus === 'POSTED') {\n            // If direct posting, do the balance update. Otherwise, it happens on final approval.\n            const allAccounts = await readAccounts();\n            const pettyCash = await readPettyCash();\n            \n            const fromAccount = fromAccountId === 'acc_3' ? { ...pettyCash, id: 'acc_3', accountName: 'Petty Cash' } : allAccounts.find(acc => acc.id === fromAccountId);\n            const toAccount = toAccountId === 'acc_3' ? { ...pettyCash, id: 'acc_3', accountName: 'Petty Cash' } : allAccounts.find(acc => acc.id === toAccountId);\n\n            if (!fromAccount || !toAccount) {\n                return { success: false, error: \"One or both accounts not found.\" };\n            }\n            \n            if(fromAccount.balance < amount) {\n                return { success: false, error: `Insufficient funds in ${fromAccount.accountName}.` };\n            }\n\n            if (fromAccountId === 'acc_3') {\n                pettyCash.balance -= amount;\n            } else {\n                const fromIndex = allAccounts.findIndex(acc => acc.id === fromAccountId);\n                allAccounts[fromIndex].balance -= amount;\n            }\n            \n            if (toAccountId === 'acc_3') {\n                pettyCash.balance += amount;\n            } else {\n                const toIndex = allAccounts.findIndex(acc => acc.id === toAccountId);\n                allAccounts[toIndex].balance += amount;\n            }\n            \n            await writeAccounts(allAccounts);\n            await writePettyCash(pettyCash);\n        }\n\n        // Create payment records regardless of workflow status\n        const allPayments = await readAllPayments();\n        const referenceNo = `TRF-${Date.now()}`;\n        const fromAccountName = fromAccountId === 'acc_3' ? 'Petty Cash' : (await readAccounts()).find(a => a.id === fromAccountId)?.accountName || 'Bank';\n        const toAccountName = toAccountId === 'acc_3' ? 'Petty Cash' : (await readAccounts()).find(a => a.id === toAccountId)?.accountName || 'Bank';\n        \n        const paymentRecord: Payment = {\n            id: `PAY-${Date.now()}-OUT`,\n            type: 'Payment',\n            date: date,\n            partyType: 'Vendor', // Internal Transfer\n            partyName: `Transfer to ${toAccountName}`,\n            amount: amount,\n            paymentMethod: fromAccountId === 'acc_3' ? 'Cash' : 'Bank Transfer',\n            bankAccountId: fromAccountId,\n            paymentFrom: fromAccountId === 'acc_3' ? 'Petty Cash' : 'Bank',\n            referenceNo,\n            remarks,\n            status: 'Paid',\n            currentStatus: initialStatus,\n        };\n\n         const receiptRecord: Payment = {\n            id: `PAY-${Date.now()}-IN`,\n            type: 'Receipt',\n            date: date,\n            partyType: 'Customer', // Internal Transfer\n            partyName: `Transfer from ${fromAccountName}`,\n            amount: amount,\n            paymentMethod: toAccountId === 'acc_3' ? 'Cash' : 'Bank Transfer',\n            bankAccountId: toAccountId,\n            paymentFrom: toAccountId === 'acc_3' ? 'Petty Cash' : 'Bank',\n            referenceNo,\n            remarks,\n            status: 'Received',\n            currentStatus: initialStatus,\n        };\n        \n        allPayments.push(paymentRecord, receiptRecord);\n        await writePayments(allPayments);\n\n        revalidatePath('/finance/banking');\n        revalidatePath('/workflow');\n        return { success: true };\n\n    } catch (error) {\n        return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n\nexport async function createDepositVoucher(data: { bankAccountId: string, depositDate: string, chequeIds: string[] }) {\n    const { bankAccountId, depositDate, chequeIds } = data;\n\n    try {\n        const allCheques = await readAllCheques();\n        const chequesToDeposit = allCheques.filter(c => chequeIds.includes(c.id));\n\n        if (chequesToDeposit.length === 0) {\n            return { success: false, error: 'No valid cheques found for deposit.' };\n        }\n\n        const totalAmount = chequesToDeposit.reduce((sum, cheque) => sum + cheque.amount, 0);\n        const remarks = `Deposit of ${chequesToDeposit.length} cheques. Cheque numbers: ${chequesToDeposit.map(c => c.chequeNo).join(', ')}`;\n\n        const allAccounts = await readAccounts();\n        const accountIndex = allAccounts.findIndex(acc => acc.id === bankAccountId);\n\n        if (accountIndex === -1) {\n            return { success: false, error: 'Bank account not found.' };\n        }\n\n        allAccounts[accountIndex].balance += totalAmount;\n        await writeAccounts(allAccounts);\n\n        const allPayments = await readAllPayments();\n        const newReceipt: Payment = {\n            id: `RCPT-${Date.now()}`,\n            type: 'Receipt',\n            date: depositDate,\n            partyType: 'Customer',\n            partyName: 'Cheque Deposit',\n            amount: totalAmount,\n            paymentMethod: 'Cheque',\n            bankAccountId: bankAccountId,\n            paymentFrom: 'Bank',\n            referenceNo: `DEP-${Date.now()}`,\n            remarks: remarks,\n            status: 'Received',\n            currentStatus: 'POSTED', \n        };\n\n        allPayments.push(newReceipt);\n        await writePayments(allPayments);\n\n        revalidatePath('/finance/banking');\n        return { success: true };\n\n    } catch (error) {\n        return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n"],"names":[],"mappings":";;;;;;;IAwDsB,kBAAA,WAAA,GAAA,IAAA,kPAAA,EAAA,8CAAA,uOAAA,EAAA,KAAA,GAAA,6OAAA,EAAA","debugId":null}},
    {"offset": {"line": 2524, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/finance/banking/actions.ts"],"sourcesContent":["'use server';\n\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { z } from 'zod';\nimport { revalidatePath } from 'next/cache';\nimport { bankAccountSchema, type BankAccount } from './schema';\nimport { type Payment, paymentSchema } from '../payment/schema';\nimport { type Cheque } from '../cheque-deposit/schema';\nimport { getWorkflowSettings } from '@/app/admin/workflow-settings/actions';\nimport { applyFinancialImpact } from '@/app/workflow/actions';\n\n\nconst accountsFilePath = path.join(process.cwd(), 'src/app/finance/banking/accounts-data.json');\nconst paymentsFilePath = path.join(process.cwd(), 'src/app/finance/payment/payments-data.json');\nconst pettyCashFilePath = path.join(process.cwd(), 'src/app/finance/banking/petty-cash.json');\nconst chequesFilePath = path.join(process.cwd(), 'src/app/finance/cheque-deposit/cheques-data.json');\n\n\nasync function readAccounts(): Promise<BankAccount[]> {\n    try {\n        await fs.access(accountsFilePath);\n        const data = await fs.readFile(accountsFilePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            await writeAccounts([]);\n            return [];\n        }\n        throw error;\n    }\n}\n\nasync function writeAccounts(data: BankAccount[]) {\n    await fs.writeFile(accountsFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\nexport async function readPettyCash() {\n    try {\n        await fs.access(pettyCashFilePath);\n        const data = await fs.readFile(pettyCashFilePath, 'utf-8');\n        if (!data || (Array.isArray(data) && data.length === 0)) return { balance: 0 };\n        return JSON.parse(data);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            return { balance: 0 };\n        }\n        throw error;\n    }\n}\n\nexport async function writePettyCash(data: { balance: number }) {\n    await fs.writeFile(pettyCashFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\n\nexport async function getBankAccounts() {\n    const storedAccounts = await readAccounts();\n    const pettyCashData = await readPettyCash();\n    const pettyCashAccount: BankAccount = {\n        id: \"acc_3\",\n        accountName: \"Petty Cash\",\n        bankName: \"Cash on Hand\",\n        accountNumber: \"N/A\",\n        balance: pettyCashData.balance,\n        currency: \"AED\",\n    };\n    return [pettyCashAccount, ...storedAccounts];\n}\n\n\nconst formSchema = bankAccountSchema.omit({ id: true });\n\nexport async function saveBankAccount(data: z.infer<typeof bankAccountSchema>, isNew: boolean) {\n    const validation = bankAccountSchema.safeParse(data);\n    if (!validation.success) {\n        return { success: false, error: 'Invalid data format.' };\n    }\n\n    try {\n        const allAccounts = await readAccounts();\n        \n        if (isNew) {\n            const newAccount: BankAccount = {\n                ...validation.data,\n                id: `acc_${Date.now()}`,\n            };\n            allAccounts.push(newAccount);\n        } else {\n            const index = allAccounts.findIndex(acc => acc.id === data.id);\n            if (index === -1) {\n                return { success: false, error: 'Account not found.' };\n            }\n            allAccounts[index] = validation.data;\n        }\n\n        await writeAccounts(allAccounts);\n        revalidatePath('/finance/banking');\n        return { success: true };\n\n    } catch (error) {\n        return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n\nexport async function deleteBankAccount(accountId: string) {\n     try {\n        if (accountId === 'acc_3') {\n            return { success: true }; // Silently succeed for petty cash\n        }\n        \n        const allAccounts = await readAccounts();\n        const updatedAccounts = allAccounts.filter(acc => acc.id !== accountId);\n        \n        if (allAccounts.length === updatedAccounts.length) {\n            return { success: false, error: 'Account not found.' };\n        }\n\n        await writeAccounts(updatedAccounts);\n        revalidatePath('/finance/banking');\n        return { success: true };\n\n    } catch (error) {\n        return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n\nasync function readAllPayments(): Promise<Payment[]> {\n    try {\n        const paymentsData = await fs.readFile(paymentsFilePath, 'utf-8');\n        return JSON.parse(paymentsData);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            return [];\n        }\n        console.error('Failed to read payments file:', error);\n        return [];\n    }\n}\n\nasync function writePayments(data: Payment[]) {\n    await fs.writeFile(paymentsFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\n\nasync function readAllCheques(): Promise<Cheque[]> {\n    try {\n        const chequesData = await fs.readFile(chequesFilePath, 'utf-8');\n        return JSON.parse(chequesData);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            return [];\n        }\n        console.error('Failed to read cheques file:', error);\n        return [];\n    }\n}\n\n\nexport async function getAllTransactions(): Promise<Payment[]> {\n    const payments = await readAllPayments();\n    \n    const allTransactions = [...payments].filter(p => p.currentStatus === 'POSTED');\n\n    return allTransactions.sort((a,b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n}\n\nexport async function getTransactionsForAccount(accountId: string): Promise<Payment[]> {\n     try {\n        const allTransactions = await readAllPayments();\n        \n        const accountPayments = allTransactions.filter((p: Payment) => {\n            if (p.currentStatus !== 'POSTED') return false; // Only show posted transactions\n            \n            if (accountId === 'acc_3') { // Petty Cash account\n                return p.paymentFrom === 'Petty Cash';\n            }\n            return p.bankAccountId === accountId;\n        });\n\n        return accountPayments.sort((a,b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n    } catch (error) {\n        console.error('Failed to read payments file:', error);\n        return [];\n    }\n}\n\nconst fundTransferSchema = z.object({\n    fromAccountId: z.string().min(1, \"From account is required.\"),\n    toAccountId: z.string().min(1, \"To account is required.\"),\n    amount: z.number().min(0.01, \"Amount must be positive.\"),\n    date: z.string().min(1, \"Date is required.\"),\n    remarks: z.string().optional(),\n});\n\n\nexport async function transferFunds(data: z.infer<typeof fundTransferSchema>) {\n    const validation = fundTransferSchema.safeParse(data);\n    if (!validation.success) {\n        return { success: false, error: 'Invalid data format.' };\n    }\n\n    const { fromAccountId, toAccountId, amount, date, remarks } = validation.data;\n\n    if (fromAccountId === toAccountId) {\n        return { success: false, error: \"From and To accounts cannot be the same.\" };\n    }\n    \n    try {\n        const workflowSettings = await getWorkflowSettings();\n        const initialStatus = workflowSettings.approvalProcessEnabled ? 'DRAFT' : 'POSTED';\n\n        if (initialStatus === 'POSTED') {\n            // If direct posting, do the balance update. Otherwise, it happens on final approval.\n            const allAccounts = await readAccounts();\n            const pettyCash = await readPettyCash();\n            \n            const fromAccount = fromAccountId === 'acc_3' ? { ...pettyCash, id: 'acc_3', accountName: 'Petty Cash' } : allAccounts.find(acc => acc.id === fromAccountId);\n            const toAccount = toAccountId === 'acc_3' ? { ...pettyCash, id: 'acc_3', accountName: 'Petty Cash' } : allAccounts.find(acc => acc.id === toAccountId);\n\n            if (!fromAccount || !toAccount) {\n                return { success: false, error: \"One or both accounts not found.\" };\n            }\n            \n            if(fromAccount.balance < amount) {\n                return { success: false, error: `Insufficient funds in ${fromAccount.accountName}.` };\n            }\n\n            if (fromAccountId === 'acc_3') {\n                pettyCash.balance -= amount;\n            } else {\n                const fromIndex = allAccounts.findIndex(acc => acc.id === fromAccountId);\n                allAccounts[fromIndex].balance -= amount;\n            }\n            \n            if (toAccountId === 'acc_3') {\n                pettyCash.balance += amount;\n            } else {\n                const toIndex = allAccounts.findIndex(acc => acc.id === toAccountId);\n                allAccounts[toIndex].balance += amount;\n            }\n            \n            await writeAccounts(allAccounts);\n            await writePettyCash(pettyCash);\n        }\n\n        // Create payment records regardless of workflow status\n        const allPayments = await readAllPayments();\n        const referenceNo = `TRF-${Date.now()}`;\n        const fromAccountName = fromAccountId === 'acc_3' ? 'Petty Cash' : (await readAccounts()).find(a => a.id === fromAccountId)?.accountName || 'Bank';\n        const toAccountName = toAccountId === 'acc_3' ? 'Petty Cash' : (await readAccounts()).find(a => a.id === toAccountId)?.accountName || 'Bank';\n        \n        const paymentRecord: Payment = {\n            id: `PAY-${Date.now()}-OUT`,\n            type: 'Payment',\n            date: date,\n            partyType: 'Vendor', // Internal Transfer\n            partyName: `Transfer to ${toAccountName}`,\n            amount: amount,\n            paymentMethod: fromAccountId === 'acc_3' ? 'Cash' : 'Bank Transfer',\n            bankAccountId: fromAccountId,\n            paymentFrom: fromAccountId === 'acc_3' ? 'Petty Cash' : 'Bank',\n            referenceNo,\n            remarks,\n            status: 'Paid',\n            currentStatus: initialStatus,\n        };\n\n         const receiptRecord: Payment = {\n            id: `PAY-${Date.now()}-IN`,\n            type: 'Receipt',\n            date: date,\n            partyType: 'Customer', // Internal Transfer\n            partyName: `Transfer from ${fromAccountName}`,\n            amount: amount,\n            paymentMethod: toAccountId === 'acc_3' ? 'Cash' : 'Bank Transfer',\n            bankAccountId: toAccountId,\n            paymentFrom: toAccountId === 'acc_3' ? 'Petty Cash' : 'Bank',\n            referenceNo,\n            remarks,\n            status: 'Received',\n            currentStatus: initialStatus,\n        };\n        \n        allPayments.push(paymentRecord, receiptRecord);\n        await writePayments(allPayments);\n\n        revalidatePath('/finance/banking');\n        revalidatePath('/workflow');\n        return { success: true };\n\n    } catch (error) {\n        return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n\nexport async function createDepositVoucher(data: { bankAccountId: string, depositDate: string, chequeIds: string[] }) {\n    const { bankAccountId, depositDate, chequeIds } = data;\n\n    try {\n        const allCheques = await readAllCheques();\n        const chequesToDeposit = allCheques.filter(c => chequeIds.includes(c.id));\n\n        if (chequesToDeposit.length === 0) {\n            return { success: false, error: 'No valid cheques found for deposit.' };\n        }\n\n        const totalAmount = chequesToDeposit.reduce((sum, cheque) => sum + cheque.amount, 0);\n        const remarks = `Deposit of ${chequesToDeposit.length} cheques. Cheque numbers: ${chequesToDeposit.map(c => c.chequeNo).join(', ')}`;\n\n        const allAccounts = await readAccounts();\n        const accountIndex = allAccounts.findIndex(acc => acc.id === bankAccountId);\n\n        if (accountIndex === -1) {\n            return { success: false, error: 'Bank account not found.' };\n        }\n\n        allAccounts[accountIndex].balance += totalAmount;\n        await writeAccounts(allAccounts);\n\n        const allPayments = await readAllPayments();\n        const newReceipt: Payment = {\n            id: `RCPT-${Date.now()}`,\n            type: 'Receipt',\n            date: depositDate,\n            partyType: 'Customer',\n            partyName: 'Cheque Deposit',\n            amount: totalAmount,\n            paymentMethod: 'Cheque',\n            bankAccountId: bankAccountId,\n            paymentFrom: 'Bank',\n            referenceNo: `DEP-${Date.now()}`,\n            remarks: remarks,\n            status: 'Received',\n            currentStatus: 'POSTED', \n        };\n\n        allPayments.push(newReceipt);\n        await writePayments(allPayments);\n\n        revalidatePath('/finance/banking');\n        return { success: true };\n\n    } catch (error) {\n        return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n"],"names":[],"mappings":";;;;;;;IAwSsB,uBAAA,WAAA,GAAA,IAAA,kPAAA,EAAA,8CAAA,uOAAA,EAAA,KAAA,GAAA,6OAAA,EAAA","debugId":null}},
    {"offset": {"line": 2539, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/finance/cheque-management/deposit-cheques-dialog.tsx"],"sourcesContent":["\n'use client';\n\nimport { useEffect, useState } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { DatePicker } from '@/components/date-picker';\nimport { Label } from '@/components/ui/label';\nimport { type Cheque } from './schema';\nimport { depositCheques } from './actions';\nimport { getBankAccounts, createDepositVoucher } from '@/app/finance/banking/actions';\nimport { type BankAccount } from '../banking/schema';\n\ninterface DepositChequesDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSuccess: () => void;\n  cheques: Cheque[];\n}\n\nexport function DepositChequesDialog({ isOpen, onClose, onSuccess, cheques }: DepositChequesDialogProps) {\n  const [bankAccounts, setBankAccounts] = useState<BankAccount[]>([]);\n  const [selectedBankAccount, setSelectedBankAccount] = useState<string | null>(null);\n  const [depositDate, setDepositDate] = useState<Date | null>(null);\n\n  useEffect(() => {\n    if (isOpen) {\n      getBankAccounts().then(setBankAccounts);\n    }\n  }, [isOpen]);\n\n  const handleDeposit = async () => {\n    if (selectedBankAccount && depositDate) {\n      const selectedChequeIds = cheques.map(c => c.id);\n      await depositCheques(selectedChequeIds, depositDate.toISOString().split('T')[0], selectedBankAccount);\n      await createDepositVoucher({ \n        bankAccountId: selectedBankAccount, \n        depositDate: depositDate.toISOString().split('T')[0],\n        chequeIds: selectedChequeIds\n      });\n      onSuccess();\n      onClose();\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>Deposit Cheques</DialogTitle>\n        </DialogHeader>\n        <div className=\"grid gap-4 py-4\">\n          <div className=\"grid grid-cols-4 items-center gap-4\">\n            <Label htmlFor=\"bank-account\" className=\"text-right\">\n              Bank Account\n            </Label>\n            <Select onValueChange={setSelectedBankAccount}>\n              <SelectTrigger className=\"col-span-3\">\n                <SelectValue placeholder=\"Select a bank account\" />\n              </SelectTrigger>\n              <SelectContent>\n                {bankAccounts.map((account) => (\n                  <SelectItem key={account.id} value={account.id}>\n                    {account.accountName}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n          <div className=\"grid grid-cols-4 items-center gap-4\">\n            <Label htmlFor=\"deposit-date\" className=\"text-right\">\n              Deposit Date\n            </Label>\n            <DatePicker selected={depositDate} onSelect={setDepositDate} />\n          </div>\n        </div>\n        <DialogFooter>\n          <Button onClick={handleDeposit} disabled={!selectedBankAccount || !depositDate}>\n            Deposit\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n"],"names":[],"mappings":";;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;;;AAVA;;;;;;;;;AAoBO,SAAS,qBAAqB,KAAkE;QAAlE,EAAE,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,EAA6B,GAAlE;;IACnC,MAAM,CAAC,cAAc,gBAAgB,GAAG,IAAA,yKAAQ,EAAgB,EAAE;IAClE,MAAM,CAAC,qBAAqB,uBAAuB,GAAG,IAAA,yKAAQ,EAAgB;IAC9E,MAAM,CAAC,aAAa,eAAe,GAAG,IAAA,yKAAQ,EAAc;IAE5D,IAAA,0KAAS;0CAAC;YACR,IAAI,QAAQ;gBACV,IAAA,8LAAe,IAAG,IAAI,CAAC;YACzB;QACF;yCAAG;QAAC;KAAO;IAEX,MAAM,gBAAgB;QACpB,IAAI,uBAAuB,aAAa;YACtC,MAAM,oBAAoB,QAAQ,GAAG,CAAC,CAAA,IAAK,EAAE,EAAE;YAC/C,MAAM,IAAA,0MAAc,EAAC,mBAAmB,YAAY,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE;YACjF,MAAM,IAAA,mMAAoB,EAAC;gBACzB,eAAe;gBACf,aAAa,YAAY,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE;gBACpD,WAAW;YACb;YACA;YACA;QACF;IACF;IAEA,qBACE,6LAAC,+IAAM;QAAC,MAAM;QAAQ,cAAc;kBAClC,cAAA,6LAAC,sJAAa;;8BACZ,6LAAC,qJAAY;8BACX,cAAA,6LAAC,oJAAW;kCAAC;;;;;;;;;;;8BAEf,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;4BAAI,WAAU;;8CACb,6LAAC,6IAAK;oCAAC,SAAQ;oCAAe,WAAU;8CAAa;;;;;;8CAGrD,6LAAC,+IAAM;oCAAC,eAAe;;sDACrB,6LAAC,sJAAa;4CAAC,WAAU;sDACvB,cAAA,6LAAC,oJAAW;gDAAC,aAAY;;;;;;;;;;;sDAE3B,6LAAC,sJAAa;sDACX,aAAa,GAAG,CAAC,CAAC,wBACjB,6LAAC,mJAAU;oDAAkB,OAAO,QAAQ,EAAE;8DAC3C,QAAQ,WAAW;mDADL,QAAQ,EAAE;;;;;;;;;;;;;;;;;;;;;;sCAOnC,6LAAC;4BAAI,WAAU;;8CACb,6LAAC,6IAAK;oCAAC,SAAQ;oCAAe,WAAU;8CAAa;;;;;;8CAGrD,6LAAC,qJAAU;oCAAC,UAAU;oCAAa,UAAU;;;;;;;;;;;;;;;;;;8BAGjD,6LAAC,qJAAY;8BACX,cAAA,6LAAC,+IAAM;wBAAC,SAAS;wBAAe,UAAU,CAAC,uBAAuB,CAAC;kCAAa;;;;;;;;;;;;;;;;;;;;;;AAO1F;GAhEgB;KAAA","debugId":null}},
    {"offset": {"line": 2738, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/scroll-area.tsx"],"sourcesContent":["\n\"use client\"\n\nimport * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollBar orientation=\"horizontal\" />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n"],"names":[],"mappings":";;;;;;;AAGA;AACA;AAEA;AALA;;;;;AAOA,MAAM,2BAAa,2KAAgB,MAGjC,QAAoC;QAAnC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO;yBAClC,6LAAC,qLAAwB;QACvB,KAAK;QACL,WAAW,IAAA,4HAAE,EAAC,4BAA4B;QACzC,GAAG,KAAK;;0BAET,6LAAC,yLAA4B;gBAAC,WAAU;0BACrC;;;;;;0BAEH,6LAAC;;;;;0BACD,6LAAC;gBAAU,aAAY;;;;;;0BACvB,6LAAC,uLAA0B;;;;;;;;;;;;;AAG/B,WAAW,WAAW,GAAG,qLAAwB,CAAC,WAAW;AAE7D,MAAM,0BAAY,2KAAgB,CAGhC,QAAoD;QAAnD,EAAE,SAAS,EAAE,cAAc,UAAU,EAAE,GAAG,OAAO;yBAClD,6LAAC,oMAAuC;QACtC,KAAK;QACL,aAAa;QACb,WAAW,IAAA,4HAAE,EACX,iDACA,gBAAgB,cACd,sDACF,gBAAgB,gBACd,wDACF;QAED,GAAG,KAAK;kBAET,cAAA,6LAAC,gMAAmC;YAAC,WAAU;;;;;;;;;;;;MAjB7C;AAoBN,UAAU,WAAW,GAAG,oMAAuC,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 2828, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/finance/cheque-management/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { z } from 'zod';\nimport { revalidatePath } from 'next/cache';\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { Cheque, chequeSchema, ChequeBook, chequeBookSchema, ChequeLeaf } from './schema';\n\nconst chequesFilePath = path.join(process.cwd(), 'src/data/cheques-data.json');\nconst chequeBooksFilePath = path.join(process.cwd(), 'src/data/cheque-books-data.json');\n\nasync function readData(filePath: string) {\n    try {\n        await fs.access(filePath);\n        const data = await fs.readFile(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            return [];\n        }\n        throw error;\n    }\n}\n\nasync function writeCheques(data: Cheque[]) {\n    await fs.writeFile(chequesFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\nasync function writeChequeBooks(data: ChequeBook[]) {\n    await fs.writeFile(chequeBooksFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\nexport async function getCheques(filters: { party?: string; status?: string } = {}) {\n    let cheques = await readData(chequesFilePath);\n    if (filters.party) {\n        cheques = cheques.filter(cheque => cheque.partyName.toLowerCase().includes(filters.party!.toLowerCase()));\n    }\n    if (filters.status) {\n        cheques = cheques.filter(cheque => cheque.status === filters.status);\n    }\n    return cheques;\n}\n\nexport async function addCheque(data: Omit<Cheque, 'id' | 'status'>) {\n    const validation = chequeSchema.omit({ id: true, status: true }).safeParse(data);\n    if (!validation.success) {\n        return { success: false, error: 'Invalid data format.' };\n    }\n    const allCheques = await readData(chequesFilePath);\n    const newCheque: Cheque = {\n        ...validation.data,\n        id: `CHQ-${Date.now()}`,\n        status: 'In Hand',\n    };\n    allCheques.push(newCheque);\n    await writeCheques(allCheques);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n\nexport async function depositCheques(chequeIds: string[], depositDate: string, bankAccountId: string) {\n    if (!chequeIds || chequeIds.length === 0) return { success: false, error: 'No cheques selected.' };\n    let allCheques = await readData(chequesFilePath);\n    allCheques = allCheques.map(cheque => \n        chequeIds.includes(cheque.id) \n            ? { ...cheque, status: 'Deposited', depositDate, bankAccountId } \n            : cheque\n    );\n    await writeCheques(allCheques);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n\nexport async function returnCheque(chequeId: string, returnDate: string, reason: string) {\n    let allCheques = await readData(chequesFilePath);\n    const chequeIndex = allCheques.findIndex(c => c.id === chequeId);\n    if (chequeIndex === -1) return { success: false, error: 'Cheque not found.' };\n    allCheques[chequeIndex] = { ...allCheques[chequeIndex], status: 'Returned', returnDate, returnReason: reason };\n    await writeCheques(allCheques);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n\nexport async function withdrawCheques(chequeIds: string[]) {\n    if (!chequeIds || chequeIds.length === 0) return { success: false, error: 'No cheques selected.' };\n    let allCheques = await readData(chequesFilePath);\n    allCheques = allCheques.map(cheque => chequeIds.includes(cheque.id) ? { ...cheque, status: 'Withdrawn' } : cheque);\n    await writeCheques(allCheques);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n\nexport async function getChequeBooks() {\n    return await readData(chequeBooksFilePath);\n}\n\nexport async function getChequeLeaves(filters: { bank?: string; bookNo?: string; status?: string } = {}): Promise<ChequeLeaf[]> {\n    const books = await getChequeBooks();\n    const cheques = await getCheques();\n    let leaves: ChequeLeaf[] = [];\n\n    for (const book of books) {\n        for (let i = book.chequeStartNo; i <= book.chequeEndNo; i++) {\n            const chequeNo = i.toString().padStart(6, '0');\n            const usedCheque = cheques.find(c => c.chequeNo === chequeNo && c.bookNo === book.bookNo);\n            leaves.push({\n                id: `${book.id}-${chequeNo}`,\n                chequeNo: chequeNo,\n                bookNo: book.bookNo,\n                bankName: book.bankName,\n                status: usedCheque ? 'Used' : 'Unused',\n                partyName: usedCheque?.partyName,\n                date: usedCheque?.date,\n                amount: usedCheque?.amount\n            });\n        }\n    }\n\n    if (filters.bank) {\n        leaves = leaves.filter(leaf => leaf.bankName === filters.bank);\n    }\n    if (filters.bookNo) {\n        leaves = leaves.filter(leaf => leaf.bookNo === filters.bookNo);\n    }\n    if (filters.status) {\n        leaves = leaves.filter(leaf => leaf.status === filters.status);\n    }\n\n    return leaves;\n}\n\nexport async function addChequeBook(data: Omit<ChequeBook, 'id' | 'leafsUsed'>) {\n    const validation = chequeBookSchema.omit({ id: true, leafsUsed: true }).safeParse(data);\n    if (!validation.success) {\n        return { success: false, error: 'Invalid data format.' };\n    }\n    \n    const allBooks = await getChequeBooks();\n    const newBook: ChequeBook = {\n        ...validation.data,\n        id: `CB-${Date.now()}`,\n        leafsUsed: 0,\n    };\n\n    if (allBooks.some(book => book.bookNo === newBook.bookNo)) {\n        return { success: false, error: 'A cheque book with this book number already exists.' };\n    }\n\n    allBooks.push(newBook);\n    \n    await writeChequeBooks(allBooks);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n\nexport async function updateChequeBook(data: Omit<ChequeBook, 'leafsUsed'>) {\n    const validation = chequeBookSchema.omit({ leafsUsed: true }).safeParse(data);\n    if (!validation.success) {\n        return { success: false, error: 'Invalid data format.' };\n    }\n\n    const allBooks = await getChequeBooks();\n    const bookIndex = allBooks.findIndex(b => b.id === data.id);\n    if (bookIndex === -1) {\n        return { success: false, error: 'Cheque book not found.' };\n    }\n\n    if (allBooks.some(book => book.bookNo === data.bookNo && book.id !== data.id)) {\n        return { success: false, error: 'A cheque book with this book number already exists.' };\n    }\n    \n    const currentBook = allBooks[bookIndex];\n    allBooks[bookIndex] = {\n      ...currentBook,\n      ...validation.data,\n      id: currentBook.id,\n    };\n    \n    await writeChequeBooks(allBooks);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n\nexport async function deleteChequeBook(id: string) {\n    const allBooks = await getChequeBooks();\n    const updatedBooks = allBooks.filter(b => b.id !== id);\n    if (allBooks.length === updatedBooks.length) {\n        return { success: false, error: 'Cheque book not found.' };\n    }\n    await writeChequeBooks(updatedBooks);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n"],"names":[],"mappings":";;;;;;;IA0EsB,eAAA,WAAA,GAAA,IAAA,kPAAA,EAAA,8CAAA,uOAAA,EAAA,KAAA,GAAA,6OAAA,EAAA","debugId":null}},
    {"offset": {"line": 2843, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/switch.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n"],"names":[],"mappings":";;;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,uBAAS,2KAAgB,MAG7B,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC,6KAAqB;QACpB,WAAW,IAAA,4HAAE,EACX,sXACA;QAED,GAAG,KAAK;QACT,KAAK;kBAEL,cAAA,6LAAC,8KAAsB;YACrB,WAAW,IAAA,4HAAE,EACX;;;;;;;;;;;;;AAKR,OAAO,WAAW,GAAG,6KAAqB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 2888, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/finance/cheque-management/return-cheque-dialog.tsx"],"sourcesContent":["\n'use client';\n\nimport { useState, useMemo, useEffect } from 'react';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n  DialogFooter,\n  DialogClose,\n} from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { useToast } from '@/hooks/use-toast';\nimport { Loader2, CornerUpLeft } from 'lucide-react';\nimport { returnCheque } from './actions';\nimport { getBankAccounts } from '@/app/finance/banking/actions';\nimport { format } from 'date-fns';\nimport { type Cheque } from './schema';\nimport { useCurrency } from '@/context/currency-context';\nimport { Switch } from '@/components/ui/switch';\nimport { Label } from '@/components/ui/label';\nimport { type BankAccount } from '../banking/schema';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { type UserRole } from '@/app/admin/user-roles/schema';\n\ninterface ReturnChequeDialogProps {\n    cheques: Cheque[];\n    onReturn: () => void;\n}\n\nexport function ReturnChequeDialog({ cheques, onReturn }: ReturnChequeDialogProps) {\n    const [isOpen, setIsOpen] = useState(false);\n    const [isSaving, setIsSaving] = useState(false);\n    const { toast } = useToast();\n    const [selectedChequeIds, setSelectedChequeIds] = useState<string[]>([]);\n    const [returnWithCash, setReturnWithCash] = useState(false);\n    const [paymentFrom, setPaymentFrom] = useState<'Petty Cash' | 'Bank'>('Petty Cash');\n    const [bankAccountId, setBankAccountId] = useState<string | undefined>();\n    const [bankAccounts, setBankAccounts] = useState<BankAccount[]>([]);\n    const [currentUser, setCurrentUser] = useState<{ email: string, name: string, role: UserRole['role'] } | null>(null);\n\n    const { formatCurrency } = useCurrency();\n    \n    const selectedTotal = useMemo(() => {\n        return cheques\n            .filter(c => selectedChequeIds.includes(c.id))\n            .reduce((sum, c) => sum + c.amount, 0);\n    }, [selectedChequeIds, cheques]);\n    \n     useEffect(() => {\n        const storedProfile = sessionStorage.getItem('userProfile');\n        if (storedProfile) {\n            setCurrentUser(JSON.parse(storedProfile));\n        }\n        if(isOpen) {\n            getBankAccounts().then(setBankAccounts);\n        }\n    }, [isOpen]);\n\n    const handleSelectAll = (checked: boolean) => {\n        if (checked) {\n            setSelectedChequeIds(cheques.map(c => c.id));\n        } else {\n            setSelectedChequeIds([]);\n        }\n    }\n\n    const handleSelectRow = (chequeId: string) => {\n        setSelectedChequeIds(prev =>\n            prev.includes(chequeId)\n                ? prev.filter(id => id !== chequeId)\n                : [...prev, chequeId]\n        );\n    }\n    \n    const handleSubmit = async () => {\n        if (selectedChequeIds.length === 0) {\n            toast({ variant: 'destructive', title: 'No cheques selected', description: 'Please select at least one cheque to return.' });\n            return;\n        }\n        if (returnWithCash && paymentFrom === 'Bank' && !bankAccountId) {\n            toast({ variant: 'destructive', title: 'Bank Account Required', description: 'Please select a bank account for the cash payment.' });\n            return;\n        }\n         if (!currentUser) {\n            toast({ variant: 'destructive', title: 'User not found', description: 'Could not identify current user.' });\n            return;\n        }\n        \n        setIsSaving(true);\n        const result = await returnCheque({\n            chequeIds: selectedChequeIds,\n            returnWithCash,\n            paymentDetails: {\n                paymentFrom,\n                bankAccountId,\n                user: currentUser\n            }\n        });\n\n        if (result.success) {\n            toast({ title: 'Cheques Returned', description: `${result.count} cheques have been processed.` });\n            onReturn();\n            setIsOpen(false);\n            setSelectedChequeIds([]);\n            setReturnWithCash(false);\n        } else {\n            toast({ variant: 'destructive', title: 'Error', description: result.error });\n        }\n        setIsSaving(false);\n    }\n\n    return (\n        <Dialog open={isOpen} onOpenChange={setIsOpen}>\n            <DialogTrigger asChild>\n                <Button variant=\"outline\">\n                    <CornerUpLeft className=\"mr-2 h-4 w-4\" /> - Return Cheque\n                </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-3xl\">\n                <DialogHeader>\n                    <DialogTitle>Return Cheque</DialogTitle>\n                    <DialogDescription>\n                        Select the cheques you want to mark as returned to the party.\n                    </DialogDescription>\n                </DialogHeader>\n                <div className=\"grid gap-4 py-4\">\n                     <div className=\"space-y-4 rounded-lg border p-4\">\n                        <div className=\"flex items-center space-x-2\">\n                           <Switch\n                                id=\"return-with-cash\"\n                                checked={returnWithCash}\n                                onCheckedChange={setReturnWithCash}\n                            />\n                            <Label htmlFor=\"return-with-cash\" className=\"text-base font-semibold\">\n                                Settle with Cash?\n                            </Label>\n                        </div>\n                        <p className=\"text-sm text-muted-foreground\">\n                            If you are giving cash back to the tenant/customer in exchange for the cheque, enable this option. A payment voucher will be created for approval. If disabled, the cheque will simply be marked \"Returned\".\n                        </p>\n                        {returnWithCash && (\n                             <div className=\"grid grid-cols-2 gap-4 pt-2\">\n                                <Select value={paymentFrom} onValueChange={(value: 'Petty Cash' | 'Bank') => setPaymentFrom(value)}>\n                                    <SelectTrigger><SelectValue/></SelectTrigger>\n                                    <SelectContent>\n                                        <SelectItem value=\"Petty Cash\">From Petty Cash</SelectItem>\n                                        <SelectItem value=\"Bank\">From Bank</SelectItem>\n                                    </SelectContent>\n                                </Select>\n                                {paymentFrom === 'Bank' && (\n                                     <Select value={bankAccountId} onValueChange={setBankAccountId}>\n                                        <SelectTrigger><SelectValue placeholder=\"Select Bank Account...\" /></SelectTrigger>\n                                        <SelectContent>\n                                            {bankAccounts.map(acc => (\n                                                <SelectItem key={acc.id} value={acc.id}>{acc.accountName} ({acc.bankName})</SelectItem>\n                                            ))}\n                                        </SelectContent>\n                                    </Select>\n                                )}\n                            </div>\n                        )}\n                    </div>\n                    <ScrollArea className=\"h-72 rounded-md border\">\n                        <Table>\n                             <TableHeader>\n                                <TableRow>\n                                    <TableHead className=\"w-12\">\n                                        <Checkbox \n                                            checked={selectedChequeIds.length === cheques.length && cheques.length > 0}\n                                            onCheckedChange={handleSelectAll}\n                                        />\n                                    </TableHead>\n                                    <TableHead>Cheque No</TableHead>\n                                    <TableHead>Due Date</TableHead>\n                                    <TableHead>Party Name</TableHead>\n                                    <TableHead className=\"text-right\">Amount</TableHead>\n                                </TableRow>\n                            </TableHeader>\n                            <TableBody>\n                                {cheques.map(cheque => (\n                                    <TableRow key={cheque.id}>\n                                        <TableCell>\n                                            <Checkbox\n                                                checked={selectedChequeIds.includes(cheque.id)}\n                                                onCheckedChange={() => handleSelectRow(cheque.id)}\n                                            />\n                                        </TableCell>\n                                        <TableCell>{cheque.chequeNo}</TableCell>\n                                        <TableCell>{format(new Date(cheque.chequeDate), 'PP')}</TableCell>\n                                        <TableCell>{cheque.partyName}</TableCell>\n                                        <TableCell className=\"text-right\">{formatCurrency(cheque.amount)}</TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </ScrollArea>\n                    <div className=\"flex justify-end font-bold\">\n                        Total Selected: {formatCurrency(selectedTotal)}\n                    </div>\n                </div>\n                <DialogFooter>\n                    <DialogClose asChild>\n                        <Button variant=\"outline\">Cancel</Button>\n                    </DialogClose>\n                     <Button onClick={handleSubmit} disabled={isSaving}>\n                        {isSaving && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                        Confirm Return\n                    </Button>\n                </DialogFooter>\n            </DialogContent>\n        </Dialog>\n    )\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3444, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/finance/cheque-management/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { z } from 'zod';\nimport { revalidatePath } from 'next/cache';\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { Cheque, chequeSchema, ChequeBook, chequeBookSchema, ChequeLeaf } from './schema';\n\nconst chequesFilePath = path.join(process.cwd(), 'src/data/cheques-data.json');\nconst chequeBooksFilePath = path.join(process.cwd(), 'src/data/cheque-books-data.json');\n\nasync function readData(filePath: string) {\n    try {\n        await fs.access(filePath);\n        const data = await fs.readFile(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            return [];\n        }\n        throw error;\n    }\n}\n\nasync function writeCheques(data: Cheque[]) {\n    await fs.writeFile(chequesFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\nasync function writeChequeBooks(data: ChequeBook[]) {\n    await fs.writeFile(chequeBooksFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\nexport async function getCheques(filters: { party?: string; status?: string } = {}) {\n    let cheques = await readData(chequesFilePath);\n    if (filters.party) {\n        cheques = cheques.filter(cheque => cheque.partyName.toLowerCase().includes(filters.party!.toLowerCase()));\n    }\n    if (filters.status) {\n        cheques = cheques.filter(cheque => cheque.status === filters.status);\n    }\n    return cheques;\n}\n\nexport async function addCheque(data: Omit<Cheque, 'id' | 'status'>) {\n    const validation = chequeSchema.omit({ id: true, status: true }).safeParse(data);\n    if (!validation.success) {\n        return { success: false, error: 'Invalid data format.' };\n    }\n    const allCheques = await readData(chequesFilePath);\n    const newCheque: Cheque = {\n        ...validation.data,\n        id: `CHQ-${Date.now()}`,\n        status: 'In Hand',\n    };\n    allCheques.push(newCheque);\n    await writeCheques(allCheques);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n\nexport async function depositCheques(chequeIds: string[], depositDate: string, bankAccountId: string) {\n    if (!chequeIds || chequeIds.length === 0) return { success: false, error: 'No cheques selected.' };\n    let allCheques = await readData(chequesFilePath);\n    allCheques = allCheques.map(cheque => \n        chequeIds.includes(cheque.id) \n            ? { ...cheque, status: 'Deposited', depositDate, bankAccountId } \n            : cheque\n    );\n    await writeCheques(allCheques);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n\nexport async function returnCheque(chequeId: string, returnDate: string, reason: string) {\n    let allCheques = await readData(chequesFilePath);\n    const chequeIndex = allCheques.findIndex(c => c.id === chequeId);\n    if (chequeIndex === -1) return { success: false, error: 'Cheque not found.' };\n    allCheques[chequeIndex] = { ...allCheques[chequeIndex], status: 'Returned', returnDate, returnReason: reason };\n    await writeCheques(allCheques);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n\nexport async function withdrawCheques(chequeIds: string[]) {\n    if (!chequeIds || chequeIds.length === 0) return { success: false, error: 'No cheques selected.' };\n    let allCheques = await readData(chequesFilePath);\n    allCheques = allCheques.map(cheque => chequeIds.includes(cheque.id) ? { ...cheque, status: 'Withdrawn' } : cheque);\n    await writeCheques(allCheques);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n\nexport async function getChequeBooks() {\n    return await readData(chequeBooksFilePath);\n}\n\nexport async function getChequeLeaves(filters: { bank?: string; bookNo?: string; status?: string } = {}): Promise<ChequeLeaf[]> {\n    const books = await getChequeBooks();\n    const cheques = await getCheques();\n    let leaves: ChequeLeaf[] = [];\n\n    for (const book of books) {\n        for (let i = book.chequeStartNo; i <= book.chequeEndNo; i++) {\n            const chequeNo = i.toString().padStart(6, '0');\n            const usedCheque = cheques.find(c => c.chequeNo === chequeNo && c.bookNo === book.bookNo);\n            leaves.push({\n                id: `${book.id}-${chequeNo}`,\n                chequeNo: chequeNo,\n                bookNo: book.bookNo,\n                bankName: book.bankName,\n                status: usedCheque ? 'Used' : 'Unused',\n                partyName: usedCheque?.partyName,\n                date: usedCheque?.date,\n                amount: usedCheque?.amount\n            });\n        }\n    }\n\n    if (filters.bank) {\n        leaves = leaves.filter(leaf => leaf.bankName === filters.bank);\n    }\n    if (filters.bookNo) {\n        leaves = leaves.filter(leaf => leaf.bookNo === filters.bookNo);\n    }\n    if (filters.status) {\n        leaves = leaves.filter(leaf => leaf.status === filters.status);\n    }\n\n    return leaves;\n}\n\nexport async function addChequeBook(data: Omit<ChequeBook, 'id' | 'leafsUsed'>) {\n    const validation = chequeBookSchema.omit({ id: true, leafsUsed: true }).safeParse(data);\n    if (!validation.success) {\n        return { success: false, error: 'Invalid data format.' };\n    }\n    \n    const allBooks = await getChequeBooks();\n    const newBook: ChequeBook = {\n        ...validation.data,\n        id: `CB-${Date.now()}`,\n        leafsUsed: 0,\n    };\n\n    if (allBooks.some(book => book.bookNo === newBook.bookNo)) {\n        return { success: false, error: 'A cheque book with this book number already exists.' };\n    }\n\n    allBooks.push(newBook);\n    \n    await writeChequeBooks(allBooks);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n\nexport async function updateChequeBook(data: Omit<ChequeBook, 'leafsUsed'>) {\n    const validation = chequeBookSchema.omit({ leafsUsed: true }).safeParse(data);\n    if (!validation.success) {\n        return { success: false, error: 'Invalid data format.' };\n    }\n\n    const allBooks = await getChequeBooks();\n    const bookIndex = allBooks.findIndex(b => b.id === data.id);\n    if (bookIndex === -1) {\n        return { success: false, error: 'Cheque book not found.' };\n    }\n\n    if (allBooks.some(book => book.bookNo === data.bookNo && book.id !== data.id)) {\n        return { success: false, error: 'A cheque book with this book number already exists.' };\n    }\n    \n    const currentBook = allBooks[bookIndex];\n    allBooks[bookIndex] = {\n      ...currentBook,\n      ...validation.data,\n      id: currentBook.id,\n    };\n    \n    await writeChequeBooks(allBooks);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n\nexport async function deleteChequeBook(id: string) {\n    const allBooks = await getChequeBooks();\n    const updatedBooks = allBooks.filter(b => b.id !== id);\n    if (allBooks.length === updatedBooks.length) {\n        return { success: false, error: 'Cheque book not found.' };\n    }\n    await writeChequeBooks(updatedBooks);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n"],"names":[],"mappings":";;;;;;;IAoFsB,kBAAA,WAAA,GAAA,IAAA,kPAAA,EAAA,8CAAA,uOAAA,EAAA,KAAA,GAAA,6OAAA,EAAA","debugId":null}},
    {"offset": {"line": 3459, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/finance/cheque-management/withdraw-cheques-dialog.tsx"],"sourcesContent":["\n'use client';\n\nimport { useState } from 'react';\nimport { z } from 'zod';\nimport { useForm, Controller } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter, DialogClose } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Label } from '@/components/ui/label';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { useToast } from '@/hooks/use-toast';\nimport { Loader2 } from 'lucide-react';\nimport { withdrawCheques } from './actions';\nimport { type Cheque } from './schema';\n\nconst withdrawSchema = z.object({\n    chequeIds: z.array(z.string()).min(1, 'Please select at least one cheque to withdraw.'),\n});\n\ntype WithdrawFormData = z.infer<typeof withdrawSchema>;\n\ninterface WithdrawChequesDialogProps {\n    isOpen: boolean;\n    onClose: () => void;\n    onSuccess: () => void;\n    cheques: Cheque[];\n}\n\nexport function WithdrawChequesDialog({ isOpen, onClose, onSuccess, cheques }: WithdrawChequesDialogProps) {\n    const { toast } = useToast();\n    const {\n        control,\n        handleSubmit,\n        reset,\n        formState: { errors, isSubmitting },\n    } = useForm<WithdrawFormData>({\n        resolver: zodResolver(withdrawSchema),\n        defaultValues: { chequeIds: [] },\n    });\n\n    const onSubmit = async (data: WithdrawFormData) => {\n        const result = await withdrawCheques(data.chequeIds);\n        if (result.success) {\n            toast({ title: 'Success', description: 'Selected cheques have been withdrawn.' });\n            onSuccess();\n            onClose();\n        } else {\n            toast({ variant: 'destructive', title: 'Error', description: result.error });\n        }\n    };\n\n    return (\n        <Dialog open={isOpen} onOpenChange={(open) => !open && onClose()}>\n            <DialogContent>\n                <form onSubmit={handleSubmit(onSubmit)}>\n                    <DialogHeader>\n                        <DialogTitle>Withdraw Cheques</DialogTitle>\n                        <DialogDescription>Select cheques to mark as withdrawn. This is for internal bookkeeping and does not affect bank records.</DialogDescription>\n                    </DialogHeader>\n                    <div className=\"py-4\">\n                        <Controller\n                            name=\"chequeIds\"\n                            control={control}\n                            render={({ field }) => (\n                                <ScrollArea className=\"h-64\">\n                                    <div className=\"space-y-2\">\n                                        {cheques.map((cheque) => (\n                                            <div key={cheque.id} className=\"flex items-center space-x-2\">\n                                                <Checkbox\n                                                    id={cheque.id}\n                                                    checked={field.value.includes(cheque.id)}\n                                                    onCheckedChange={(checked) => {\n                                                        const newValue = checked\n                                                            ? [...field.value, cheque.id]\n                                                            : field.value.filter((id) => id !== cheque.id);\n                                                        field.onChange(newValue);\n                                                    }}\n                                                />\n                                                <Label htmlFor={cheque.id} className=\"flex justify-between w-full\">\n                                                    <span>{cheque.chequeNo} - {cheque.partyName}</span>\n                                                    <span>{cheque.amount}</span>\n                                                </Label>\n                                            </div>\n                                        ))}\n                                    </div>\n                                </ScrollArea>\n                            )}\n                        />\n                        {errors.chequeIds && <p className=\"text-destructive text-sm mt-2\">{errors.chequeIds.message}</p>}\n                    </div>\n                    <DialogFooter>\n                        <DialogClose asChild><Button type=\"button\" variant=\"outline\">Cancel</Button></DialogClose>\n                        <Button type=\"submit\" disabled={isSubmitting}>\n                            {isSubmitting && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                            Withdraw\n                        </Button>\n                    </DialogFooter>\n                </form>\n            </DialogContent>\n        </Dialog>\n    );\n}\n"],"names":[],"mappings":";;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAbA;;;;;;;;;;;;AAgBA,MAAM,iBAAiB,0KAAC,CAAC,MAAM,CAAC;IAC5B,WAAW,0KAAC,CAAC,KAAK,CAAC,0KAAC,CAAC,MAAM,IAAI,GAAG,CAAC,GAAG;AAC1C;AAWO,SAAS,sBAAsB,KAAmE;QAAnE,EAAE,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,EAA8B,GAAnE;;IAClC,MAAM,EAAE,KAAK,EAAE,GAAG,IAAA,2IAAQ;IAC1B,MAAM,EACF,OAAO,EACP,YAAY,EACZ,KAAK,EACL,WAAW,EAAE,MAAM,EAAE,YAAY,EAAE,EACtC,GAAG,IAAA,4KAAO,EAAmB;QAC1B,UAAU,IAAA,gLAAW,EAAC;QACtB,eAAe;YAAE,WAAW,EAAE;QAAC;IACnC;IAEA,MAAM,WAAW,OAAO;QACpB,MAAM,SAAS,MAAM,IAAA,2MAAe,EAAC,KAAK,SAAS;QACnD,IAAI,OAAO,OAAO,EAAE;YAChB,MAAM;gBAAE,OAAO;gBAAW,aAAa;YAAwC;YAC/E;YACA;QACJ,OAAO;YACH,MAAM;gBAAE,SAAS;gBAAe,OAAO;gBAAS,aAAa,OAAO,KAAK;YAAC;QAC9E;IACJ;IAEA,qBACI,6LAAC,+IAAM;QAAC,MAAM;QAAQ,cAAc,CAAC,OAAS,CAAC,QAAQ;kBACnD,cAAA,6LAAC,sJAAa;sBACV,cAAA,6LAAC;gBAAK,UAAU,aAAa;;kCACzB,6LAAC,qJAAY;;0CACT,6LAAC,oJAAW;0CAAC;;;;;;0CACb,6LAAC,0JAAiB;0CAAC;;;;;;;;;;;;kCAEvB,6LAAC;wBAAI,WAAU;;0CACX,6LAAC,+KAAU;gCACP,MAAK;gCACL,SAAS;gCACT,QAAQ;wCAAC,EAAE,KAAK,EAAE;yDACd,6LAAC,2JAAU;wCAAC,WAAU;kDAClB,cAAA,6LAAC;4CAAI,WAAU;sDACV,QAAQ,GAAG,CAAC,CAAC,uBACV,6LAAC;oDAAoB,WAAU;;sEAC3B,6LAAC,mJAAQ;4DACL,IAAI,OAAO,EAAE;4DACb,SAAS,MAAM,KAAK,CAAC,QAAQ,CAAC,OAAO,EAAE;4DACvC,iBAAiB,CAAC;gEACd,MAAM,WAAW,UACX;uEAAI,MAAM,KAAK;oEAAE,OAAO,EAAE;iEAAC,GAC3B,MAAM,KAAK,CAAC,MAAM,CAAC,CAAC,KAAO,OAAO,OAAO,EAAE;gEACjD,MAAM,QAAQ,CAAC;4DACnB;;;;;;sEAEJ,6LAAC,6IAAK;4DAAC,SAAS,OAAO,EAAE;4DAAE,WAAU;;8EACjC,6LAAC;;wEAAM,OAAO,QAAQ;wEAAC;wEAAI,OAAO,SAAS;;;;;;;8EAC3C,6LAAC;8EAAM,OAAO,MAAM;;;;;;;;;;;;;mDAblB,OAAO,EAAE;;;;;;;;;;;;;;;;;;;;;4BAqBtC,OAAO,SAAS,kBAAI,6LAAC;gCAAE,WAAU;0CAAiC,OAAO,SAAS,CAAC,OAAO;;;;;;;;;;;;kCAE/F,6LAAC,qJAAY;;0CACT,6LAAC,oJAAW;gCAAC,OAAO;0CAAC,cAAA,6LAAC,+IAAM;oCAAC,MAAK;oCAAS,SAAQ;8CAAU;;;;;;;;;;;0CAC7D,6LAAC,+IAAM;gCAAC,MAAK;gCAAS,UAAU;;oCAC3B,8BAAgB,6LAAC,+NAAO;wCAAC,WAAU;;;;;;oCAA+B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQ/F;GAzEgB;;QACM,2IAAQ;QAMtB,4KAAO;;;KAPC","debugId":null}},
    {"offset": {"line": 3717, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/finance/cheque-management/cheque-management-tab.tsx"],"sourcesContent":["\n'use client';\n\nimport { useState, useEffect } from 'react';\nimport { ChequeManagementClient } from './cheque-management-client';\nimport { getCheques } from './actions';\nimport { type Cheque } from './schema';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { FileText, File, Plus, Minus, RefreshCw, ArrowRightLeft } from 'lucide-react';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { AddChequeDialog } from './add-cheque-dialog';\nimport { DepositChequesDialog } from './deposit-cheques-dialog';\nimport { ReturnChequeDialog } from './return-cheque-dialog';\nimport { WithdrawChequesDialog } from './withdraw-cheques-dialog';\nimport { cn } from '@/lib/utils';\n\ninterface ChequeManagementTabProps {\n    key: number;\n    onSuccess: () => void;\n}\n\nexport function ChequeManagementTab({ onSuccess }: ChequeManagementTabProps) {\n    const [initialCheques, setInitialCheques] = useState<Cheque[]>([]);\n    const [isLoading, setIsLoading] = useState(true);\n    const [isAddChequeDialogOpen, setIsAddChequeDialogOpen] = useState(false);\n    const [isDepositChequesDialogOpen, setIsDepositChequesDialogOpen] = useState(false);\n    const [isReturnChequeDialogOpen, setIsReturnChequeDialogOpen] = useState(false);\n    const [isWithdrawChequesDialogOpen, setIsWithdrawChequesDialogOpen] = useState(false);\n\n    const fetchData = async (filters: { party?: string; status?: string } = {}) => {\n        setIsLoading(true);\n        const cheques = await getCheques(filters);\n        setInitialCheques(cheques);\n        setIsLoading(false);\n    };\n\n    useEffect(() => {\n        fetchData();\n    }, []);\n\n    const handleFilterChange = (filters: { party?: string; status?: string }) => {\n        fetchData(filters);\n    };\n\n    const handleSuccess = () => {\n        fetchData();\n        onSuccess();\n    };\n\n    return (\n        <div>\n            <div className=\"flex justify-between items-center mb-4\">\n                <div>\n                    <h1 className=\"text-2xl font-bold\">Cheque Management</h1>\n                    <p className=\"text-muted-foreground\">Track and manage all post-dated cheques from tenants and to landlords.</p>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                    <Button variant=\"outline\"><FileText className=\"mr-2 h-4 w-4\" /> Export PDF</Button>\n                    <Button variant=\"outline\"><File className=\"mr-2 h-4 w-4\" /> Export Excel</Button>\n                    <Button variant=\"outline\" onClick={() => setIsWithdrawChequesDialogOpen(true)}><Minus className=\"mr-2 h-4 w-4\" /> Withdrawal</Button>\n                    <Button variant=\"outline\" onClick={() => setIsDepositChequesDialogOpen(true)}><Plus className=\"mr-2 h-4 w-4\" /> Deposit</Button>\n                    <Button variant=\"outline\" onClick={() => setIsReturnChequeDialogOpen(true)}><ArrowRightLeft className=\"mr-2 h-4 w-4\" /> Return Cheque</Button>\n                    <Button onClick={() => setIsAddChequeDialogOpen(true)}><Plus className=\"mr-2 h-4 w-4\" /> Cheque</Button>\n                    <Button variant=\"ghost\" onClick={() => fetchData()} disabled={isLoading}>\n                        <RefreshCw className={cn(\"h-4 w-4\", isLoading && \"animate-spin\")} />\n                    </Button>\n                </div>\n            </div>\n\n            <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-5 mb-4\">\n                <Card>\n                    <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                        <CardTitle className=\"text-sm font-medium\">In Hand Cheques</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                        <div className=\"text-2xl font-bold\">AED 0.00</div>\n                        <p className=\"text-xs text-muted-foreground\">0 cheques pending deposit</p>\n                    </CardContent>\n                </Card>\n                 <Card>\n                    <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                        <CardTitle className=\"text-sm font-medium\">Due This Week</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                        <div className=\"text-2xl font-bold\">AED 0.00</div>\n                        <p className=\"text-xs text-muted-foreground\">0 cheques to be deposited</p>\n                    </CardContent>\n                </Card>\n                <Card className=\"border-red-500\">\n                    <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                        <CardTitle className=\"text-sm font-medium\">Overdue Cheques</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                        <div className=\"text-2xl font-bold text-red-500\">AED 0.00</div>\n                        <p className=\"text-xs text-muted-foreground\">0 cheques require immediate attention</p>\n                    </CardContent>\n                </Card>\n                <Card>\n                    <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                        <CardTitle className=\"text-sm font-medium\">Deposited Cheques</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                        <div className=\"text-2xl font-bold\">AED 0.00</div>\n                        <p className=\"text-xs text-muted-foreground\">0 cheques awaiting clearance</p>\n                    </CardContent>\n                </Card>\n                <Card>\n                    <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                        <CardTitle className=\"text-sm font-medium\">Cleared Cheques (Month)</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                        <div className=\"text-2xl font-bold\">AED 0.00</div>\n                        <p className=\"text-xs text-muted-foreground\">0 cheques cleared</p>\n                    </CardContent>\n                </Card>\n            </div>\n\n            <div className=\"flex space-x-4 mb-4\">\n                <Input placeholder=\"Filter by Party Name...\" className=\"w-[200px]\" onChange={e => handleFilterChange({ party: e.target.value })} />\n                <Select onValueChange={value => handleFilterChange({ status: value })}>\n                    <SelectTrigger className=\"w-[200px]\">\n                        <SelectValue placeholder=\"Filter by status\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                        <SelectItem value=\"In Hand\">In Hand</SelectItem>\n                        <SelectItem value=\"Deposited\">Deposited</SelectItem>\n                        <SelectItem value=\"Cleared\">Cleared</SelectItem>\n                        <SelectItem value=\"Returned\">Returned</SelectItem>\n                        <SelectItem value=\"Cancelled\">Cancelled</SelectItem>\n                    </SelectContent>\n                </Select>\n            </div>\n\n            <ChequeManagementClient initialCheques={initialCheques} isLoading={isLoading} />\n\n            <AddChequeDialog \n                isOpen={isAddChequeDialogOpen} \n                onClose={() => setIsAddChequeDialogOpen(false)} \n                onSuccess={handleSuccess} \n            />\n\n            <DepositChequesDialog \n                isOpen={isDepositChequesDialogOpen} \n                onClose={() => setIsDepositChequesDialogOpen(false)} \n                onSuccess={handleSuccess} \n                cheques={initialCheques.filter(c => c.status === 'In Hand')} \n            />\n\n            <ReturnChequeDialog \n                isOpen={isReturnChequeDialogOpen} \n                onClose={() => setIsReturnChequeDialogOpen(false)} \n                onSuccess={handleSuccess} \n                cheques={initialCheques.filter(c => c.status === 'Deposited')} \n            />\n\n            <WithdrawChequesDialog\n                isOpen={isWithdrawChequesDialogOpen}\n                onClose={() => setIsWithdrawChequesDialogOpen(false)}\n                onSuccess={handleSuccess}\n                cheques={initialCheques.filter(c => c.status === 'In Hand')}\n            />\n        </div>\n    );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 4352, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/finance/cheque-management/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { z } from 'zod';\nimport { revalidatePath } from 'next/cache';\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { Cheque, chequeSchema, ChequeBook, chequeBookSchema, ChequeLeaf } from './schema';\n\nconst chequesFilePath = path.join(process.cwd(), 'src/data/cheques-data.json');\nconst chequeBooksFilePath = path.join(process.cwd(), 'src/data/cheque-books-data.json');\n\nasync function readData(filePath: string) {\n    try {\n        await fs.access(filePath);\n        const data = await fs.readFile(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            return [];\n        }\n        throw error;\n    }\n}\n\nasync function writeCheques(data: Cheque[]) {\n    await fs.writeFile(chequesFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\nasync function writeChequeBooks(data: ChequeBook[]) {\n    await fs.writeFile(chequeBooksFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\nexport async function getCheques(filters: { party?: string; status?: string } = {}) {\n    let cheques = await readData(chequesFilePath);\n    if (filters.party) {\n        cheques = cheques.filter(cheque => cheque.partyName.toLowerCase().includes(filters.party!.toLowerCase()));\n    }\n    if (filters.status) {\n        cheques = cheques.filter(cheque => cheque.status === filters.status);\n    }\n    return cheques;\n}\n\nexport async function addCheque(data: Omit<Cheque, 'id' | 'status'>) {\n    const validation = chequeSchema.omit({ id: true, status: true }).safeParse(data);\n    if (!validation.success) {\n        return { success: false, error: 'Invalid data format.' };\n    }\n    const allCheques = await readData(chequesFilePath);\n    const newCheque: Cheque = {\n        ...validation.data,\n        id: `CHQ-${Date.now()}`,\n        status: 'In Hand',\n    };\n    allCheques.push(newCheque);\n    await writeCheques(allCheques);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n\nexport async function depositCheques(chequeIds: string[], depositDate: string, bankAccountId: string) {\n    if (!chequeIds || chequeIds.length === 0) return { success: false, error: 'No cheques selected.' };\n    let allCheques = await readData(chequesFilePath);\n    allCheques = allCheques.map(cheque => \n        chequeIds.includes(cheque.id) \n            ? { ...cheque, status: 'Deposited', depositDate, bankAccountId } \n            : cheque\n    );\n    await writeCheques(allCheques);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n\nexport async function returnCheque(chequeId: string, returnDate: string, reason: string) {\n    let allCheques = await readData(chequesFilePath);\n    const chequeIndex = allCheques.findIndex(c => c.id === chequeId);\n    if (chequeIndex === -1) return { success: false, error: 'Cheque not found.' };\n    allCheques[chequeIndex] = { ...allCheques[chequeIndex], status: 'Returned', returnDate, returnReason: reason };\n    await writeCheques(allCheques);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n\nexport async function withdrawCheques(chequeIds: string[]) {\n    if (!chequeIds || chequeIds.length === 0) return { success: false, error: 'No cheques selected.' };\n    let allCheques = await readData(chequesFilePath);\n    allCheques = allCheques.map(cheque => chequeIds.includes(cheque.id) ? { ...cheque, status: 'Withdrawn' } : cheque);\n    await writeCheques(allCheques);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n\nexport async function getChequeBooks() {\n    return await readData(chequeBooksFilePath);\n}\n\nexport async function getChequeLeaves(filters: { bank?: string; bookNo?: string; status?: string } = {}): Promise<ChequeLeaf[]> {\n    const books = await getChequeBooks();\n    const cheques = await getCheques();\n    let leaves: ChequeLeaf[] = [];\n\n    for (const book of books) {\n        for (let i = book.chequeStartNo; i <= book.chequeEndNo; i++) {\n            const chequeNo = i.toString().padStart(6, '0');\n            const usedCheque = cheques.find(c => c.chequeNo === chequeNo && c.bookNo === book.bookNo);\n            leaves.push({\n                id: `${book.id}-${chequeNo}`,\n                chequeNo: chequeNo,\n                bookNo: book.bookNo,\n                bankName: book.bankName,\n                status: usedCheque ? 'Used' : 'Unused',\n                partyName: usedCheque?.partyName,\n                date: usedCheque?.date,\n                amount: usedCheque?.amount\n            });\n        }\n    }\n\n    if (filters.bank) {\n        leaves = leaves.filter(leaf => leaf.bankName === filters.bank);\n    }\n    if (filters.bookNo) {\n        leaves = leaves.filter(leaf => leaf.bookNo === filters.bookNo);\n    }\n    if (filters.status) {\n        leaves = leaves.filter(leaf => leaf.status === filters.status);\n    }\n\n    return leaves;\n}\n\nexport async function addChequeBook(data: Omit<ChequeBook, 'id' | 'leafsUsed'>) {\n    const validation = chequeBookSchema.omit({ id: true, leafsUsed: true }).safeParse(data);\n    if (!validation.success) {\n        return { success: false, error: 'Invalid data format.' };\n    }\n    \n    const allBooks = await getChequeBooks();\n    const newBook: ChequeBook = {\n        ...validation.data,\n        id: `CB-${Date.now()}`,\n        leafsUsed: 0,\n    };\n\n    if (allBooks.some(book => book.bookNo === newBook.bookNo)) {\n        return { success: false, error: 'A cheque book with this book number already exists.' };\n    }\n\n    allBooks.push(newBook);\n    \n    await writeChequeBooks(allBooks);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n\nexport async function updateChequeBook(data: Omit<ChequeBook, 'leafsUsed'>) {\n    const validation = chequeBookSchema.omit({ leafsUsed: true }).safeParse(data);\n    if (!validation.success) {\n        return { success: false, error: 'Invalid data format.' };\n    }\n\n    const allBooks = await getChequeBooks();\n    const bookIndex = allBooks.findIndex(b => b.id === data.id);\n    if (bookIndex === -1) {\n        return { success: false, error: 'Cheque book not found.' };\n    }\n\n    if (allBooks.some(book => book.bookNo === data.bookNo && book.id !== data.id)) {\n        return { success: false, error: 'A cheque book with this book number already exists.' };\n    }\n    \n    const currentBook = allBooks[bookIndex];\n    allBooks[bookIndex] = {\n      ...currentBook,\n      ...validation.data,\n      id: currentBook.id,\n    };\n    \n    await writeChequeBooks(allBooks);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n\nexport async function deleteChequeBook(id: string) {\n    const allBooks = await getChequeBooks();\n    const updatedBooks = allBooks.filter(b => b.id !== id);\n    if (allBooks.length === updatedBooks.length) {\n        return { success: false, error: 'Cheque book not found.' };\n    }\n    await writeChequeBooks(updatedBooks);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n"],"names":[],"mappings":";;;;;;;IA6FsB,iBAAA,WAAA,GAAA,IAAA,kPAAA,EAAA,8CAAA,uOAAA,EAAA,KAAA,GAAA,6OAAA,EAAA","debugId":null}},
    {"offset": {"line": 4367, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/badge.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n"],"names":[],"mappings":";;;;;;;AACA;AAEA;;;;AAEA,MAAM,gBAAgB,IAAA,0KAAG,EACvB,0KACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,WACE;YACF,aACE;YACF,SAAS;QACX;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAOF,SAAS,MAAM,KAA4C;QAA5C,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAmB,GAA5C;IACb,qBACE,6LAAC;QAAI,WAAW,IAAA,4HAAE,EAAC,cAAc;YAAE;QAAQ,IAAI;QAAa,GAAG,KAAK;;;;;;AAExE;KAJS","debugId":null}},
    {"offset": {"line": 4416, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/finance/cheque-management/cheque-book-columns.tsx"],"sourcesContent":["\n'use client';\n\nimport { type ColumnDef } from '@tanstack/react-table';\nimport { type ChequeBook } from './schema';\nimport { Badge } from '@/components/ui/badge';\n\nexport const columns: ColumnDef<ChequeBook>[] = [\n    {\n        accessorKey: 'bankName',\n        header: 'Bank Name',\n    },\n    {\n        accessorKey: 'bookNo',\n        header: 'Book No',\n    },\n    {\n        accessorKey: 'chequeStartNo',\n        header: 'Start No',\n    },\n    {\n        accessorKey: 'chequeEndNo',\n        header: 'End No',\n    },\n    {\n        accessorKey: 'noOfLeafs',\n        header: 'Total Leafs',\n    },\n    {\n        accessorKey: 'leafsUsed',\n        header: 'Leafs Used',\n    },\n    {\n        accessorKey: 'status',\n        header: 'Status',\n        cell: ({ row }) => {\n            const status = row.getValue('status') as ChequeBook['status'];\n            return <Badge variant={status === 'Active' ? 'default' : 'secondary'}>{status}</Badge>;\n        },\n    },\n];\n"],"names":[],"mappings":";;;;;AAKA;AAJA;;;AAMO,MAAM,UAAmC;IAC5C;QACI,aAAa;QACb,QAAQ;IACZ;IACA;QACI,aAAa;QACb,QAAQ;IACZ;IACA;QACI,aAAa;QACb,QAAQ;IACZ;IACA;QACI,aAAa;QACb,QAAQ;IACZ;IACA;QACI,aAAa;QACb,QAAQ;IACZ;IACA;QACI,aAAa;QACb,QAAQ;IACZ;IACA;QACI,aAAa;QACb,QAAQ;QACR,MAAM;gBAAC,EAAE,GAAG,EAAE;YACV,MAAM,SAAS,IAAI,QAAQ,CAAC;YAC5B,qBAAO,6LAAC,6IAAK;gBAAC,SAAS,WAAW,WAAW,YAAY;0BAAc;;;;;;QAC3E;IACJ;CACH","debugId":null}},
    {"offset": {"line": 4474, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/form.tsx"],"sourcesContent":["\n\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 4704, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/finance/cheque-management/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { z } from 'zod';\nimport { revalidatePath } from 'next/cache';\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { Cheque, chequeSchema, ChequeBook, chequeBookSchema, ChequeLeaf } from './schema';\n\nconst chequesFilePath = path.join(process.cwd(), 'src/data/cheques-data.json');\nconst chequeBooksFilePath = path.join(process.cwd(), 'src/data/cheque-books-data.json');\n\nasync function readData(filePath: string) {\n    try {\n        await fs.access(filePath);\n        const data = await fs.readFile(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            return [];\n        }\n        throw error;\n    }\n}\n\nasync function writeCheques(data: Cheque[]) {\n    await fs.writeFile(chequesFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\nasync function writeChequeBooks(data: ChequeBook[]) {\n    await fs.writeFile(chequeBooksFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\nexport async function getCheques(filters: { party?: string; status?: string } = {}) {\n    let cheques = await readData(chequesFilePath);\n    if (filters.party) {\n        cheques = cheques.filter(cheque => cheque.partyName.toLowerCase().includes(filters.party!.toLowerCase()));\n    }\n    if (filters.status) {\n        cheques = cheques.filter(cheque => cheque.status === filters.status);\n    }\n    return cheques;\n}\n\nexport async function addCheque(data: Omit<Cheque, 'id' | 'status'>) {\n    const validation = chequeSchema.omit({ id: true, status: true }).safeParse(data);\n    if (!validation.success) {\n        return { success: false, error: 'Invalid data format.' };\n    }\n    const allCheques = await readData(chequesFilePath);\n    const newCheque: Cheque = {\n        ...validation.data,\n        id: `CHQ-${Date.now()}`,\n        status: 'In Hand',\n    };\n    allCheques.push(newCheque);\n    await writeCheques(allCheques);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n\nexport async function depositCheques(chequeIds: string[], depositDate: string, bankAccountId: string) {\n    if (!chequeIds || chequeIds.length === 0) return { success: false, error: 'No cheques selected.' };\n    let allCheques = await readData(chequesFilePath);\n    allCheques = allCheques.map(cheque => \n        chequeIds.includes(cheque.id) \n            ? { ...cheque, status: 'Deposited', depositDate, bankAccountId } \n            : cheque\n    );\n    await writeCheques(allCheques);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n\nexport async function returnCheque(chequeId: string, returnDate: string, reason: string) {\n    let allCheques = await readData(chequesFilePath);\n    const chequeIndex = allCheques.findIndex(c => c.id === chequeId);\n    if (chequeIndex === -1) return { success: false, error: 'Cheque not found.' };\n    allCheques[chequeIndex] = { ...allCheques[chequeIndex], status: 'Returned', returnDate, returnReason: reason };\n    await writeCheques(allCheques);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n\nexport async function withdrawCheques(chequeIds: string[]) {\n    if (!chequeIds || chequeIds.length === 0) return { success: false, error: 'No cheques selected.' };\n    let allCheques = await readData(chequesFilePath);\n    allCheques = allCheques.map(cheque => chequeIds.includes(cheque.id) ? { ...cheque, status: 'Withdrawn' } : cheque);\n    await writeCheques(allCheques);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n\nexport async function getChequeBooks() {\n    return await readData(chequeBooksFilePath);\n}\n\nexport async function getChequeLeaves(filters: { bank?: string; bookNo?: string; status?: string } = {}): Promise<ChequeLeaf[]> {\n    const books = await getChequeBooks();\n    const cheques = await getCheques();\n    let leaves: ChequeLeaf[] = [];\n\n    for (const book of books) {\n        for (let i = book.chequeStartNo; i <= book.chequeEndNo; i++) {\n            const chequeNo = i.toString().padStart(6, '0');\n            const usedCheque = cheques.find(c => c.chequeNo === chequeNo && c.bookNo === book.bookNo);\n            leaves.push({\n                id: `${book.id}-${chequeNo}`,\n                chequeNo: chequeNo,\n                bookNo: book.bookNo,\n                bankName: book.bankName,\n                status: usedCheque ? 'Used' : 'Unused',\n                partyName: usedCheque?.partyName,\n                date: usedCheque?.date,\n                amount: usedCheque?.amount\n            });\n        }\n    }\n\n    if (filters.bank) {\n        leaves = leaves.filter(leaf => leaf.bankName === filters.bank);\n    }\n    if (filters.bookNo) {\n        leaves = leaves.filter(leaf => leaf.bookNo === filters.bookNo);\n    }\n    if (filters.status) {\n        leaves = leaves.filter(leaf => leaf.status === filters.status);\n    }\n\n    return leaves;\n}\n\nexport async function addChequeBook(data: Omit<ChequeBook, 'id' | 'leafsUsed'>) {\n    const validation = chequeBookSchema.omit({ id: true, leafsUsed: true }).safeParse(data);\n    if (!validation.success) {\n        return { success: false, error: 'Invalid data format.' };\n    }\n    \n    const allBooks = await getChequeBooks();\n    const newBook: ChequeBook = {\n        ...validation.data,\n        id: `CB-${Date.now()}`,\n        leafsUsed: 0,\n    };\n\n    if (allBooks.some(book => book.bookNo === newBook.bookNo)) {\n        return { success: false, error: 'A cheque book with this book number already exists.' };\n    }\n\n    allBooks.push(newBook);\n    \n    await writeChequeBooks(allBooks);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n\nexport async function updateChequeBook(data: Omit<ChequeBook, 'leafsUsed'>) {\n    const validation = chequeBookSchema.omit({ leafsUsed: true }).safeParse(data);\n    if (!validation.success) {\n        return { success: false, error: 'Invalid data format.' };\n    }\n\n    const allBooks = await getChequeBooks();\n    const bookIndex = allBooks.findIndex(b => b.id === data.id);\n    if (bookIndex === -1) {\n        return { success: false, error: 'Cheque book not found.' };\n    }\n\n    if (allBooks.some(book => book.bookNo === data.bookNo && book.id !== data.id)) {\n        return { success: false, error: 'A cheque book with this book number already exists.' };\n    }\n    \n    const currentBook = allBooks[bookIndex];\n    allBooks[bookIndex] = {\n      ...currentBook,\n      ...validation.data,\n      id: currentBook.id,\n    };\n    \n    await writeChequeBooks(allBooks);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n\nexport async function deleteChequeBook(id: string) {\n    const allBooks = await getChequeBooks();\n    const updatedBooks = allBooks.filter(b => b.id !== id);\n    if (allBooks.length === updatedBooks.length) {\n        return { success: false, error: 'Cheque book not found.' };\n    }\n    await writeChequeBooks(updatedBooks);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n"],"names":[],"mappings":";;;;;;;IAoIsB,gBAAA,WAAA,GAAA,IAAA,kPAAA,EAAA,8CAAA,uOAAA,EAAA,KAAA,GAAA,6OAAA,EAAA","debugId":null}},
    {"offset": {"line": 4719, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/finance/cheque-management/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { z } from 'zod';\nimport { revalidatePath } from 'next/cache';\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { Cheque, chequeSchema, ChequeBook, chequeBookSchema, ChequeLeaf } from './schema';\n\nconst chequesFilePath = path.join(process.cwd(), 'src/data/cheques-data.json');\nconst chequeBooksFilePath = path.join(process.cwd(), 'src/data/cheque-books-data.json');\n\nasync function readData(filePath: string) {\n    try {\n        await fs.access(filePath);\n        const data = await fs.readFile(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            return [];\n        }\n        throw error;\n    }\n}\n\nasync function writeCheques(data: Cheque[]) {\n    await fs.writeFile(chequesFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\nasync function writeChequeBooks(data: ChequeBook[]) {\n    await fs.writeFile(chequeBooksFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\nexport async function getCheques(filters: { party?: string; status?: string } = {}) {\n    let cheques = await readData(chequesFilePath);\n    if (filters.party) {\n        cheques = cheques.filter(cheque => cheque.partyName.toLowerCase().includes(filters.party!.toLowerCase()));\n    }\n    if (filters.status) {\n        cheques = cheques.filter(cheque => cheque.status === filters.status);\n    }\n    return cheques;\n}\n\nexport async function addCheque(data: Omit<Cheque, 'id' | 'status'>) {\n    const validation = chequeSchema.omit({ id: true, status: true }).safeParse(data);\n    if (!validation.success) {\n        return { success: false, error: 'Invalid data format.' };\n    }\n    const allCheques = await readData(chequesFilePath);\n    const newCheque: Cheque = {\n        ...validation.data,\n        id: `CHQ-${Date.now()}`,\n        status: 'In Hand',\n    };\n    allCheques.push(newCheque);\n    await writeCheques(allCheques);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n\nexport async function depositCheques(chequeIds: string[], depositDate: string, bankAccountId: string) {\n    if (!chequeIds || chequeIds.length === 0) return { success: false, error: 'No cheques selected.' };\n    let allCheques = await readData(chequesFilePath);\n    allCheques = allCheques.map(cheque => \n        chequeIds.includes(cheque.id) \n            ? { ...cheque, status: 'Deposited', depositDate, bankAccountId } \n            : cheque\n    );\n    await writeCheques(allCheques);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n\nexport async function returnCheque(chequeId: string, returnDate: string, reason: string) {\n    let allCheques = await readData(chequesFilePath);\n    const chequeIndex = allCheques.findIndex(c => c.id === chequeId);\n    if (chequeIndex === -1) return { success: false, error: 'Cheque not found.' };\n    allCheques[chequeIndex] = { ...allCheques[chequeIndex], status: 'Returned', returnDate, returnReason: reason };\n    await writeCheques(allCheques);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n\nexport async function withdrawCheques(chequeIds: string[]) {\n    if (!chequeIds || chequeIds.length === 0) return { success: false, error: 'No cheques selected.' };\n    let allCheques = await readData(chequesFilePath);\n    allCheques = allCheques.map(cheque => chequeIds.includes(cheque.id) ? { ...cheque, status: 'Withdrawn' } : cheque);\n    await writeCheques(allCheques);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n\nexport async function getChequeBooks() {\n    return await readData(chequeBooksFilePath);\n}\n\nexport async function getChequeLeaves(filters: { bank?: string; bookNo?: string; status?: string } = {}): Promise<ChequeLeaf[]> {\n    const books = await getChequeBooks();\n    const cheques = await getCheques();\n    let leaves: ChequeLeaf[] = [];\n\n    for (const book of books) {\n        for (let i = book.chequeStartNo; i <= book.chequeEndNo; i++) {\n            const chequeNo = i.toString().padStart(6, '0');\n            const usedCheque = cheques.find(c => c.chequeNo === chequeNo && c.bookNo === book.bookNo);\n            leaves.push({\n                id: `${book.id}-${chequeNo}`,\n                chequeNo: chequeNo,\n                bookNo: book.bookNo,\n                bankName: book.bankName,\n                status: usedCheque ? 'Used' : 'Unused',\n                partyName: usedCheque?.partyName,\n                date: usedCheque?.date,\n                amount: usedCheque?.amount\n            });\n        }\n    }\n\n    if (filters.bank) {\n        leaves = leaves.filter(leaf => leaf.bankName === filters.bank);\n    }\n    if (filters.bookNo) {\n        leaves = leaves.filter(leaf => leaf.bookNo === filters.bookNo);\n    }\n    if (filters.status) {\n        leaves = leaves.filter(leaf => leaf.status === filters.status);\n    }\n\n    return leaves;\n}\n\nexport async function addChequeBook(data: Omit<ChequeBook, 'id' | 'leafsUsed'>) {\n    const validation = chequeBookSchema.omit({ id: true, leafsUsed: true }).safeParse(data);\n    if (!validation.success) {\n        return { success: false, error: 'Invalid data format.' };\n    }\n    \n    const allBooks = await getChequeBooks();\n    const newBook: ChequeBook = {\n        ...validation.data,\n        id: `CB-${Date.now()}`,\n        leafsUsed: 0,\n    };\n\n    if (allBooks.some(book => book.bookNo === newBook.bookNo)) {\n        return { success: false, error: 'A cheque book with this book number already exists.' };\n    }\n\n    allBooks.push(newBook);\n    \n    await writeChequeBooks(allBooks);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n\nexport async function updateChequeBook(data: Omit<ChequeBook, 'leafsUsed'>) {\n    const validation = chequeBookSchema.omit({ leafsUsed: true }).safeParse(data);\n    if (!validation.success) {\n        return { success: false, error: 'Invalid data format.' };\n    }\n\n    const allBooks = await getChequeBooks();\n    const bookIndex = allBooks.findIndex(b => b.id === data.id);\n    if (bookIndex === -1) {\n        return { success: false, error: 'Cheque book not found.' };\n    }\n\n    if (allBooks.some(book => book.bookNo === data.bookNo && book.id !== data.id)) {\n        return { success: false, error: 'A cheque book with this book number already exists.' };\n    }\n    \n    const currentBook = allBooks[bookIndex];\n    allBooks[bookIndex] = {\n      ...currentBook,\n      ...validation.data,\n      id: currentBook.id,\n    };\n    \n    await writeChequeBooks(allBooks);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n\nexport async function deleteChequeBook(id: string) {\n    const allBooks = await getChequeBooks();\n    const updatedBooks = allBooks.filter(b => b.id !== id);\n    if (allBooks.length === updatedBooks.length) {\n        return { success: false, error: 'Cheque book not found.' };\n    }\n    await writeChequeBooks(updatedBooks);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n"],"names":[],"mappings":";;;;;;;IA4JsB,mBAAA,WAAA,GAAA,IAAA,kPAAA,EAAA,8CAAA,uOAAA,EAAA,KAAA,GAAA,6OAAA,EAAA","debugId":null}},
    {"offset": {"line": 4734, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/finance/cheque-management/add-cheque-book-dialog.tsx"],"sourcesContent":["\n'use client';\n\nimport { useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { chequeBookSchema, type ChequeBook } from './schema';\nimport { addChequeBook, updateChequeBook } from './actions';\n\ninterface AddChequeBookDialogProps {\n    isOpen: boolean;\n    setIsOpen: (isOpen: boolean) => void;\n    book?: ChequeBook;\n    onSuccess: () => void;\n}\n\nconst FormSchema = chequeBookSchema.omit({ id: true, leafsUsed: true });\ntype FormData = z.infer<typeof FormSchema>;\n\nexport function AddChequeBookDialog({ isOpen, setIsOpen, book, onSuccess }: AddChequeBookDialogProps) {\n    const form = useForm<FormData>({\n        resolver: zodResolver(FormSchema),\n        defaultValues: book ? {\n            ...book,\n            chequeStartNo: book.chequeStartNo || 0,\n            chequeEndNo: book.chequeEndNo || 0,\n            noOfLeafs: book.noOfLeafs || 0,\n        } : {\n            bankName: '',\n            bookNo: '',\n            chequeStartNo: 0,\n            chequeEndNo: 0,\n            noOfLeafs: 0,\n            status: 'Active',\n        },\n    });\n\n    useEffect(() => {\n        const start = form.watch('chequeStartNo');\n        const end = form.watch('chequeEndNo');\n        if (end >= start) {\n            form.setValue('noOfLeafs', end - start + 1);\n        } else {\n            form.setValue('noOfLeafs', 0);\n        }\n    }, [form, form.watch('chequeStartNo'), form.watch('chequeEndNo')]);\n    \n    const handleSubmit = async (values: FormData) => {\n        try {\n            if (book) {\n                await updateChequeBook({ ...values, id: book.id });\n            } else {\n                await addChequeBook(values);\n            }\n            onSuccess();\n            setIsOpen(false);\n            form.reset();\n        } catch (error) {\n            console.error(error);\n        }\n    };\n\n    return (\n        <Dialog open={isOpen} onOpenChange={setIsOpen}>\n            <DialogContent className=\"sm:max-w-[525px]\">\n                <DialogHeader>\n                    <DialogTitle>{book ? 'Edit' : 'Add New'} Cheque Book</DialogTitle>\n                    <p className=\"text-sm text-muted-foreground\">Fill in the details for the new cheque book.</p>\n                </DialogHeader>\n                <Form {...form}>\n                    <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n                        <FormField\n                            control={form.control}\n                            name=\"bankName\"\n                            render={({ field }) => (\n                                <FormItem>\n                                    <FormLabel>Bank Name</FormLabel>\n                                    <FormControl>\n                                        <Input {...field} />\n                                    </FormControl>\n                                    <FormMessage />\n                                </FormItem>\n                            )}\n                        />\n                        <FormField\n                            control={form.control}\n                            name=\"bookNo\"\n                            render={({ field }) => (\n                                <FormItem>\n                                    <FormLabel>Book No.</FormLabel>\n                                    <FormControl>\n                                        <Input {...field} />\n                                    </FormControl>\n                                    <FormMessage />\n                                </FormItem>\n                            )}\n                        />\n                        <div className=\"grid grid-cols-2 gap-4\">\n                             <FormField\n                                control={form.control}\n                                name=\"chequeStartNo\"\n                                render={({ field }) => (\n                                    <FormItem>\n                                        <FormLabel>Start No.</FormLabel>\n                                        <FormControl>\n                                            <Input type=\"number\" {...field} onChange={e => field.onChange(parseInt(e.target.value, 10) || 0)} />\n                                        </FormControl>\n                                        <FormMessage />\n                                    </FormItem>\n                                )}\n                            />\n                            <FormField\n                                control={form.control}\n                                name=\"chequeEndNo\"\n                                render={({ field }) => (\n                                    <FormItem>\n                                        <FormLabel>End No.</FormLabel>\n                                        <FormControl>\n                                            <Input type=\"number\" {...field} onChange={e => field.onChange(parseInt(e.target.value, 10) || 0)} />\n                                        </FormControl>\n                                        <FormMessage />\n                                    </FormItem>\n                                )}\n                            />\n                        </div>\n                        <FormField\n                            control={form.control}\n                            name=\"noOfLeafs\"\n                            render={({ field }) => (\n                                <FormItem>\n                                    <FormLabel>Total Leafs</FormLabel>\n                                    <FormControl>\n                                        <Input type=\"number\" {...field} readOnly className=\"bg-gray-100\" />\n                                    </FormControl>\n                                    <FormMessage />\n                                </FormItem>\n                            )}\n                        />\n                        <FormField\n                            control={form.control}\n                            name=\"status\"\n                            render={({ field }) => (\n                                <FormItem>\n                                    <FormLabel>Status</FormLabel>\n                                     <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                        <FormControl>\n                                            <SelectTrigger>\n                                                <SelectValue placeholder=\"Select a status\" />\n                                            </SelectTrigger>\n                                        </FormControl>\n                                        <SelectContent>\n                                            <SelectItem value=\"Active\">Active</SelectItem>\n                                            <SelectItem value=\"Finished\">Finished</SelectItem>\n                                            <SelectItem value=\"Cancelled\">Cancelled</SelectItem>\n                                        </SelectContent>\n                                    </Select>\n                                    <FormMessage />\n                                </FormItem>\n                            )}\n                        />\n                        <DialogFooter>\n                            <Button type=\"button\" variant=\"outline\" onClick={() => setIsOpen(false)}>Cancel</Button>\n                            <Button type=\"submit\">{book ? 'Update' : 'Add'} Book</Button>\n                        </DialogFooter>\n                    </form>\n                </Form>\n            </DialogContent>\n        </Dialog>\n    );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 5251, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/finance/cheque-management/cheque-book-client.tsx"],"sourcesContent":["\n'use client';\n\nimport { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { DataTable } from '@/components/data-table';\nimport { columns } from './cheque-book-columns';\nimport { AddChequeBookDialog } from './add-cheque-book-dialog';\nimport { type ChequeBook } from './schema';\nimport { Loader2 } from 'lucide-react';\n\ninterface ChequeBookClientProps {\n    initialBooks: ChequeBook[];\n    onSuccess: () => void;\n    isLoading: boolean;\n}\n\nexport function ChequeBookClient({ initialBooks, onSuccess, isLoading }: ChequeBookClientProps) {\n    const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n\n    if (isLoading) {\n        return (\n            <div className=\"flex h-64 w-full items-center justify-center\">\n                <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n            </div>\n        );\n    }\n\n    return (\n        <div>\n            <div className=\"flex justify-end mb-4\">\n                <Button onClick={() => setIsAddDialogOpen(true)}>Add Cheque Book</Button>\n            </div>\n            <DataTable columns={columns} data={initialBooks} />\n            <AddChequeBookDialog\n                isOpen={isAddDialogOpen}\n                setIsOpen={setIsAddDialogOpen}\n                onSuccess={onSuccess}\n            />\n        </div>\n    );\n}\n"],"names":[],"mappings":";;;;;AAGA;AACA;AACA;AACA;AACA;AAEA;;;AARA;;;;;;;AAgBO,SAAS,iBAAiB,KAA6D;QAA7D,EAAE,YAAY,EAAE,SAAS,EAAE,SAAS,EAAyB,GAA7D;;IAC7B,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,IAAA,yKAAQ,EAAC;IAEvD,IAAI,WAAW;QACX,qBACI,6LAAC;YAAI,WAAU;sBACX,cAAA,6LAAC,+NAAO;gBAAC,WAAU;;;;;;;;;;;IAG/B;IAEA,qBACI,6LAAC;;0BACG,6LAAC;gBAAI,WAAU;0BACX,cAAA,6LAAC,+IAAM;oBAAC,SAAS,IAAM,mBAAmB;8BAAO;;;;;;;;;;;0BAErD,6LAAC,mJAAS;gBAAC,SAAS,yLAAO;gBAAE,MAAM;;;;;;0BACnC,6LAAC,2MAAmB;gBAChB,QAAQ;gBACR,WAAW;gBACX,WAAW;;;;;;;;;;;;AAI3B;GAxBgB;KAAA","debugId":null}},
    {"offset": {"line": 5343, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/finance/cheque-management/cheque-book-tab.tsx"],"sourcesContent":["\n'use client';\n\nimport { useState, useEffect } from 'react';\nimport { getChequeBooks } from './actions';\nimport { type ChequeBook } from './schema';\nimport { ChequeBookClient } from './cheque-book-client';\n\ninterface ChequeBookTabProps {\n    onSuccess: () => void;\n}\n\nexport function ChequeBookTab({ onSuccess }: ChequeBookTabProps) {\n    const [initialBooks, setInitialBooks] = useState<ChequeBook[]>([]);\n    const [isLoading, setIsLoading] = useState(true);\n\n    useEffect(() => {\n        async function fetchData() {\n            setIsLoading(true);\n            const books = await getChequeBooks();\n            setInitialBooks(books);\n            setIsLoading(false);\n        }\n        fetchData();\n    }, []);\n\n    const handleSuccessAndReload = () => {\n        onSuccess();\n        async function fetchData() {\n            setIsLoading(true);\n            const books = await getChequeBooks();\n            setInitialBooks(books);\n            setIsLoading(false);\n        }\n        fetchData();\n    }\n\n    return <ChequeBookClient initialBooks={initialBooks} onSuccess={handleSuccessAndReload} isLoading={isLoading} />;\n}\n"],"names":[],"mappings":";;;;;AAGA;AACA;AAEA;;;AALA;;;;AAWO,SAAS,cAAc,KAAiC;QAAjC,EAAE,SAAS,EAAsB,GAAjC;;IAC1B,MAAM,CAAC,cAAc,gBAAgB,GAAG,IAAA,yKAAQ,EAAe,EAAE;IACjE,MAAM,CAAC,WAAW,aAAa,GAAG,IAAA,yKAAQ,EAAC;IAE3C,IAAA,0KAAS;mCAAC;YACN,eAAe;gBACX,aAAa;gBACb,MAAM,QAAQ,MAAM,IAAA,0MAAc;gBAClC,gBAAgB;gBAChB,aAAa;YACjB;YACA;QACJ;kCAAG,EAAE;IAEL,MAAM,yBAAyB;QAC3B;QACA,eAAe;YACX,aAAa;YACb,MAAM,QAAQ,MAAM,IAAA,0MAAc;YAClC,gBAAgB;YAChB,aAAa;QACjB;QACA;IACJ;IAEA,qBAAO,6LAAC,iMAAgB;QAAC,cAAc;QAAc,WAAW;QAAwB,WAAW;;;;;;AACvG;GA1BgB;KAAA","debugId":null}},
    {"offset": {"line": 5404, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/finance/cheque-management/cheque-book-reports-columns.tsx"],"sourcesContent":["\n'use client';\n\nimport { type ColumnDef } from '@tanstack/react-table';\nimport { type ChequeLeaf } from './schema';\nimport { Badge } from '@/components/ui/badge';\n\nexport const columns: ColumnDef<ChequeLeaf>[] = [\n    {\n        accessorKey: 'chequeNo',\n        header: 'Cheque No',\n    },\n    {\n        accessorKey: 'bookNo',\n        header: 'Book No',\n    },\n    {\n        accessorKey: 'bankName',\n        header: 'Bank Name',\n    },\n    {\n        accessorKey: 'status',\n        header: 'Status',\n        cell: ({ row }) => {\n            const status = row.getValue('status') as ChequeLeaf['status'];\n            return <Badge variant={status === 'Used' ? 'secondary' : 'default'}>{status}</Badge>;\n        },\n    },\n    {\n        accessorKey: 'date',\n        header: 'Date',\n    },\n    {\n        accessorKey: 'partyCode',\n        header: 'Party Code',\n    },\n    {\n        accessorKey: 'partyName',\n        header: 'Party Name',\n    },\n    {\n        accessorKey: 'amount',\n        header: 'Amount',\n    },\n    {\n        accessorKey: 'property',\n        header: 'Property',\n    },\n    {\n        accessorKey: 'unitCode',\n        header: 'Unit Code',\n    },\n    {\n        accessorKey: 'roomCode',\n        header: 'Room Code',\n    },\n];\n"],"names":[],"mappings":";;;;;AAKA;AAJA;;;AAMO,MAAM,UAAmC;IAC5C;QACI,aAAa;QACb,QAAQ;IACZ;IACA;QACI,aAAa;QACb,QAAQ;IACZ;IACA;QACI,aAAa;QACb,QAAQ;IACZ;IACA;QACI,aAAa;QACb,QAAQ;QACR,MAAM;gBAAC,EAAE,GAAG,EAAE;YACV,MAAM,SAAS,IAAI,QAAQ,CAAC;YAC5B,qBAAO,6LAAC,6IAAK;gBAAC,SAAS,WAAW,SAAS,cAAc;0BAAY;;;;;;QACzE;IACJ;IACA;QACI,aAAa;QACb,QAAQ;IACZ;IACA;QACI,aAAa;QACb,QAAQ;IACZ;IACA;QACI,aAAa;QACb,QAAQ;IACZ;IACA;QACI,aAAa;QACb,QAAQ;IACZ;IACA;QACI,aAAa;QACb,QAAQ;IACZ;IACA;QACI,aAAa;QACb,QAAQ;IACZ;IACA;QACI,aAAa;QACb,QAAQ;IACZ;CACH","debugId":null}},
    {"offset": {"line": 5478, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/finance/cheque-management/cheque-book-reports-client.tsx"],"sourcesContent":["\n'use client';\n\nimport { DataTable } from '@/components/data-table';\nimport { columns } from './cheque-book-reports-columns';\nimport { type ChequeLeaf } from './schema';\nimport { Loader2 } from 'lucide-react';\n\ninterface ChequeBookReportsClientProps {\n    initialReportData: ChequeLeaf[];\n    isLoading: boolean;\n}\n\nexport function ChequeBookReportsClient({ initialReportData, isLoading }: ChequeBookReportsClientProps) {\n    if (isLoading) {\n        return (\n            <div className=\"flex h-64 w-full items-center justify-center\">\n                <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n            </div>\n        );\n    }\n\n    return <DataTable columns={columns} data={initialReportData} />;\n}\n"],"names":[],"mappings":";;;;;AAGA;AACA;AAEA;AALA;;;;;AAYO,SAAS,wBAAwB,KAA8D;QAA9D,EAAE,iBAAiB,EAAE,SAAS,EAAgC,GAA9D;IACpC,IAAI,WAAW;QACX,qBACI,6LAAC;YAAI,WAAU;sBACX,cAAA,6LAAC,+NAAO;gBAAC,WAAU;;;;;;;;;;;IAG/B;IAEA,qBAAO,6LAAC,mJAAS;QAAC,SAAS,oMAAO;QAAE,MAAM;;;;;;AAC9C;KAVgB","debugId":null}},
    {"offset": {"line": 5528, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/finance/cheque-management/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { z } from 'zod';\nimport { revalidatePath } from 'next/cache';\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { Cheque, chequeSchema, ChequeBook, chequeBookSchema, ChequeLeaf } from './schema';\n\nconst chequesFilePath = path.join(process.cwd(), 'src/data/cheques-data.json');\nconst chequeBooksFilePath = path.join(process.cwd(), 'src/data/cheque-books-data.json');\n\nasync function readData(filePath: string) {\n    try {\n        await fs.access(filePath);\n        const data = await fs.readFile(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            return [];\n        }\n        throw error;\n    }\n}\n\nasync function writeCheques(data: Cheque[]) {\n    await fs.writeFile(chequesFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\nasync function writeChequeBooks(data: ChequeBook[]) {\n    await fs.writeFile(chequeBooksFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\nexport async function getCheques(filters: { party?: string; status?: string } = {}) {\n    let cheques = await readData(chequesFilePath);\n    if (filters.party) {\n        cheques = cheques.filter(cheque => cheque.partyName.toLowerCase().includes(filters.party!.toLowerCase()));\n    }\n    if (filters.status) {\n        cheques = cheques.filter(cheque => cheque.status === filters.status);\n    }\n    return cheques;\n}\n\nexport async function addCheque(data: Omit<Cheque, 'id' | 'status'>) {\n    const validation = chequeSchema.omit({ id: true, status: true }).safeParse(data);\n    if (!validation.success) {\n        return { success: false, error: 'Invalid data format.' };\n    }\n    const allCheques = await readData(chequesFilePath);\n    const newCheque: Cheque = {\n        ...validation.data,\n        id: `CHQ-${Date.now()}`,\n        status: 'In Hand',\n    };\n    allCheques.push(newCheque);\n    await writeCheques(allCheques);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n\nexport async function depositCheques(chequeIds: string[], depositDate: string, bankAccountId: string) {\n    if (!chequeIds || chequeIds.length === 0) return { success: false, error: 'No cheques selected.' };\n    let allCheques = await readData(chequesFilePath);\n    allCheques = allCheques.map(cheque => \n        chequeIds.includes(cheque.id) \n            ? { ...cheque, status: 'Deposited', depositDate, bankAccountId } \n            : cheque\n    );\n    await writeCheques(allCheques);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n\nexport async function returnCheque(chequeId: string, returnDate: string, reason: string) {\n    let allCheques = await readData(chequesFilePath);\n    const chequeIndex = allCheques.findIndex(c => c.id === chequeId);\n    if (chequeIndex === -1) return { success: false, error: 'Cheque not found.' };\n    allCheques[chequeIndex] = { ...allCheques[chequeIndex], status: 'Returned', returnDate, returnReason: reason };\n    await writeCheques(allCheques);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n\nexport async function withdrawCheques(chequeIds: string[]) {\n    if (!chequeIds || chequeIds.length === 0) return { success: false, error: 'No cheques selected.' };\n    let allCheques = await readData(chequesFilePath);\n    allCheques = allCheques.map(cheque => chequeIds.includes(cheque.id) ? { ...cheque, status: 'Withdrawn' } : cheque);\n    await writeCheques(allCheques);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n\nexport async function getChequeBooks() {\n    return await readData(chequeBooksFilePath);\n}\n\nexport async function getChequeLeaves(filters: { bank?: string; bookNo?: string; status?: string } = {}): Promise<ChequeLeaf[]> {\n    const books = await getChequeBooks();\n    const cheques = await getCheques();\n    let leaves: ChequeLeaf[] = [];\n\n    for (const book of books) {\n        for (let i = book.chequeStartNo; i <= book.chequeEndNo; i++) {\n            const chequeNo = i.toString().padStart(6, '0');\n            const usedCheque = cheques.find(c => c.chequeNo === chequeNo && c.bookNo === book.bookNo);\n            leaves.push({\n                id: `${book.id}-${chequeNo}`,\n                chequeNo: chequeNo,\n                bookNo: book.bookNo,\n                bankName: book.bankName,\n                status: usedCheque ? 'Used' : 'Unused',\n                partyName: usedCheque?.partyName,\n                date: usedCheque?.date,\n                amount: usedCheque?.amount\n            });\n        }\n    }\n\n    if (filters.bank) {\n        leaves = leaves.filter(leaf => leaf.bankName === filters.bank);\n    }\n    if (filters.bookNo) {\n        leaves = leaves.filter(leaf => leaf.bookNo === filters.bookNo);\n    }\n    if (filters.status) {\n        leaves = leaves.filter(leaf => leaf.status === filters.status);\n    }\n\n    return leaves;\n}\n\nexport async function addChequeBook(data: Omit<ChequeBook, 'id' | 'leafsUsed'>) {\n    const validation = chequeBookSchema.omit({ id: true, leafsUsed: true }).safeParse(data);\n    if (!validation.success) {\n        return { success: false, error: 'Invalid data format.' };\n    }\n    \n    const allBooks = await getChequeBooks();\n    const newBook: ChequeBook = {\n        ...validation.data,\n        id: `CB-${Date.now()}`,\n        leafsUsed: 0,\n    };\n\n    if (allBooks.some(book => book.bookNo === newBook.bookNo)) {\n        return { success: false, error: 'A cheque book with this book number already exists.' };\n    }\n\n    allBooks.push(newBook);\n    \n    await writeChequeBooks(allBooks);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n\nexport async function updateChequeBook(data: Omit<ChequeBook, 'leafsUsed'>) {\n    const validation = chequeBookSchema.omit({ leafsUsed: true }).safeParse(data);\n    if (!validation.success) {\n        return { success: false, error: 'Invalid data format.' };\n    }\n\n    const allBooks = await getChequeBooks();\n    const bookIndex = allBooks.findIndex(b => b.id === data.id);\n    if (bookIndex === -1) {\n        return { success: false, error: 'Cheque book not found.' };\n    }\n\n    if (allBooks.some(book => book.bookNo === data.bookNo && book.id !== data.id)) {\n        return { success: false, error: 'A cheque book with this book number already exists.' };\n    }\n    \n    const currentBook = allBooks[bookIndex];\n    allBooks[bookIndex] = {\n      ...currentBook,\n      ...validation.data,\n      id: currentBook.id,\n    };\n    \n    await writeChequeBooks(allBooks);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n\nexport async function deleteChequeBook(id: string) {\n    const allBooks = await getChequeBooks();\n    const updatedBooks = allBooks.filter(b => b.id !== id);\n    if (allBooks.length === updatedBooks.length) {\n        return { success: false, error: 'Cheque book not found.' };\n    }\n    await writeChequeBooks(updatedBooks);\n    revalidatePath('/finance/cheque-management');\n    return { success: true };\n}\n"],"names":[],"mappings":";;;;;;;IAiGsB,kBAAA,WAAA,GAAA,IAAA,kPAAA,EAAA,8CAAA,uOAAA,EAAA,KAAA,GAAA,6OAAA,EAAA","debugId":null}},
    {"offset": {"line": 5543, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/finance/cheque-management/cheque-book-reports-tab.tsx"],"sourcesContent":["\n'use client';\n\nimport { useEffect, useState } from 'react';\nimport { ChequeBookReportsClient } from './cheque-book-reports-client';\nimport { getChequeLeaves, getChequeBooks } from './actions';\nimport { type ChequeLeaf, type ChequeBook } from './schema';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Button } from '@/components/ui/button';\nimport { FileText, File } from 'lucide-react';\n\ninterface ChequeBookReportsTabProps {\n    key: number;\n}\n\nexport function ChequeBookReportsTab({ key }: ChequeBookReportsTabProps) {\n    const [initialReportData, setInitialReportData] = useState<ChequeLeaf[]>([]);\n    const [isLoading, setIsLoading] = useState(true);\n    const [banks, setBanks] = useState<string[]>([]);\n    const [bookNos, setBookNos] = useState<string[]>([]);\n\n    const fetchData = async () => {\n        setIsLoading(true);\n        const [leaves, books] = await Promise.all([getChequeLeaves(), getChequeBooks()]);\n        setInitialReportData(leaves);\n        setBanks([...new Set(books.map(book => book.bankName))]);\n        setBookNos([...new Set(books.map(book => book.bookNo))]);\n        setIsLoading(false);\n    };\n\n    useEffect(() => {\n        fetchData();\n    }, [key]);\n\n    const handleFilterChange = async (filters: { bank?: string; bookNo?: string; status?: string }) => {\n        setIsLoading(true);\n        const leaves = await getChequeLeaves(filters);\n        setInitialReportData(leaves);\n        setIsLoading(false);\n    };\n\n    return (\n        <div>\n             <div className=\"flex justify-between items-center mb-4\">\n                <div>\n                    <h2 className=\"text-2xl font-bold\">Cheque Book Report</h2>\n                    <p className=\"text-muted-foreground\">A detailed list of every cheque leaf and its status.</p>\n                </div>\n                <div className=\"flex space-x-2\">\n                    <Button variant=\"outline\">\n                        <FileText className=\"mr-2 h-4 w-4\" />\n                        PDF\n                    </Button>\n                    <Button variant=\"outline\">\n                        <File className=\"mr-2 h-4 w-4\" />\n                        Excel\n                    </Button>\n                </div>\n            </div>\n\n            <div className=\"flex space-x-4 mb-4\">\n                <Select onValueChange={value => handleFilterChange({ bank: value })}>\n                    <SelectTrigger className=\"w-[200px]\">\n                        <SelectValue placeholder=\"Filter by Bank...\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                        {banks.map(bank => (\n                            <SelectItem key={bank} value={bank}>{bank}</SelectItem>\n                        ))}\n                    </SelectContent>\n                </Select>\n\n                <Select onValueChange={value => handleFilterChange({ bookNo: value })}>\n                    <SelectTrigger className=\"w-[200px]\">\n                        <SelectValue placeholder=\"Filter by Book No...\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                        {bookNos.map(bookNo => (\n                            <SelectItem key={bookNo} value={bookNo}>{bookNo}</SelectItem>\n                        ))}\n                    </SelectContent>\n                </Select>\n\n                 <Select onValueChange={value => handleFilterChange({ status: value })}>\n                    <SelectTrigger className=\"w-[200px]\">\n                        <SelectValue placeholder=\"Filter by Status...\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                        <SelectItem value=\"Used\">Used</SelectItem>\n                        <SelectItem value=\"Unused\">Unused</SelectItem>\n                        <SelectItem value=\"Cancelled\">Cancelled</SelectItem>\n                    </SelectContent>\n                </Select>\n            </div>\n\n            <ChequeBookReportsClient \n                initialReportData={initialReportData} \n                isLoading={isLoading} \n            />\n        </div>\n    );\n}\n"],"names":[],"mappings":";;;;;AAGA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;;;AARA;;;;;;;AAcO,SAAS,qBAAqB,KAAkC;QAAlC,EAAE,GAAG,EAA6B,GAAlC;;IACjC,MAAM,CAAC,mBAAmB,qBAAqB,GAAG,IAAA,yKAAQ,EAAe,EAAE;IAC3E,MAAM,CAAC,WAAW,aAAa,GAAG,IAAA,yKAAQ,EAAC;IAC3C,MAAM,CAAC,OAAO,SAAS,GAAG,IAAA,yKAAQ,EAAW,EAAE;IAC/C,MAAM,CAAC,SAAS,WAAW,GAAG,IAAA,yKAAQ,EAAW,EAAE;IAEnD,MAAM,YAAY;QACd,aAAa;QACb,MAAM,CAAC,QAAQ,MAAM,GAAG,MAAM,QAAQ,GAAG,CAAC;YAAC,IAAA,2MAAe;YAAI,IAAA,0MAAc;SAAG;QAC/E,qBAAqB;QACrB,SAAS;eAAI,IAAI,IAAI,MAAM,GAAG,CAAC,CAAA,OAAQ,KAAK,QAAQ;SAAG;QACvD,WAAW;eAAI,IAAI,IAAI,MAAM,GAAG,CAAC,CAAA,OAAQ,KAAK,MAAM;SAAG;QACvD,aAAa;IACjB;IAEA,IAAA,0KAAS;0CAAC;YACN;QACJ;yCAAG;QAAC;KAAI;IAER,MAAM,qBAAqB,OAAO;QAC9B,aAAa;QACb,MAAM,SAAS,MAAM,IAAA,2MAAe,EAAC;QACrC,qBAAqB;QACrB,aAAa;IACjB;IAEA,qBACI,6LAAC;;0BACI,6LAAC;gBAAI,WAAU;;kCACZ,6LAAC;;0CACG,6LAAC;gCAAG,WAAU;0CAAqB;;;;;;0CACnC,6LAAC;gCAAE,WAAU;0CAAwB;;;;;;;;;;;;kCAEzC,6LAAC;wBAAI,WAAU;;0CACX,6LAAC,+IAAM;gCAAC,SAAQ;;kDACZ,6LAAC,6NAAQ;wCAAC,WAAU;;;;;;oCAAiB;;;;;;;0CAGzC,6LAAC,+IAAM;gCAAC,SAAQ;;kDACZ,6LAAC,6MAAI;wCAAC,WAAU;;;;;;oCAAiB;;;;;;;;;;;;;;;;;;;0BAM7C,6LAAC;gBAAI,WAAU;;kCACX,6LAAC,+IAAM;wBAAC,eAAe,CAAA,QAAS,mBAAmB;gCAAE,MAAM;4BAAM;;0CAC7D,6LAAC,sJAAa;gCAAC,WAAU;0CACrB,cAAA,6LAAC,oJAAW;oCAAC,aAAY;;;;;;;;;;;0CAE7B,6LAAC,sJAAa;0CACT,MAAM,GAAG,CAAC,CAAA,qBACP,6LAAC,mJAAU;wCAAY,OAAO;kDAAO;uCAApB;;;;;;;;;;;;;;;;kCAK7B,6LAAC,+IAAM;wBAAC,eAAe,CAAA,QAAS,mBAAmB;gCAAE,QAAQ;4BAAM;;0CAC/D,6LAAC,sJAAa;gCAAC,WAAU;0CACrB,cAAA,6LAAC,oJAAW;oCAAC,aAAY;;;;;;;;;;;0CAE7B,6LAAC,sJAAa;0CACT,QAAQ,GAAG,CAAC,CAAA,uBACT,6LAAC,mJAAU;wCAAc,OAAO;kDAAS;uCAAxB;;;;;;;;;;;;;;;;kCAK5B,6LAAC,+IAAM;wBAAC,eAAe,CAAA,QAAS,mBAAmB;gCAAE,QAAQ;4BAAM;;0CAChE,6LAAC,sJAAa;gCAAC,WAAU;0CACrB,cAAA,6LAAC,oJAAW;oCAAC,aAAY;;;;;;;;;;;0CAE7B,6LAAC,sJAAa;;kDACV,6LAAC,mJAAU;wCAAC,OAAM;kDAAO;;;;;;kDACzB,6LAAC,mJAAU;wCAAC,OAAM;kDAAS;;;;;;kDAC3B,6LAAC,mJAAU;wCAAC,OAAM;kDAAY;;;;;;;;;;;;;;;;;;;;;;;;0BAK1C,6LAAC,mNAAuB;gBACpB,mBAAmB;gBACnB,WAAW;;;;;;;;;;;;AAI3B;GAtFgB;KAAA","debugId":null}},
    {"offset": {"line": 5848, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/finance/cheque-management/page.tsx"],"sourcesContent":["\n'use client';\n\nimport { useState } from 'react';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { ChequeManagementTab } from './cheque-management-tab';\nimport { ChequeBookTab } from './cheque-book-tab';\nimport { ChequeBookReportsTab } from './cheque-book-reports-tab';\n\nexport default function ChequeManagementPage() {\n    const [key, setKey] = useState(0);\n\n    const handleSuccess = () => {\n        setKey(prevKey => prevKey + 1);\n    };\n\n    return (\n        <Tabs defaultValue=\"management\">\n            <TabsList className=\"mb-4\">\n                <TabsTrigger value=\"management\">Cheque Management</TabsTrigger>\n                <TabsTrigger value=\"books\">Cheque Book</TabsTrigger>\n                <TabsTrigger value=\"reports\">Cheque Book Reports</TabsTrigger>\n            </TabsList>\n            <TabsContent value=\"management\">\n                <ChequeManagementTab key={key} onSuccess={handleSuccess} />\n            </TabsContent>\n            <TabsContent value=\"books\">\n                <ChequeBookTab key={key} onSuccess={handleSuccess} />\n            </TabsContent>\n            <TabsContent value=\"reports\">\n                <ChequeBookReportsTab key={key} />\n            </TabsContent>\n        </Tabs>\n    );\n}\n"],"names":[],"mappings":";;;;;AAGA;AACA;AACA;AACA;AACA;;;AANA;;;;;;AAQe,SAAS;;IACpB,MAAM,CAAC,KAAK,OAAO,GAAG,IAAA,yKAAQ,EAAC;IAE/B,MAAM,gBAAgB;QAClB,OAAO,CAAA,UAAW,UAAU;IAChC;IAEA,qBACI,6LAAC,2IAAI;QAAC,cAAa;;0BACf,6LAAC,+IAAQ;gBAAC,WAAU;;kCAChB,6LAAC,kJAAW;wBAAC,OAAM;kCAAa;;;;;;kCAChC,6LAAC,kJAAW;wBAAC,OAAM;kCAAQ;;;;;;kCAC3B,6LAAC,kJAAW;wBAAC,OAAM;kCAAU;;;;;;;;;;;;0BAEjC,6LAAC,kJAAW;gBAAC,OAAM;0BACf,cAAA,6LAAC,uMAAmB;oBAAW,WAAW;mBAAhB;;;;;;;;;;0BAE9B,6LAAC,kJAAW;gBAAC,OAAM;0BACf,cAAA,6LAAC,2LAAa;oBAAW,WAAW;mBAAhB;;;;;;;;;;0BAExB,6LAAC,kJAAW;gBAAC,OAAM;0BACf,cAAA,6LAAC,6MAAoB,MAAM;;;;;;;;;;;;;;;;AAI3C;GAzBwB;KAAA","debugId":null}}]
}