{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/input.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n"],"names":[],"mappings":";;;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,2KAAgB,MAC5B,QAAgC;QAA/B,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAO;IAC5B,qBACE,6LAAC;QACC,MAAM;QACN,WAAW,IAAA,4HAAE,EACX,kYACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAEF,MAAM,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 40, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,gBAAgB,IAAA,0KAAG,EACvB;AAGF,MAAM,sBAAQ,2KAAgB,MAI5B,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC,4KAAmB;QAClB,KAAK;QACL,WAAW,IAAA,4HAAE,EAAC,iBAAiB;QAC9B,GAAG,KAAK;;;;;;;;AAGb,MAAM,WAAW,GAAG,4KAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 81, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/separator.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n"],"names":[],"mappings":";;;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,0BAAY,2KAAgB,MAIhC,QAEE;QADA,EAAE,SAAS,EAAE,cAAc,YAAY,EAAE,aAAa,IAAI,EAAE,GAAG,OAAO;yBAGtE,6LAAC,gLAAuB;QACtB,KAAK;QACL,YAAY;QACZ,aAAa;QACb,WAAW,IAAA,4HAAE,EACX,sBACA,gBAAgB,eAAe,mBAAmB,kBAClD;QAED,GAAG,KAAK;;;;;;;;AAIf,UAAU,WAAW,GAAG,gLAAuB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 121, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/profile/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { promises as fs } from 'fs';\nimport path from 'path';\n\n// Note: In a real app, this would be a database call.\nconst profileDataPath = path.join(process.cwd(), 'src/app/admin/profile/data.json');\n\ntype ProfileData = {\n    firstName: string;\n    lastName: string;\n    email: string;\n    phone?: string;\n    avatar?: string | null;\n};\n\nasync function getProfileData(): Promise<ProfileData> {\n    try {\n        const data = await fs.readFile(profileDataPath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        // If file doesn't exist, return a default structure\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            const defaultProfile = {\n                firstName: 'Admin',\n                lastName: 'User',\n                email: 'admin@propvue.com',\n                phone: '+1 (123) 456-7890',\n                avatar: null\n            };\n            // Create the file with default data\n            await fs.writeFile(profileDataPath, JSON.stringify(defaultProfile, null, 2), 'utf-8');\n            return defaultProfile;\n        }\n        throw error;\n    }\n}\n\nasync function saveProfileData(data: ProfileData) {\n    await fs.writeFile(profileDataPath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\n\nexport async function updateUserProfile(data: ProfileData) {\n  \n  // Basic validation (in a real app, use Zod)\n  if (!data.firstName || !data.lastName || !data.email) {\n    return { success: false, error: 'Name and email are required.' };\n  }\n\n  // Password change logic (placeholder)\n  // @ts-ignore\n  if (data.newPassword && !data.currentPassword) {\n    return { success: false, error: 'Current password is required to set a new one.' };\n  }\n  \n  // @ts-ignore\n  if (data.newPassword && data.currentPassword) {\n     console.log('Password change requested. In a real app, you would verify the current password and hash the new one.');\n  }\n\n  try {\n    const currentProfile = await getProfileData();\n    const updatedProfile = { ...currentProfile, ...data };\n    await saveProfileData(updatedProfile);\n    return { success: true };\n  } catch (error) {\n    console.error('Failed to save profile:', error);\n    return { success: false, error: 'Failed to save profile data.' };\n  }\n}\n\nexport async function loadUserProfile() {\n    try {\n        const data = await getProfileData();\n        return { success: true, data };\n    } catch (error) {\n        console.error('Failed to load profile:', error);\n        return { success: false, error: 'Could not load profile data.' };\n    }\n}\n\n    "],"names":[],"mappings":";;;;;;;IA4CsB,oBAAA,WAAA,GAAA,IAAA,kPAAA,EAAA,8CAAA,uOAAA,EAAA,KAAA,GAAA,6OAAA,EAAA","debugId":null}},
    {"offset": {"line": 136, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/profile/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { promises as fs } from 'fs';\nimport path from 'path';\n\n// Note: In a real app, this would be a database call.\nconst profileDataPath = path.join(process.cwd(), 'src/app/admin/profile/data.json');\n\ntype ProfileData = {\n    firstName: string;\n    lastName: string;\n    email: string;\n    phone?: string;\n    avatar?: string | null;\n};\n\nasync function getProfileData(): Promise<ProfileData> {\n    try {\n        const data = await fs.readFile(profileDataPath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        // If file doesn't exist, return a default structure\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            const defaultProfile = {\n                firstName: 'Admin',\n                lastName: 'User',\n                email: 'admin@propvue.com',\n                phone: '+1 (123) 456-7890',\n                avatar: null\n            };\n            // Create the file with default data\n            await fs.writeFile(profileDataPath, JSON.stringify(defaultProfile, null, 2), 'utf-8');\n            return defaultProfile;\n        }\n        throw error;\n    }\n}\n\nasync function saveProfileData(data: ProfileData) {\n    await fs.writeFile(profileDataPath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\n\nexport async function updateUserProfile(data: ProfileData) {\n  \n  // Basic validation (in a real app, use Zod)\n  if (!data.firstName || !data.lastName || !data.email) {\n    return { success: false, error: 'Name and email are required.' };\n  }\n\n  // Password change logic (placeholder)\n  // @ts-ignore\n  if (data.newPassword && !data.currentPassword) {\n    return { success: false, error: 'Current password is required to set a new one.' };\n  }\n  \n  // @ts-ignore\n  if (data.newPassword && data.currentPassword) {\n     console.log('Password change requested. In a real app, you would verify the current password and hash the new one.');\n  }\n\n  try {\n    const currentProfile = await getProfileData();\n    const updatedProfile = { ...currentProfile, ...data };\n    await saveProfileData(updatedProfile);\n    return { success: true };\n  } catch (error) {\n    console.error('Failed to save profile:', error);\n    return { success: false, error: 'Failed to save profile data.' };\n  }\n}\n\nexport async function loadUserProfile() {\n    try {\n        const data = await getProfileData();\n        return { success: true, data };\n    } catch (error) {\n        console.error('Failed to load profile:', error);\n        return { success: false, error: 'Could not load profile data.' };\n    }\n}\n\n    "],"names":[],"mappings":";;;;;;;IAyEsB,kBAAA,WAAA,GAAA,IAAA,kPAAA,EAAA,8CAAA,uOAAA,EAAA,KAAA,GAAA,6OAAA,EAAA","debugId":null}},
    {"offset": {"line": 151, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/form.tsx"],"sourcesContent":["\n\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 381, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/profile/page.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Separator } from '@/components/ui/separator';\nimport { UserCog, Loader2, Upload } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { updateUserProfile, loadUserProfile } from './actions';\nimport { useForm } from 'react-hook-form';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\n\n\nconst profileFormSchema = z.object({\n    firstName: z.string().min(1, 'First name is required.'),\n    lastName: z.string().min(1, 'Last name is required.'),\n    email: z.string().email(),\n    phone: z.string().optional(),\n    avatar: z.string().nullable().optional(),\n    currentPassword: z.string().optional(),\n    newPassword: z.string().optional(),\n});\n\ntype ProfileFormData = z.infer<typeof profileFormSchema>;\n\nexport default function UserProfilePage() {\n    const { toast } = useToast();\n    const [isLoading, setIsLoading] = useState(true);\n    const [avatarPreview, setAvatarPreview] = useState<string | null>(null);\n\n    const form = useForm<ProfileFormData>({\n        resolver: zodResolver(profileFormSchema),\n        defaultValues: {\n            firstName: '',\n            lastName: '',\n            email: '',\n            phone: '',\n            avatar: null,\n            currentPassword: '',\n            newPassword: ''\n        }\n    });\n\n    const {\n        formState: { isSubmitting, isDirty },\n    } = form;\n\n    useEffect(() => {\n        const fetchProfile = async () => {\n            setIsLoading(true);\n            const result = await loadUserProfile();\n            if (result.success && result.data) {\n                form.reset(result.data);\n                setAvatarPreview(result.data.avatar || null);\n            } else {\n                 toast({\n                    variant: 'destructive',\n                    title: 'Error loading profile',\n                    description: result.error,\n                });\n            }\n            setIsLoading(false);\n        };\n        fetchProfile();\n    }, [toast, form]);\n    \n    const handleAvatarChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const file = event.target.files?.[0];\n        if (file) {\n            const reader = new FileReader();\n            reader.onloadend = () => {\n                const result = reader.result as string;\n                setAvatarPreview(result);\n                form.setValue('avatar', result, { shouldDirty: true });\n            };\n            reader.readAsDataURL(file);\n        }\n    };\n\n\n    const onSubmit = async (data: ProfileFormData) => {\n        // In a real app, you would add password verification logic here\n        if (data.newPassword && !data.currentPassword) {\n            form.setError('currentPassword', { type: 'manual', message: 'Current password is required to set a new one.' });\n            return;\n        }\n\n        const result = await updateUserProfile(data);\n\n        if (result.success) {\n            toast({\n                title: 'Profile Updated',\n                description: 'Your profile has been saved successfully.',\n            });\n            form.reset(data); // To reset the dirty state\n        } else {\n            toast({\n                variant: 'destructive',\n                title: 'Error',\n                description: result.error,\n            });\n        }\n    };\n\n    if (isLoading) {\n        return (\n            <div className=\"container mx-auto py-10 flex justify-center items-center\">\n                <Loader2 className=\"h-10 w-10 animate-spin text-primary\" />\n            </div>\n        )\n    }\n\n  const profile = form.watch();\n\n  return (\n    <div className=\"container mx-auto py-10\">\n      <div className=\"mx-auto max-w-4xl\">\n        <div className=\"flex items-center gap-4 mb-8\">\n            <UserCog className=\"h-10 w-10 text-primary\" />\n            <div>\n                <h1 className=\"text-3xl font-bold font-headline\">User Profile</h1>\n                <p className=\"text-muted-foreground\">Manage your profile information and settings.</p>\n            </div>\n        </div>\n\n        <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)}>\n            <Card>\n                <CardHeader>\n                    <CardTitle>Profile Details</CardTitle>\n                    <CardDescription>Update your personal and contact information.</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                    <div className=\"flex items-center gap-6\">\n                        <Avatar className=\"h-24 w-24\">\n                            <AvatarImage src={avatarPreview || undefined} alt=\"User\" />\n                            <AvatarFallback>{profile.firstName?.charAt(0)}</AvatarFallback>\n                        </Avatar>\n                        <div className=\"space-y-1\">\n                            <h3 className=\"text-xl font-semibold\">{profile.firstName} {profile.lastName}</h3>\n                            <p className=\"text-muted-foreground\">{profile.email}</p>\n                            <Input id=\"avatar-upload\" type=\"file\" className=\"hidden\" onChange={handleAvatarChange} accept=\"image/*\" />\n                            <Label htmlFor=\"avatar-upload\">\n                                 <Button type=\"button\" variant=\"outline\" asChild>\n                                    <span className=\"cursor-pointer\">\n                                        <Upload className=\"mr-2 h-4 w-4\" />\n                                        Upload Photo\n                                    </span>\n                                </Button>\n                            </Label>\n                        </div>\n                    </div>\n                    \n                    <Separator />\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                         <FormField control={form.control} name=\"firstName\" render={({ field }) => (\n                            <FormItem><FormLabel>First Name</FormLabel><FormControl><Input {...field} /></FormControl><FormMessage /></FormItem>\n                         )}/>\n                         <FormField control={form.control} name=\"lastName\" render={({ field }) => (\n                            <FormItem><FormLabel>Last Name</FormLabel><FormControl><Input {...field} /></FormControl><FormMessage /></FormItem>\n                         )}/>\n                         <FormField control={form.control} name=\"email\" render={({ field }) => (\n                            <FormItem><FormLabel>Email</FormLabel><FormControl><Input type=\"email\" {...field} /></FormControl><FormMessage /></FormItem>\n                         )}/>\n                         <FormField control={form.control} name=\"phone\" render={({ field }) => (\n                            <FormItem><FormLabel>Phone Number</FormLabel><FormControl><Input type=\"tel\" {...field} /></FormControl><FormMessage /></FormItem>\n                         )}/>\n                    </div>\n\n                    <Separator />\n\n                    <div>\n                        <h3 className=\"font-semibold text-lg\">Change Password</h3>\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mt-4\">\n                           <FormField control={form.control} name=\"currentPassword\" render={({ field }) => (\n                                <FormItem><FormLabel>Current Password</FormLabel><FormControl><Input type=\"password\" placeholder=\"********\" {...field} /></FormControl><FormMessage /></FormItem>\n                            )}/>\n                            <FormField control={form.control} name=\"newPassword\" render={({ field }) => (\n                                <FormItem><FormLabel>New Password</FormLabel><FormControl><Input type=\"password\" placeholder=\"Leave blank if unchanged\" {...field} /></FormControl><FormMessage /></FormItem>\n                            )}/>\n                        </div>\n                    </div>\n\n                </CardContent>\n                <div className=\"p-6 pt-0\">\n                    <Button type=\"submit\" disabled={isSubmitting || !isDirty}>\n                        {isSubmitting && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                        Save Changes\n                    </Button>\n                </div>\n            </Card>\n        </form>\n        </Form>\n      </div>\n    </div>\n  );\n}\n    "],"names":[],"mappings":"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","debugId":null}}]
}