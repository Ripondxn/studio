{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/finance/due-payments/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { type Contract as TenancyContract } from '@/app/tenancy/contract/schema';\nimport { type LeaseContract } from '@/app/lease/contract/schema';\nimport { type Payment } from '@/app/finance/payment/schema';\nimport { type DuePayment } from './schema';\nimport { parseISO, isBefore, startOfToday, isAfter, differenceInDays } from 'date-fns';\nimport { revalidatePath } from 'next/cache';\n\nconst tenancyContractsFilePath = path.join(process.cwd(), 'src/app/tenancy/contract/contracts-data.json');\nconst leaseContractsFilePath = path.join(process.cwd(), 'src/app/lease/contract/contracts-data.json');\nconst paymentsFilePath = path.join(process.cwd(), 'src/app/finance/payment/payments-data.json');\nconst landlordsFilePath = path.join(process.cwd(), 'src/app/landlord/landlords-data.json');\n\nasync function readData(filePath: string) {\n    try {\n        const data = await fs.readFile(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            return [];\n        }\n        throw error;\n    }\n}\n\nexport async function getDuePayments(): Promise<DuePayment[]> {\n    const tenancyContracts: TenancyContract[] = await readData(tenancyContractsFilePath);\n    const leaseContracts: LeaseContract[] = await readData(leaseContractsFilePath);\n    const payments: Payment[] = await readData(paymentsFilePath);\n    const landlords: any[] = await readData(landlordsFilePath);\n\n    const landlordMap = new Map(landlords.map(l => [l.landlordData.code, l.landlordData.name]));\n\n    const paidInstallments = new Set(\n        payments.filter(p => p.referenceNo && p.status !== 'Cancelled').map(p => p.referenceNo)\n    );\n    \n    const today = startOfToday();\n    let dueItems: DuePayment[] = [];\n\n    // Process Tenancy Contracts (Receivables)\n    tenancyContracts.forEach(contract => {\n        if (!contract.paymentSchedule) return;\n\n        contract.paymentSchedule.forEach(installment => {\n            const installmentId = `${contract.contractNo}-${installment.installment}`;\n            const dueDate = parseISO(installment.dueDate);\n            let status: DuePayment['status'] = 'Upcoming';\n\n            if(paidInstallments.has(installmentId)) {\n                status = 'Paid';\n            } else if (isBefore(dueDate, today)) {\n                status = 'Overdue';\n            } else if (differenceInDays(dueDate, today) <= 30) {\n                 status = 'Due Soon';\n            }\n\n            dueItems.push({\n                id: installmentId,\n                partyType: 'Tenant',\n                partyName: contract.tenantName,\n                type: 'Receivable',\n                property: contract.property,\n                contractNo: contract.contractNo,\n                dueDate: installment.dueDate,\n                amount: installment.amount,\n                status,\n            });\n        });\n    });\n\n    // Process Lease Contracts (Payables)\n    leaseContracts.forEach(contract => {\n        if (!contract.paymentSchedule) return;\n\n        contract.paymentSchedule.forEach(installment => {\n            const installmentId = `${contract.contractNo}-${installment.installment}`;\n            const dueDate = parseISO(installment.dueDate);\n            let status: DuePayment['status'] = 'Upcoming';\n\n            if(paidInstallments.has(installmentId)) {\n                status = 'Paid';\n            } else if (isBefore(dueDate, today)) {\n                status = 'Overdue';\n            } else if (differenceInDays(dueDate, today) <= 30) {\n                 status = 'Due Soon';\n            }\n            \n            dueItems.push({\n                id: installmentId,\n                partyType: 'Landlord',\n                partyName: landlordMap.get(contract.landlordCode) || contract.landlordCode,\n                type: 'Payable',\n                property: contract.property,\n                contractNo: contract.contractNo,\n                dueDate: installment.dueDate,\n                amount: installment.amount,\n                status,\n            });\n        });\n    });\n\n    return dueItems.sort((a, b) => new Date(a.dueDate).getTime() - new Date(b.dueDate).getTime());\n}\n\nexport async function getSummary(duePayments: DuePayment[]) {\n    const summary = {\n        totalReceivable: 0,\n        totalPayable: 0,\n        overdueReceivable: 0,\n        overduePayable: 0,\n    };\n\n    for(const item of duePayments) {\n        if(item.status === 'Paid') continue;\n\n        if(item.type === 'Receivable') {\n            summary.totalReceivable += item.amount;\n            if(item.status === 'Overdue') {\n                summary.overdueReceivable += item.amount;\n            }\n        } else { // Payable\n            summary.totalPayable += item.amount;\n             if(item.status === 'Overdue') {\n                summary.overduePayable += item.amount;\n            }\n        }\n    }\n\n    return summary;\n}\n\nexport async function deleteDuePaymentInstallment(installmentId: string) {\n    try {\n        const [contractNo, installmentNo] = installmentId.split('-');\n        \n        const leaseContracts: LeaseContract[] = await readData(leaseContractsFilePath);\n        const tenancyContracts: TenancyContract[] = await readData(tenancyContractsFilePath);\n\n        let contractFound = false;\n        \n        const leaseIndex = leaseContracts.findIndex(c => c.contractNo === contractNo);\n        if (leaseIndex > -1) {\n            leaseContracts[leaseIndex].paymentSchedule = leaseContracts[leaseIndex].paymentSchedule.filter(\n                inst => inst.installment.toString() !== installmentNo\n            );\n            await fs.writeFile(leaseContractsFilePath, JSON.stringify(leaseContracts, null, 2), 'utf-8');\n            contractFound = true;\n        }\n\n        const tenancyIndex = tenancyContracts.findIndex(c => c.contractNo === contractNo);\n        if (tenancyIndex > -1) {\n            tenancyContracts[tenancyIndex].paymentSchedule = tenancyContracts[tenancyIndex].paymentSchedule.filter(\n                inst => inst.installment.toString() !== installmentNo\n            );\n            await fs.writeFile(tenancyContractsFilePath, JSON.stringify(tenancyContracts, null, 2), 'utf-8');\n            contractFound = true;\n        }\n\n        if (!contractFound) {\n            return { success: false, error: 'Could not find the source contract for this due payment.' };\n        }\n\n        revalidatePath('/finance/due-payments');\n        return { success: true };\n    } catch(error) {\n        return { success: false, error: 'Failed to delete due payment entry.' };\n    }\n}\n"],"names":[],"mappings":";;;;;;;IA6BsB,iBAAA,WAAA,GAAA,IAAA,kPAAA,EAAA,8CAAA,uOAAA,EAAA,KAAA,GAAA,6OAAA,EAAA","debugId":null}},
    {"offset": {"line": 19, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/finance/due-payments/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { type Contract as TenancyContract } from '@/app/tenancy/contract/schema';\nimport { type LeaseContract } from '@/app/lease/contract/schema';\nimport { type Payment } from '@/app/finance/payment/schema';\nimport { type DuePayment } from './schema';\nimport { parseISO, isBefore, startOfToday, isAfter, differenceInDays } from 'date-fns';\nimport { revalidatePath } from 'next/cache';\n\nconst tenancyContractsFilePath = path.join(process.cwd(), 'src/app/tenancy/contract/contracts-data.json');\nconst leaseContractsFilePath = path.join(process.cwd(), 'src/app/lease/contract/contracts-data.json');\nconst paymentsFilePath = path.join(process.cwd(), 'src/app/finance/payment/payments-data.json');\nconst landlordsFilePath = path.join(process.cwd(), 'src/app/landlord/landlords-data.json');\n\nasync function readData(filePath: string) {\n    try {\n        const data = await fs.readFile(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            return [];\n        }\n        throw error;\n    }\n}\n\nexport async function getDuePayments(): Promise<DuePayment[]> {\n    const tenancyContracts: TenancyContract[] = await readData(tenancyContractsFilePath);\n    const leaseContracts: LeaseContract[] = await readData(leaseContractsFilePath);\n    const payments: Payment[] = await readData(paymentsFilePath);\n    const landlords: any[] = await readData(landlordsFilePath);\n\n    const landlordMap = new Map(landlords.map(l => [l.landlordData.code, l.landlordData.name]));\n\n    const paidInstallments = new Set(\n        payments.filter(p => p.referenceNo && p.status !== 'Cancelled').map(p => p.referenceNo)\n    );\n    \n    const today = startOfToday();\n    let dueItems: DuePayment[] = [];\n\n    // Process Tenancy Contracts (Receivables)\n    tenancyContracts.forEach(contract => {\n        if (!contract.paymentSchedule) return;\n\n        contract.paymentSchedule.forEach(installment => {\n            const installmentId = `${contract.contractNo}-${installment.installment}`;\n            const dueDate = parseISO(installment.dueDate);\n            let status: DuePayment['status'] = 'Upcoming';\n\n            if(paidInstallments.has(installmentId)) {\n                status = 'Paid';\n            } else if (isBefore(dueDate, today)) {\n                status = 'Overdue';\n            } else if (differenceInDays(dueDate, today) <= 30) {\n                 status = 'Due Soon';\n            }\n\n            dueItems.push({\n                id: installmentId,\n                partyType: 'Tenant',\n                partyName: contract.tenantName,\n                type: 'Receivable',\n                property: contract.property,\n                contractNo: contract.contractNo,\n                dueDate: installment.dueDate,\n                amount: installment.amount,\n                status,\n            });\n        });\n    });\n\n    // Process Lease Contracts (Payables)\n    leaseContracts.forEach(contract => {\n        if (!contract.paymentSchedule) return;\n\n        contract.paymentSchedule.forEach(installment => {\n            const installmentId = `${contract.contractNo}-${installment.installment}`;\n            const dueDate = parseISO(installment.dueDate);\n            let status: DuePayment['status'] = 'Upcoming';\n\n            if(paidInstallments.has(installmentId)) {\n                status = 'Paid';\n            } else if (isBefore(dueDate, today)) {\n                status = 'Overdue';\n            } else if (differenceInDays(dueDate, today) <= 30) {\n                 status = 'Due Soon';\n            }\n            \n            dueItems.push({\n                id: installmentId,\n                partyType: 'Landlord',\n                partyName: landlordMap.get(contract.landlordCode) || contract.landlordCode,\n                type: 'Payable',\n                property: contract.property,\n                contractNo: contract.contractNo,\n                dueDate: installment.dueDate,\n                amount: installment.amount,\n                status,\n            });\n        });\n    });\n\n    return dueItems.sort((a, b) => new Date(a.dueDate).getTime() - new Date(b.dueDate).getTime());\n}\n\nexport async function getSummary(duePayments: DuePayment[]) {\n    const summary = {\n        totalReceivable: 0,\n        totalPayable: 0,\n        overdueReceivable: 0,\n        overduePayable: 0,\n    };\n\n    for(const item of duePayments) {\n        if(item.status === 'Paid') continue;\n\n        if(item.type === 'Receivable') {\n            summary.totalReceivable += item.amount;\n            if(item.status === 'Overdue') {\n                summary.overdueReceivable += item.amount;\n            }\n        } else { // Payable\n            summary.totalPayable += item.amount;\n             if(item.status === 'Overdue') {\n                summary.overduePayable += item.amount;\n            }\n        }\n    }\n\n    return summary;\n}\n\nexport async function deleteDuePaymentInstallment(installmentId: string) {\n    try {\n        const [contractNo, installmentNo] = installmentId.split('-');\n        \n        const leaseContracts: LeaseContract[] = await readData(leaseContractsFilePath);\n        const tenancyContracts: TenancyContract[] = await readData(tenancyContractsFilePath);\n\n        let contractFound = false;\n        \n        const leaseIndex = leaseContracts.findIndex(c => c.contractNo === contractNo);\n        if (leaseIndex > -1) {\n            leaseContracts[leaseIndex].paymentSchedule = leaseContracts[leaseIndex].paymentSchedule.filter(\n                inst => inst.installment.toString() !== installmentNo\n            );\n            await fs.writeFile(leaseContractsFilePath, JSON.stringify(leaseContracts, null, 2), 'utf-8');\n            contractFound = true;\n        }\n\n        const tenancyIndex = tenancyContracts.findIndex(c => c.contractNo === contractNo);\n        if (tenancyIndex > -1) {\n            tenancyContracts[tenancyIndex].paymentSchedule = tenancyContracts[tenancyIndex].paymentSchedule.filter(\n                inst => inst.installment.toString() !== installmentNo\n            );\n            await fs.writeFile(tenancyContractsFilePath, JSON.stringify(tenancyContracts, null, 2), 'utf-8');\n            contractFound = true;\n        }\n\n        if (!contractFound) {\n            return { success: false, error: 'Could not find the source contract for this due payment.' };\n        }\n\n        revalidatePath('/finance/due-payments');\n        return { success: true };\n    } catch(error) {\n        return { success: false, error: 'Failed to delete due payment entry.' };\n    }\n}\n"],"names":[],"mappings":";;;;;;;IA6GsB,aAAA,WAAA,GAAA,IAAA,kPAAA,EAAA,8CAAA,uOAAA,EAAA,KAAA,GAAA,6OAAA,EAAA","debugId":null}},
    {"offset": {"line": 34, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/badge.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n"],"names":[],"mappings":";;;;;;;AACA;AAEA;;;;AAEA,MAAM,gBAAgB,IAAA,0KAAG,EACvB,0KACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,WACE;YACF,aACE;YACF,SAAS;QACX;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAOF,SAAS,MAAM,KAA4C;QAA5C,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAmB,GAA5C;IACb,qBACE,6LAAC;QAAI,WAAW,IAAA,4HAAE,EAAC,cAAc;YAAE;QAAQ,IAAI;QAAa,GAAG,KAAK;;;;;;AAExE;KAJS","debugId":null}},
    {"offset": {"line": 83, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/checkbox.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,yBAAW,2KAAgB,MAG/B,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC,+KAAsB;QACrB,KAAK;QACL,WAAW,IAAA,4HAAE,EACX,kTACA;QAED,GAAG,KAAK;kBAET,cAAA,6LAAC,oLAA2B;YAC1B,WAAW,IAAA,4HAAE,EAAC;sBAEd,cAAA,6LAAC,gNAAK;gBAAC,WAAU;;;;;;;;;;;;;;;;;;AAIvB,SAAS,WAAW,GAAG,+KAAsB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 137, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/dialog.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,SAAS,6KAAoB;AAEnC,MAAM,gBAAgB,gLAAuB;AAE7C,MAAM,eAAe,+KAAsB;AAE3C,MAAM,cAAc,8KAAqB;AAEzC,MAAM,8BAAgB,2KAAgB,CAGpC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC,gLAAuB;QACtB,KAAK;QACL,WAAW,IAAA,4HAAE,EACX,0JACA;QAED,GAAG,KAAK;;;;;;;KAVP;AAaN,cAAc,WAAW,GAAG,gLAAuB,CAAC,WAAW;AAE/D,MAAM,8BAAgB,2KAAgB,OAGpC,QAAoC;QAAnC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO;yBAClC,6LAAC;;0BACC,6LAAC;;;;;0BACD,6LAAC,gLAAuB;gBACtB,KAAK;gBACL,WAAW,IAAA,4HAAE,EACX,+fACA;gBAED,GAAG,KAAK;;oBAER;kCACD,6LAAC,8KAAqB;wBAAC,WAAU;;0CAC/B,6LAAC,oMAAC;gCAAC,WAAU;;;;;;0CACb,6LAAC;gCAAK,WAAU;0CAAU;;;;;;;;;;;;;;;;;;;;;;;;;;AAKlC,cAAc,WAAW,GAAG,gLAAuB,CAAC,WAAW;AAE/D,MAAM,eAAe;QAAC,EACpB,SAAS,EACT,GAAG,OACkC;yBACrC,6LAAC;QACC,WAAW,IAAA,4HAAE,EACX,sDACA;QAED,GAAG,KAAK;;;;;;;MATP;AAYN,aAAa,WAAW,GAAG;AAE3B,MAAM,eAAe;QAAC,EACpB,SAAS,EACT,GAAG,OACkC;yBACrC,6LAAC;QACC,WAAW,IAAA,4HAAE,EACX,iEACA;QAED,GAAG,KAAK;;;;;;;MATP;AAYN,aAAa,WAAW,GAAG;AAE3B,MAAM,4BAAc,2KAAgB,OAGlC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC,8KAAqB;QACpB,KAAK;QACL,WAAW,IAAA,4HAAE,EACX,qDACA;QAED,GAAG,KAAK;;;;;;;;AAGb,YAAY,WAAW,GAAG,8KAAqB,CAAC,WAAW;AAE3D,MAAM,kCAAoB,2KAAgB,OAGxC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC,oLAA2B;QAC1B,KAAK;QACL,WAAW,IAAA,4HAAE,EAAC,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;;AAGb,kBAAkB,WAAW,GAAG,oLAA2B,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 314, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/input.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n"],"names":[],"mappings":";;;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,2KAAgB,MAC5B,QAAgC;QAA/B,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAO;IAC5B,qBACE,6LAAC;QACC,MAAM;QACN,WAAW,IAAA,4HAAE,EACX,kYACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAEF,MAAM,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 350, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,gBAAgB,IAAA,0KAAG,EACvB;AAGF,MAAM,sBAAQ,2KAAgB,MAI5B,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC,4KAAmB;QAClB,KAAK;QACL,WAAW,IAAA,4HAAE,EAAC,iBAAiB;QAC9B,GAAG,KAAK;;;;;;;;AAGb,MAAM,WAAW,GAAG,4KAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 391, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/textarea.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {cn} from '@/lib/utils';\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({className, ...props}, ref) => {\n    return (\n      <textarea\n        className={cn(\n          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nTextarea.displayName = 'Textarea';\n\nexport {Textarea};\n"],"names":[],"mappings":";;;;;AAAA;AAEA;;;;AAKA,MAAM,yBAAW,2KAAgB,MAC/B,QAAwB;QAAvB,EAAC,SAAS,EAAE,GAAG,OAAM;IACpB,qBACE,6LAAC;QACC,WAAW,IAAA,4HAAE,EACX,qTACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAEF,SAAS,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 426, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/finance/payment/schema.ts"],"sourcesContent":["\n\nimport { z } from 'zod';\nimport { type Role } from '@/app/workflow/types';\n\nexport const invoiceAllocationSchema = z.object({\n  invoiceId: z.string(),\n  amount: z.number(),\n});\n\nexport const billAllocationSchema = z.object({\n  billId: z.string(),\n  amount: z.number(),\n});\n\nexport const approvalHistorySchema = z.object({\n  action: z.string(),\n  actorId: z.string(),\n  actorRole: z.string(), \n  timestamp: z.string(),\n  comments: z.string().optional(),\n});\n\nexport const paymentSchema = z.object({\n  id: z.string().optional(),\n  type: z.enum(['Receipt', 'Payment']),\n  date: z.string().min(1, \"Date is required.\"),\n  partyType: z.enum(['Tenant', 'Landlord', 'Vendor', 'Customer', 'Agent']),\n  partyName: z.string().min(1, \"Party name is required.\"),\n  amount: z.number().min(0.01, \"Amount must be greater than 0.\"),\n  paymentMethod: z.enum(['Cash', 'Cheque', 'Bank Transfer', 'Card']),\n  paymentFrom: z.enum(['Bank', 'Petty Cash']).default('Bank'),\n  bankAccountId: z.string().optional(),\n  expenseAccountId: z.string().optional(),\n  maintenanceTicketId: z.string().optional(),\n  utilityAccountId: z.string().optional(),\n  property: z.string().optional(),\n  unitCode: z.string().optional(),\n  floor: z.string().optional(),\n  roomCode: z.string().optional(),\n  referenceType: z.string().optional(),\n  referenceNo: z.string().optional(),\n  description: z.string().optional(),\n  contractNo: z.string().optional(),\n  remarks: z.string().optional(),\n  status: z.enum(['Paid', 'Received', 'Cancelled']),\n  agentCode: z.string().optional(),\n  createdByUser: z.string().optional(),\n  invoiceAllocations: z.array(invoiceAllocationSchema).optional(),\n  billAllocations: z.array(billAllocationSchema).optional(),\n  currentStatus: z.enum(['DRAFT', 'PENDING_ADMIN_APPROVAL', 'PENDING_SUPER_ADMIN_APPROVAL', 'POSTED', 'REJECTED']).optional(),\n  approvalHistory: z.array(approvalHistorySchema).optional(),\n});\n\nexport type Payment = z.infer<typeof paymentSchema>;\n"],"names":[],"mappings":";;;;;;;;;;AAEA;;AAGO,MAAM,0BAA0B,0KAAC,CAAC,MAAM,CAAC;IAC9C,WAAW,0KAAC,CAAC,MAAM;IACnB,QAAQ,0KAAC,CAAC,MAAM;AAClB;AAEO,MAAM,uBAAuB,0KAAC,CAAC,MAAM,CAAC;IAC3C,QAAQ,0KAAC,CAAC,MAAM;IAChB,QAAQ,0KAAC,CAAC,MAAM;AAClB;AAEO,MAAM,wBAAwB,0KAAC,CAAC,MAAM,CAAC;IAC5C,QAAQ,0KAAC,CAAC,MAAM;IAChB,SAAS,0KAAC,CAAC,MAAM;IACjB,WAAW,0KAAC,CAAC,MAAM;IACnB,WAAW,0KAAC,CAAC,MAAM;IACnB,UAAU,0KAAC,CAAC,MAAM,GAAG,QAAQ;AAC/B;AAEO,MAAM,gBAAgB,0KAAC,CAAC,MAAM,CAAC;IACpC,IAAI,0KAAC,CAAC,MAAM,GAAG,QAAQ;IACvB,MAAM,0KAAC,CAAC,IAAI,CAAC;QAAC;QAAW;KAAU;IACnC,MAAM,0KAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IACxB,WAAW,0KAAC,CAAC,IAAI,CAAC;QAAC;QAAU;QAAY;QAAU;QAAY;KAAQ;IACvE,WAAW,0KAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC7B,QAAQ,0KAAC,CAAC,MAAM,GAAG,GAAG,CAAC,MAAM;IAC7B,eAAe,0KAAC,CAAC,IAAI,CAAC;QAAC;QAAQ;QAAU;QAAiB;KAAO;IACjE,aAAa,0KAAC,CAAC,IAAI,CAAC;QAAC;QAAQ;KAAa,EAAE,OAAO,CAAC;IACpD,eAAe,0KAAC,CAAC,MAAM,GAAG,QAAQ;IAClC,kBAAkB,0KAAC,CAAC,MAAM,GAAG,QAAQ;IACrC,qBAAqB,0KAAC,CAAC,MAAM,GAAG,QAAQ;IACxC,kBAAkB,0KAAC,CAAC,MAAM,GAAG,QAAQ;IACrC,UAAU,0KAAC,CAAC,MAAM,GAAG,QAAQ;IAC7B,UAAU,0KAAC,CAAC,MAAM,GAAG,QAAQ;IAC7B,OAAO,0KAAC,CAAC,MAAM,GAAG,QAAQ;IAC1B,UAAU,0KAAC,CAAC,MAAM,GAAG,QAAQ;IAC7B,eAAe,0KAAC,CAAC,MAAM,GAAG,QAAQ;IAClC,aAAa,0KAAC,CAAC,MAAM,GAAG,QAAQ;IAChC,aAAa,0KAAC,CAAC,MAAM,GAAG,QAAQ;IAChC,YAAY,0KAAC,CAAC,MAAM,GAAG,QAAQ;IAC/B,SAAS,0KAAC,CAAC,MAAM,GAAG,QAAQ;IAC5B,QAAQ,0KAAC,CAAC,IAAI,CAAC;QAAC;QAAQ;QAAY;KAAY;IAChD,WAAW,0KAAC,CAAC,MAAM,GAAG,QAAQ;IAC9B,eAAe,0KAAC,CAAC,MAAM,GAAG,QAAQ;IAClC,oBAAoB,0KAAC,CAAC,KAAK,CAAC,yBAAyB,QAAQ;IAC7D,iBAAiB,0KAAC,CAAC,KAAK,CAAC,sBAAsB,QAAQ;IACvD,eAAe,0KAAC,CAAC,IAAI,CAAC;QAAC;QAAS;QAA0B;QAAgC;QAAU;KAAW,EAAE,QAAQ;IACzH,iBAAiB,0KAAC,CAAC,KAAK,CAAC,uBAAuB,QAAQ;AAC1D","debugId":null}},
    {"offset": {"line": 517, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/finance/payment/actions.ts"],"sourcesContent":["\n\n'use server';\n\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { z } from 'zod';\nimport { revalidatePath } from 'next/cache';\nimport { paymentSchema, type Payment } from './schema';\nimport { type BankAccount } from '@/app/finance/banking/schema';\nimport { startOfMonth, endOfMonth, isWithinInterval, parseISO, isBefore } from 'date-fns';\nimport { applyPaymentToInvoices } from '@/app/tenancy/customer/invoice/actions';\nimport { type Contract as TenancyContract } from '@/app/tenancy/contract/schema';\nimport { type LeaseContract } from '@/app/lease/contract/schema';\nimport { type Invoice } from '@/app/tenancy/customer/invoice/schema';\nimport { type Bill } from '@/app/vendors/bill/schema';\nimport { type Cheque } from '../cheque-deposit/schema';\nimport { getWorkflowSettings } from '@/app/admin/workflow-settings/actions';\nimport { applyFinancialImpact, reverseFinancialImpact } from '@/app/workflow/actions';\nimport { type ReceiptBook } from '../book-management/schema';\n\n\nconst paymentsFilePath = path.join(process.cwd(), 'src/app/finance/payment/payments-data.json');\nconst invoicesFilePath = path.join(process.cwd(), 'src/app/tenancy/customer/invoice/invoices-data.json');\nconst billsFilePath = path.join(process.cwd(), 'src/app/vendors/bill/bills-data.json');\nconst receiptBooksFilePath = path.join(process.cwd(), 'src/app/finance/book-management/receipt-books-data.json');\nconst tenancyContractsFilePath = path.join(process.cwd(), 'src/app/tenancy/contract/contracts-data.json');\nconst leaseContractsFilePath = path.join(process.cwd(), 'src/app/lease/contract/contracts-data.json');\n\n\nasync function readData(filePath: string) {\n    try {\n        await fs.access(filePath);\n        const data = await fs.readFile(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            return [];\n        }\n        throw error;\n    }\n}\n\nasync function writeData(filePath: string, data: any) {\n    await fs.writeFile(filePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\n\nasync function readPayments(): Promise<Payment[]> {\n    return await readData(paymentsFilePath);\n}\nasync function writePayments(data: Payment[]) {\n    await fs.writeFile(paymentsFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\nasync function readInvoices(): Promise<Invoice[]> {\n    return await readData(invoicesFilePath);\n}\nasync function writeInvoices(data: Invoice[]) {\n    await fs.writeFile(invoicesFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\nasync function readBills(): Promise<Bill[]> {\n    return await readData(billsFilePath);\n}\nasync function writeBills(data: Bill[]) {\n    await fs.writeFile(billsFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\nasync function applyPaymentToBills(billPayments: { billId: string; amount: number }[], vendorCode: string) {\n    try {\n        const allBills = await readBills();\n        let utilityAccountId: string | undefined;\n\n        for (const payment of billPayments) {\n            const index = allBills.findIndex(b => b.id === payment.billId);\n            if (index !== -1) {\n                allBills[index].amountPaid = (allBills[index].amountPaid || 0) + payment.amount;\n                const remainingBalance = allBills[index].total - allBills[index].amountPaid;\n                \n                if (remainingBalance <= 0.001) {\n                    allBills[index].status = 'Paid';\n                } else if (allBills[index].status === 'Draft' || allBills[index].status === 'Overdue') {\n                    allBills[index].status = 'Sent';\n                }\n                \n                // Carry over the utilityAccountId if it exists on the bill\n                if (allBills[index].utilityAccountId) {\n                    utilityAccountId = allBills[index].utilityAccountId;\n                }\n            }\n        }\n\n        await writeBills(allBills);\n        revalidatePath(`/vendors/add?code=${vendorCode}`);\n        return { success: true, utilityAccountId };\n    } catch (error) {\n         return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n\n\nexport async function getPayments(user: { email: string; role: string; name?: string; }) {\n    const allPayments = await readPayments();\n    \n    // Filter out cancelled payments from the main view\n    const activePayments = allPayments.filter(p => p.status !== 'Cancelled');\n    \n    if (user.role === 'Admin' || user.role === 'Super Admin') {\n        return activePayments.sort((a,b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n    }\n    \n    const userPayments = activePayments.filter(p => p.createdByUser === user.name);\n\n    return userPayments.sort((a,b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n}\n\nasync function updateReceiptBookUsage(receiptNo: string) {\n    try {\n        const books = await readData(receiptBooksFilePath) as ReceiptBook[];\n        const [bookNo] = receiptNo.split('-');\n        if (!bookNo) return;\n\n        const bookIndex = books.findIndex(b => b.bookNo === bookNo);\n        if (bookIndex !== -1) {\n            books[bookIndex].leafsUsed = (books[bookIndex].leafsUsed || 0) + 1;\n             if (books[bookIndex].leafsUsed >= books[bookIndex].noOfLeafs) {\n                books[bookIndex].status = 'Finished';\n            }\n            await writeData(receiptBooksFilePath, books);\n            revalidatePath('/finance/book-management');\n        }\n    } catch (error) {\n        console.error(`Failed to update receipt book for receipt #${receiptNo}`, error);\n    }\n}\n\n\nexport async function addPayment(data: z.infer<typeof paymentSchema>) {\n    const validation = paymentSchema.safeParse(data);\n    if (!validation.success) {\n        return { success: false, error: 'Invalid data format.' };\n    }\n    \n    const paymentData = validation.data;\n\n    try {\n        const allPayments = await readPayments();\n        \n        if (paymentData.referenceNo && paymentData.referenceType !== 'Other') {\n            const isDuplicate = allPayments.some(p => \n                p.referenceNo === paymentData.referenceNo &&\n                p.status !== 'Cancelled'\n            );\n            if (isDuplicate) {\n                return { success: false, error: `A payment for reference \"${paymentData.referenceNo}\" already exists.` };\n            }\n        }\n        \n        const workflowSettings = await getWorkflowSettings();\n        const initialStatus = workflowSettings.approvalProcessEnabled ? 'DRAFT' : 'POSTED';\n        const newId = paymentData.id || `PAY-${Date.now()}`;\n\n        const newPayment: Payment = {\n            ...paymentData,\n            id: newId,\n            currentStatus: initialStatus,\n        };\n        \n        if (newPayment.type === 'Receipt' && newPayment.invoiceAllocations && newPayment.invoiceAllocations.length > 0) {\n            await applyPaymentToInvoices(newPayment.invoiceAllocations, newPayment.partyName);\n        }\n\n        if (newPayment.type === 'Payment' && newPayment.billAllocations && newPayment.billAllocations.length > 0) {\n            const billResult = await applyPaymentToBills(newPayment.billAllocations, newPayment.partyName);\n            if (billResult.utilityAccountId) {\n                newPayment.utilityAccountId = billResult.utilityAccountId;\n            }\n        }\n        \n        // If it's a DRAFT, the approval history will be added upon submission.\n        if (initialStatus === 'POSTED') {\n            newPayment.approvalHistory = [{\n                action: 'Created & Auto-Posted',\n                actorId: paymentData.createdByUser || 'System',\n                actorRole: 'User',\n                timestamp: new Date().toISOString(),\n                comments: 'Directly recorded transaction.',\n            }];\n            await applyFinancialImpact(newPayment);\n        }\n        \n        if (newPayment.referenceType === 'Receipt Book' && newPayment.referenceNo) {\n            await updateReceiptBookUsage(newPayment.referenceNo);\n        }\n        \n        allPayments.push(newPayment);\n        await writePayments(allPayments);\n        \n        revalidateAllPaths(newPayment);\n        return { success: true, data: newPayment };\n\n    } catch (error) {\n        return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n\n\nexport async function cancelPayment(paymentId: string) {\n    try {\n        const allPayments = await readPayments();\n        const paymentIndex = allPayments.findIndex(p => p.id === paymentId);\n\n        if (paymentIndex === -1) {\n            return { success: false, error: 'Payment not found.' };\n        }\n        \n        const paymentToCancel = allPayments[paymentIndex];\n\n        if(paymentToCancel.status === 'Cancelled') {\n            return { success: false, error: 'Payment is already cancelled.'};\n        }\n        \n        if(paymentToCancel.currentStatus === 'POSTED') {\n           await reverseFinancialImpact(paymentToCancel);\n        }\n        \n        allPayments[paymentIndex].status = 'Cancelled';\n        await writePayments(allPayments);\n\n        revalidateAllPaths(paymentToCancel);\n        return { success: true };\n    } catch (error) {\n        return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n\nexport async function restorePayment(paymentId: string) {\n    try {\n        const allPayments = await readPayments();\n        const paymentIndex = allPayments.findIndex(p => p.id === paymentId);\n\n        if (paymentIndex === -1) {\n            return { success: false, error: 'Payment not found.' };\n        }\n        \n        const paymentToRestore = allPayments[paymentIndex];\n\n        if(paymentToRestore.status !== 'Cancelled') {\n            return { success: false, error: 'Payment is not cancelled.'};\n        }\n        \n        if(paymentToRestore.currentStatus === 'POSTED') {\n           await applyFinancialImpact(paymentToRestore);\n        }\n        \n        // Restore to a sensible previous state\n        paymentToRestore.status = paymentToRestore.type === 'Payment' ? 'Paid' : 'Received';\n        await writePayments(allPayments);\n\n        revalidateAllPaths(paymentToRestore);\n        return { success: true };\n    } catch (error) {\n        return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n\n// Keeping this function for hard deletes (e.g. of draft transactions) if needed later\nexport async function deletePayment(paymentId: string) {\n    try {\n        const allPayments = await readPayments();\n        const paymentToDelete = allPayments.find(p => p.id === paymentId);\n\n        if (!paymentToDelete) {\n            return { success: false, error: 'Payment not found.' };\n        }\n        \n        if(paymentToDelete.currentStatus === 'POSTED') {\n            await reverseFinancialImpact(paymentToDelete);\n        }\n        \n        const updatedPayments = allPayments.filter(p => p.id !== paymentId);\n        await writePayments(updatedPayments);\n\n       revalidateAllPaths(paymentToDelete);\n\n        return { success: true };\n    } catch (error) {\n        return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n\n\nfunction revalidateAllPaths(payment: Payment) {\n    revalidatePath('/finance/payment');\n    revalidatePath('/finance/banking');\n    revalidatePath('/finance/chart-of-accounts');\n    revalidatePath('/vendors/agents');\n    revalidatePath('/workflow');\n    revalidatePath(`/tenancy/customer/add?code=${payment.partyName}`);\n    revalidatePath(`/vendors/add?code=${payment.partyName}`);\n}\n\nexport async function getPartyNameLookups(): Promise<Record<string, string>> {\n    // This function can be moved to a central lookup file to avoid duplication\n    // For now, keeping it here to fix the immediate issue.\n    const tenants: {tenantData: any}[] = await readData(path.join(process.cwd(), 'src/app/tenancy/tenants/tenants-data.json'));\n    const landlords: {landlordData: any}[] = await readData(path.join(process.cwd(), 'src/app/landlord/landlords-data.json'));\n    const vendors: {vendorData: any}[] = await readData(path.join(process.cwd(), 'src/app/vendors/vendors-data.json'));\n    const agents: any[] = await readData(path.join(process.cwd(), 'src/app/vendors/agents/agents-data.json'));\n    const customers: {customerData: any}[] = await readData(path.join(process.cwd(), 'src/app/tenancy/customer/customers-data.json'));\n\n    const lookups: Record<string, string> = {};\n\n    tenants.forEach(t => {\n        if(t.tenantData.code) lookups[t.tenantData.code] = t.tenantData.name;\n    });\n    landlords.forEach(l => {\n        if(l.landlordData.code) lookups[l.landlordData.code] = l.landlordData.name;\n    });\n    vendors.forEach(v => {\n        if(v.vendorData.code) lookups[v.vendorData.code] = v.vendorData.name;\n    });\n     agents.forEach(a => {\n        if(a.code) lookups[a.code] = a.name;\n    });\n    customers.forEach(c => {\n        if(c.customerData.code) lookups[c.customerData.code] = c.customerData.name;\n    });\n\n    return lookups;\n}\n\n\nexport async function getSummary() {\n    const payments = await readPayments();\n    const now = new Date();\n    const startOfThisMonth = startOfMonth(now);\n    const endOfThisMonth = endOfMonth(now);\n\n    const summary = {\n        totalReceivedThisMonth: 0,\n        totalPaidThisMonth: 0,\n    };\n\n    for (const payment of payments) {\n        if(payment.currentStatus !== 'POSTED') continue; \n\n        const paymentDate = parseISO(payment.date);\n        if (isWithinInterval(paymentDate, { start: startOfThisMonth, end: endOfThisMonth })) {\n            if (payment.type === 'Receipt') {\n                summary.totalReceivedThisMonth += payment.amount;\n            } else if (payment.type === 'Payment') {\n                summary.totalPaidThisMonth += payment.amount;\n            }\n        }\n    }\n    \n    return summary;\n}\n\nexport async function getNextPaymentVoucherNumber() {\n    const payments = await readPayments();\n    const paymentVouchers = payments.filter(p => p.type === 'Payment');\n    if (paymentVouchers.length === 0) {\n        return 'PV-00001';\n    }\n    const lastVoucherNo = paymentVouchers.reduce((max, p) => {\n        const currentNum = parseInt(p.voucherNo.split('-')[1], 10);\n        return currentNum > max ? currentNum : max;\n    }, 0);\n    return `PV-${(lastVoucherNo + 1).toString().padStart(5, '0')}`;\n}\n\nexport async function getReferences(partyType: string, partyName: string, referenceType: string, paymentType: string, collectorName?: string) {\n    if (!partyType || !partyName || !referenceType) return [];\n    \n    const allPayments = await readPayments();\n    const paidRefs = new Set(allPayments.filter(p => p.status !== 'Cancelled').map(p => p.referenceNo));\n    \n    let references: { value: string, label: string, amount?: number, propertyCode?: string, unitCode?: string, roomCode?: string, partitionCode?: string, book?: any }[] = [];\n    \n    if (paymentType === 'Receipt') {\n        if (referenceType === 'Tenancy Contract') {\n            const contracts = await readData(tenancyContractsFilePath);\n            references = contracts\n                .filter((c: TenancyContract) => c.tenantCode === partyName)\n                .map((c: TenancyContract) => ({\n                    value: c.contractNo,\n                    label: `Contract: ${c.contractNo} (Property: ${c.property})`,\n                    amount: c.totalRent,\n                    propertyCode: c.property,\n                    unitCode: c.unitCode,\n                    roomCode: c.roomCode,\n                }));\n        } else if (referenceType === 'Invoice') {\n            const invoices = await readData(invoicesFilePath);\n            references = invoices\n                .filter((i: Invoice) => i.customerCode === partyName && i.status !== 'Paid' && i.status !== 'Cancelled')\n                .map((i: Invoice) => ({\n                    value: i.invoiceNo,\n                    label: `Invoice: ${i.invoiceNo} (Due: ${i.dueDate}, Bal: ${i.total - (i.amountPaid || 0)})`,\n                    amount: i.total - (i.amountPaid || 0),\n                    propertyCode: i.property,\n                    unitCode: i.unitCode,\n                    roomCode: i.roomCode,\n                }));\n        } else if (referenceType === 'Receipt Book') {\n            const books = await readData(receiptBooksFilePath);\n            books.forEach((book: ReceiptBook) => {\n                if(book.status === 'Active' && (!book.assignedTo || book.assignedTo === collectorName)) {\n                     for (let i = book.receiptStartNo; i <= book.receiptEndNo; i++) {\n                        const receiptNo = `${book.bookNo}-${i}`;\n                        if (!paidRefs.has(receiptNo)) {\n                            references.push({\n                                value: receiptNo,\n                                label: `Book: ${book.bookNo}, Receipt: ${i}`,\n                                book: book,\n                            });\n                        }\n                    }\n                }\n            });\n        }\n    } else { // Payment\n        if (referenceType === 'Lease Contract') {\n             const contracts = await readData(leaseContractsFilePath);\n             references = contracts\n                .filter((c: LeaseContract) => c.landlordCode === partyName)\n                .map((c: LeaseContract) => ({\n                    value: c.contractNo,\n                    label: `Lease: ${c.contractNo} (Property: ${c.property})`,\n                    amount: c.totalRent,\n                    propertyCode: c.property,\n                }));\n        } else if (referenceType === 'Bill') {\n            const bills = await readData(billsFilePath);\n            references = bills\n                .filter((b: Bill) => b.vendorCode === partyName && b.status !== 'Paid' && b.status !== 'Cancelled')\n                .map((b: Bill) => ({\n                    value: b.billNo,\n                    label: `Bill: ${b.billNo} (Due: ${b.dueDate}, Bal: ${b.total - (b.amountPaid || 0)})`,\n                    amount: b.total - (b.amountPaid || 0),\n                    propertyCode: b.property,\n                    unitCode: b.unitCode,\n                    roomCode: b.roomCode,\n                }));\n        }\n    }\n    \n    return references;\n}\n"],"names":[],"mappings":";;;;;;;IA0IsB,aAAA,WAAA,GAAA,IAAA,kPAAA,EAAA,8CAAA,uOAAA,EAAA,KAAA,GAAA,6OAAA,EAAA","debugId":null}},
    {"offset": {"line": 532, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/finance/payment/actions.ts"],"sourcesContent":["\n\n'use server';\n\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { z } from 'zod';\nimport { revalidatePath } from 'next/cache';\nimport { paymentSchema, type Payment } from './schema';\nimport { type BankAccount } from '@/app/finance/banking/schema';\nimport { startOfMonth, endOfMonth, isWithinInterval, parseISO, isBefore } from 'date-fns';\nimport { applyPaymentToInvoices } from '@/app/tenancy/customer/invoice/actions';\nimport { type Contract as TenancyContract } from '@/app/tenancy/contract/schema';\nimport { type LeaseContract } from '@/app/lease/contract/schema';\nimport { type Invoice } from '@/app/tenancy/customer/invoice/schema';\nimport { type Bill } from '@/app/vendors/bill/schema';\nimport { type Cheque } from '../cheque-deposit/schema';\nimport { getWorkflowSettings } from '@/app/admin/workflow-settings/actions';\nimport { applyFinancialImpact, reverseFinancialImpact } from '@/app/workflow/actions';\nimport { type ReceiptBook } from '../book-management/schema';\n\n\nconst paymentsFilePath = path.join(process.cwd(), 'src/app/finance/payment/payments-data.json');\nconst invoicesFilePath = path.join(process.cwd(), 'src/app/tenancy/customer/invoice/invoices-data.json');\nconst billsFilePath = path.join(process.cwd(), 'src/app/vendors/bill/bills-data.json');\nconst receiptBooksFilePath = path.join(process.cwd(), 'src/app/finance/book-management/receipt-books-data.json');\nconst tenancyContractsFilePath = path.join(process.cwd(), 'src/app/tenancy/contract/contracts-data.json');\nconst leaseContractsFilePath = path.join(process.cwd(), 'src/app/lease/contract/contracts-data.json');\n\n\nasync function readData(filePath: string) {\n    try {\n        await fs.access(filePath);\n        const data = await fs.readFile(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            return [];\n        }\n        throw error;\n    }\n}\n\nasync function writeData(filePath: string, data: any) {\n    await fs.writeFile(filePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\n\nasync function readPayments(): Promise<Payment[]> {\n    return await readData(paymentsFilePath);\n}\nasync function writePayments(data: Payment[]) {\n    await fs.writeFile(paymentsFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\nasync function readInvoices(): Promise<Invoice[]> {\n    return await readData(invoicesFilePath);\n}\nasync function writeInvoices(data: Invoice[]) {\n    await fs.writeFile(invoicesFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\nasync function readBills(): Promise<Bill[]> {\n    return await readData(billsFilePath);\n}\nasync function writeBills(data: Bill[]) {\n    await fs.writeFile(billsFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\nasync function applyPaymentToBills(billPayments: { billId: string; amount: number }[], vendorCode: string) {\n    try {\n        const allBills = await readBills();\n        let utilityAccountId: string | undefined;\n\n        for (const payment of billPayments) {\n            const index = allBills.findIndex(b => b.id === payment.billId);\n            if (index !== -1) {\n                allBills[index].amountPaid = (allBills[index].amountPaid || 0) + payment.amount;\n                const remainingBalance = allBills[index].total - allBills[index].amountPaid;\n                \n                if (remainingBalance <= 0.001) {\n                    allBills[index].status = 'Paid';\n                } else if (allBills[index].status === 'Draft' || allBills[index].status === 'Overdue') {\n                    allBills[index].status = 'Sent';\n                }\n                \n                // Carry over the utilityAccountId if it exists on the bill\n                if (allBills[index].utilityAccountId) {\n                    utilityAccountId = allBills[index].utilityAccountId;\n                }\n            }\n        }\n\n        await writeBills(allBills);\n        revalidatePath(`/vendors/add?code=${vendorCode}`);\n        return { success: true, utilityAccountId };\n    } catch (error) {\n         return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n\n\nexport async function getPayments(user: { email: string; role: string; name?: string; }) {\n    const allPayments = await readPayments();\n    \n    // Filter out cancelled payments from the main view\n    const activePayments = allPayments.filter(p => p.status !== 'Cancelled');\n    \n    if (user.role === 'Admin' || user.role === 'Super Admin') {\n        return activePayments.sort((a,b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n    }\n    \n    const userPayments = activePayments.filter(p => p.createdByUser === user.name);\n\n    return userPayments.sort((a,b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n}\n\nasync function updateReceiptBookUsage(receiptNo: string) {\n    try {\n        const books = await readData(receiptBooksFilePath) as ReceiptBook[];\n        const [bookNo] = receiptNo.split('-');\n        if (!bookNo) return;\n\n        const bookIndex = books.findIndex(b => b.bookNo === bookNo);\n        if (bookIndex !== -1) {\n            books[bookIndex].leafsUsed = (books[bookIndex].leafsUsed || 0) + 1;\n             if (books[bookIndex].leafsUsed >= books[bookIndex].noOfLeafs) {\n                books[bookIndex].status = 'Finished';\n            }\n            await writeData(receiptBooksFilePath, books);\n            revalidatePath('/finance/book-management');\n        }\n    } catch (error) {\n        console.error(`Failed to update receipt book for receipt #${receiptNo}`, error);\n    }\n}\n\n\nexport async function addPayment(data: z.infer<typeof paymentSchema>) {\n    const validation = paymentSchema.safeParse(data);\n    if (!validation.success) {\n        return { success: false, error: 'Invalid data format.' };\n    }\n    \n    const paymentData = validation.data;\n\n    try {\n        const allPayments = await readPayments();\n        \n        if (paymentData.referenceNo && paymentData.referenceType !== 'Other') {\n            const isDuplicate = allPayments.some(p => \n                p.referenceNo === paymentData.referenceNo &&\n                p.status !== 'Cancelled'\n            );\n            if (isDuplicate) {\n                return { success: false, error: `A payment for reference \"${paymentData.referenceNo}\" already exists.` };\n            }\n        }\n        \n        const workflowSettings = await getWorkflowSettings();\n        const initialStatus = workflowSettings.approvalProcessEnabled ? 'DRAFT' : 'POSTED';\n        const newId = paymentData.id || `PAY-${Date.now()}`;\n\n        const newPayment: Payment = {\n            ...paymentData,\n            id: newId,\n            currentStatus: initialStatus,\n        };\n        \n        if (newPayment.type === 'Receipt' && newPayment.invoiceAllocations && newPayment.invoiceAllocations.length > 0) {\n            await applyPaymentToInvoices(newPayment.invoiceAllocations, newPayment.partyName);\n        }\n\n        if (newPayment.type === 'Payment' && newPayment.billAllocations && newPayment.billAllocations.length > 0) {\n            const billResult = await applyPaymentToBills(newPayment.billAllocations, newPayment.partyName);\n            if (billResult.utilityAccountId) {\n                newPayment.utilityAccountId = billResult.utilityAccountId;\n            }\n        }\n        \n        // If it's a DRAFT, the approval history will be added upon submission.\n        if (initialStatus === 'POSTED') {\n            newPayment.approvalHistory = [{\n                action: 'Created & Auto-Posted',\n                actorId: paymentData.createdByUser || 'System',\n                actorRole: 'User',\n                timestamp: new Date().toISOString(),\n                comments: 'Directly recorded transaction.',\n            }];\n            await applyFinancialImpact(newPayment);\n        }\n        \n        if (newPayment.referenceType === 'Receipt Book' && newPayment.referenceNo) {\n            await updateReceiptBookUsage(newPayment.referenceNo);\n        }\n        \n        allPayments.push(newPayment);\n        await writePayments(allPayments);\n        \n        revalidateAllPaths(newPayment);\n        return { success: true, data: newPayment };\n\n    } catch (error) {\n        return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n\n\nexport async function cancelPayment(paymentId: string) {\n    try {\n        const allPayments = await readPayments();\n        const paymentIndex = allPayments.findIndex(p => p.id === paymentId);\n\n        if (paymentIndex === -1) {\n            return { success: false, error: 'Payment not found.' };\n        }\n        \n        const paymentToCancel = allPayments[paymentIndex];\n\n        if(paymentToCancel.status === 'Cancelled') {\n            return { success: false, error: 'Payment is already cancelled.'};\n        }\n        \n        if(paymentToCancel.currentStatus === 'POSTED') {\n           await reverseFinancialImpact(paymentToCancel);\n        }\n        \n        allPayments[paymentIndex].status = 'Cancelled';\n        await writePayments(allPayments);\n\n        revalidateAllPaths(paymentToCancel);\n        return { success: true };\n    } catch (error) {\n        return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n\nexport async function restorePayment(paymentId: string) {\n    try {\n        const allPayments = await readPayments();\n        const paymentIndex = allPayments.findIndex(p => p.id === paymentId);\n\n        if (paymentIndex === -1) {\n            return { success: false, error: 'Payment not found.' };\n        }\n        \n        const paymentToRestore = allPayments[paymentIndex];\n\n        if(paymentToRestore.status !== 'Cancelled') {\n            return { success: false, error: 'Payment is not cancelled.'};\n        }\n        \n        if(paymentToRestore.currentStatus === 'POSTED') {\n           await applyFinancialImpact(paymentToRestore);\n        }\n        \n        // Restore to a sensible previous state\n        paymentToRestore.status = paymentToRestore.type === 'Payment' ? 'Paid' : 'Received';\n        await writePayments(allPayments);\n\n        revalidateAllPaths(paymentToRestore);\n        return { success: true };\n    } catch (error) {\n        return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n\n// Keeping this function for hard deletes (e.g. of draft transactions) if needed later\nexport async function deletePayment(paymentId: string) {\n    try {\n        const allPayments = await readPayments();\n        const paymentToDelete = allPayments.find(p => p.id === paymentId);\n\n        if (!paymentToDelete) {\n            return { success: false, error: 'Payment not found.' };\n        }\n        \n        if(paymentToDelete.currentStatus === 'POSTED') {\n            await reverseFinancialImpact(paymentToDelete);\n        }\n        \n        const updatedPayments = allPayments.filter(p => p.id !== paymentId);\n        await writePayments(updatedPayments);\n\n       revalidateAllPaths(paymentToDelete);\n\n        return { success: true };\n    } catch (error) {\n        return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n\n\nfunction revalidateAllPaths(payment: Payment) {\n    revalidatePath('/finance/payment');\n    revalidatePath('/finance/banking');\n    revalidatePath('/finance/chart-of-accounts');\n    revalidatePath('/vendors/agents');\n    revalidatePath('/workflow');\n    revalidatePath(`/tenancy/customer/add?code=${payment.partyName}`);\n    revalidatePath(`/vendors/add?code=${payment.partyName}`);\n}\n\nexport async function getPartyNameLookups(): Promise<Record<string, string>> {\n    // This function can be moved to a central lookup file to avoid duplication\n    // For now, keeping it here to fix the immediate issue.\n    const tenants: {tenantData: any}[] = await readData(path.join(process.cwd(), 'src/app/tenancy/tenants/tenants-data.json'));\n    const landlords: {landlordData: any}[] = await readData(path.join(process.cwd(), 'src/app/landlord/landlords-data.json'));\n    const vendors: {vendorData: any}[] = await readData(path.join(process.cwd(), 'src/app/vendors/vendors-data.json'));\n    const agents: any[] = await readData(path.join(process.cwd(), 'src/app/vendors/agents/agents-data.json'));\n    const customers: {customerData: any}[] = await readData(path.join(process.cwd(), 'src/app/tenancy/customer/customers-data.json'));\n\n    const lookups: Record<string, string> = {};\n\n    tenants.forEach(t => {\n        if(t.tenantData.code) lookups[t.tenantData.code] = t.tenantData.name;\n    });\n    landlords.forEach(l => {\n        if(l.landlordData.code) lookups[l.landlordData.code] = l.landlordData.name;\n    });\n    vendors.forEach(v => {\n        if(v.vendorData.code) lookups[v.vendorData.code] = v.vendorData.name;\n    });\n     agents.forEach(a => {\n        if(a.code) lookups[a.code] = a.name;\n    });\n    customers.forEach(c => {\n        if(c.customerData.code) lookups[c.customerData.code] = c.customerData.name;\n    });\n\n    return lookups;\n}\n\n\nexport async function getSummary() {\n    const payments = await readPayments();\n    const now = new Date();\n    const startOfThisMonth = startOfMonth(now);\n    const endOfThisMonth = endOfMonth(now);\n\n    const summary = {\n        totalReceivedThisMonth: 0,\n        totalPaidThisMonth: 0,\n    };\n\n    for (const payment of payments) {\n        if(payment.currentStatus !== 'POSTED') continue; \n\n        const paymentDate = parseISO(payment.date);\n        if (isWithinInterval(paymentDate, { start: startOfThisMonth, end: endOfThisMonth })) {\n            if (payment.type === 'Receipt') {\n                summary.totalReceivedThisMonth += payment.amount;\n            } else if (payment.type === 'Payment') {\n                summary.totalPaidThisMonth += payment.amount;\n            }\n        }\n    }\n    \n    return summary;\n}\n\nexport async function getNextPaymentVoucherNumber() {\n    const payments = await readPayments();\n    const paymentVouchers = payments.filter(p => p.type === 'Payment');\n    if (paymentVouchers.length === 0) {\n        return 'PV-00001';\n    }\n    const lastVoucherNo = paymentVouchers.reduce((max, p) => {\n        const currentNum = parseInt(p.voucherNo.split('-')[1], 10);\n        return currentNum > max ? currentNum : max;\n    }, 0);\n    return `PV-${(lastVoucherNo + 1).toString().padStart(5, '0')}`;\n}\n\nexport async function getReferences(partyType: string, partyName: string, referenceType: string, paymentType: string, collectorName?: string) {\n    if (!partyType || !partyName || !referenceType) return [];\n    \n    const allPayments = await readPayments();\n    const paidRefs = new Set(allPayments.filter(p => p.status !== 'Cancelled').map(p => p.referenceNo));\n    \n    let references: { value: string, label: string, amount?: number, propertyCode?: string, unitCode?: string, roomCode?: string, partitionCode?: string, book?: any }[] = [];\n    \n    if (paymentType === 'Receipt') {\n        if (referenceType === 'Tenancy Contract') {\n            const contracts = await readData(tenancyContractsFilePath);\n            references = contracts\n                .filter((c: TenancyContract) => c.tenantCode === partyName)\n                .map((c: TenancyContract) => ({\n                    value: c.contractNo,\n                    label: `Contract: ${c.contractNo} (Property: ${c.property})`,\n                    amount: c.totalRent,\n                    propertyCode: c.property,\n                    unitCode: c.unitCode,\n                    roomCode: c.roomCode,\n                }));\n        } else if (referenceType === 'Invoice') {\n            const invoices = await readData(invoicesFilePath);\n            references = invoices\n                .filter((i: Invoice) => i.customerCode === partyName && i.status !== 'Paid' && i.status !== 'Cancelled')\n                .map((i: Invoice) => ({\n                    value: i.invoiceNo,\n                    label: `Invoice: ${i.invoiceNo} (Due: ${i.dueDate}, Bal: ${i.total - (i.amountPaid || 0)})`,\n                    amount: i.total - (i.amountPaid || 0),\n                    propertyCode: i.property,\n                    unitCode: i.unitCode,\n                    roomCode: i.roomCode,\n                }));\n        } else if (referenceType === 'Receipt Book') {\n            const books = await readData(receiptBooksFilePath);\n            books.forEach((book: ReceiptBook) => {\n                if(book.status === 'Active' && (!book.assignedTo || book.assignedTo === collectorName)) {\n                     for (let i = book.receiptStartNo; i <= book.receiptEndNo; i++) {\n                        const receiptNo = `${book.bookNo}-${i}`;\n                        if (!paidRefs.has(receiptNo)) {\n                            references.push({\n                                value: receiptNo,\n                                label: `Book: ${book.bookNo}, Receipt: ${i}`,\n                                book: book,\n                            });\n                        }\n                    }\n                }\n            });\n        }\n    } else { // Payment\n        if (referenceType === 'Lease Contract') {\n             const contracts = await readData(leaseContractsFilePath);\n             references = contracts\n                .filter((c: LeaseContract) => c.landlordCode === partyName)\n                .map((c: LeaseContract) => ({\n                    value: c.contractNo,\n                    label: `Lease: ${c.contractNo} (Property: ${c.property})`,\n                    amount: c.totalRent,\n                    propertyCode: c.property,\n                }));\n        } else if (referenceType === 'Bill') {\n            const bills = await readData(billsFilePath);\n            references = bills\n                .filter((b: Bill) => b.vendorCode === partyName && b.status !== 'Paid' && b.status !== 'Cancelled')\n                .map((b: Bill) => ({\n                    value: b.billNo,\n                    label: `Bill: ${b.billNo} (Due: ${b.dueDate}, Bal: ${b.total - (b.amountPaid || 0)})`,\n                    amount: b.total - (b.amountPaid || 0),\n                    propertyCode: b.property,\n                    unitCode: b.unitCode,\n                    roomCode: b.roomCode,\n                }));\n        }\n    }\n    \n    return references;\n}\n"],"names":[],"mappings":";;;;;;;IAsXsB,gBAAA,WAAA,GAAA,IAAA,kPAAA,EAAA,8CAAA,uOAAA,EAAA,KAAA,GAAA,6OAAA,EAAA","debugId":null}},
    {"offset": {"line": 547, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/lookups/actions.ts"],"sourcesContent":["\n\n'use server';\n\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { type Tenant } from '@/app/tenancy/tenants/schema';\nimport { type Landlord } from '@/app/landlord/schema';\nimport { type Vendor } from '@/app/vendors/schema';\nimport { type Agent } from '@/app/vendors/agents/schema';\nimport { type Customer } from '@/app/tenancy/customer/schema';\nimport { type BankAccount } from '@/app/finance/banking/schema';\nimport { type Property } from '@/app/property/properties/list/schema';\nimport { type Unit } from '@/app/property/units/schema';\nimport { type Room } from '@/app/property/rooms/schema';\nimport { type Partition } from '@/app/property/partitions/schema';\nimport { type ReceiptBook } from '@/app/finance/book-management/schema';\nimport { type Product } from '@/app/products/schema';\nimport { type MaintenanceTicket } from '@/app/maintenance/ticket-issue/schema';\nimport { type Account } from '@/app/finance/chart-of-accounts/schema';\n\n\nasync function readData<T>(filePath: string, defaultValue: T[] = []): Promise<T[]> {\n    try {\n        await fs.access(filePath);\n        const data = await fs.readFile(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            await fs.writeFile(filePath, JSON.stringify(defaultValue, null, 2), 'utf-8');\n            return defaultValue;\n        }\n        throw error;\n    }\n}\n\nexport async function getLookups() {\n    const tenantsData: {tenantData: Tenant}[] = await readData(path.join(process.cwd(), 'src/app/tenancy/tenants/tenants-data.json'));\n    const landlordsData: {landlordData: Landlord}[] = await readData(path.join(process.cwd(), 'src/app/landlord/landlords-data.json'));\n    const vendorsData: {vendorData: Vendor}[] = await readData(path.join(process.cwd(), 'src/app/vendors/vendors-data.json'));\n    const agentsData: Agent[] = await readData(path.join(process.cwd(), 'src/app/vendors/agents/agents-data.json'));\n    const customersData: {customerData: Customer}[] = await readData(path.join(process.cwd(), 'src/app/tenancy/customer/customers-data.json'));\n    const bankAccountsData: BankAccount[] = await readData(path.join(process.cwd(), 'src/app/finance/banking/accounts-data.json'));\n    const usersData: any[] = await readData(path.join(process.cwd(), 'src/app/admin/user-roles/users.json'));\n    const receiptBooksData: ReceiptBook[] = await readData(path.join(process.cwd(), 'src/app/finance/book-management/receipt-books-data.json'));\n    const propertiesData: {propertyData: Property}[] = await readData(path.join(process.cwd(), 'src/app/property/properties/list/properties-data.json'));\n    const unitsData: Unit[] = await readData(path.join(process.cwd(), 'src/app/property/units/units-data.json'));\n    const roomsData: Room[] = await readData(path.join(process.cwd(), 'src/app/property/rooms/rooms-data.json'));\n    const productsData: Product[] = await readData(path.join(process.cwd(), 'src/app/products/products-data.json'));\n    const maintenanceTicketsData: MaintenanceTicket[] = await readData(path.join(process.cwd(), 'src/app/maintenance/ticket-issue/tickets-data.json'));\n    const expenseAccountsData: Account[] = await readData(path.join(process.cwd(), 'src/app/finance/chart-of-accounts/accounts.json'));\n\n\n    return {\n        tenants: tenantsData.map(t => ({ value: t.tenantData.code, label: t.tenantData.name })),\n        landlords: landlordsData.map(l => ({ value: l.landlordData.code, label: l.landlordData.name })),\n        vendors: vendorsData.map(v => ({ value: v.vendorData.code, label: v.vendorData.name })),\n        agents: agentsData.map(a => ({ value: a.code, label: a.name })),\n        customers: customersData.map(c => ({ value: c.customerData.code, label: c.customerData.name })),\n        bankAccounts: bankAccountsData.map(b => ({ value: b.id, label: `${b.accountName} (${b.bankName})`})),\n        users: usersData.map((u: any) => ({ value: u.name, label: u.name })),\n        receiptBooks: receiptBooksData,\n        properties: propertiesData.map(p => ({ value: p.propertyData.code, label: p.propertyData.name })),\n        units: unitsData.map(u => ({ value: u.unitCode, label: u.unitCode, propertyCode: u.propertyCode })),\n        rooms: roomsData.map(r => ({ value: r.roomCode, label: r.roomCode, propertyCode: r.propertyCode, unitCode: r.unitCode })),\n        products: productsData,\n        maintenanceTickets: maintenanceTicketsData\n            .filter(t => t.status !== 'Completed' && t.status !== 'Cancelled')\n            .map(t => ({ value: t.id, label: `${t.ticketNo} - ${t.issueType}` })),\n        expenseAccounts: expenseAccountsData\n            .filter(acc => acc.type === 'Expense' && !acc.isGroup)\n            .map(acc => ({ value: acc.code, label: `${acc.name} (${acc.code})` })),\n    }\n}\n\n\nexport async function getExpenseAccounts(): Promise<{ value: string; label: string }[]> {\n    const accounts: Account[] = await readData(path.join(process.cwd(), 'src/app/finance/chart-of-accounts/accounts.json'));\n    return accounts\n        .filter(acc => acc.type === 'Expense' && !acc.isGroup)\n        .map(acc => ({ value: acc.code, label: `${acc.name} (${acc.code})` }));\n}\n\n"],"names":[],"mappings":";;;;;;;IAoCsB,aAAA,WAAA,GAAA,IAAA,kPAAA,EAAA,8CAAA,uOAAA,EAAA,KAAA,GAAA,6OAAA,EAAA","debugId":null}},
    {"offset": {"line": 562, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/finance/chart-of-accounts/lookups.ts"],"sourcesContent":["\n\n'use server';\n\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { type Account } from './schema';\n\nconst accountsFilePath = path.join(process.cwd(), 'src/app/finance/chart-of-accounts/accounts.json');\n\nasync function readData<T>(filePath: string, defaultValue: T[] = []): Promise<T[]> {\n    try {\n        await fs.access(filePath);\n        const data = await fs.readFile(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            await fs.writeFile(filePath, JSON.stringify(defaultValue, null, 2), 'utf-8');\n            return defaultValue;\n        }\n        throw error;\n    }\n}\n\nexport async function getExpenseAccounts(): Promise<{ value: string; label: string }[]> {\n    const accounts: Account[] = await readData(accountsFilePath);\n    return accounts\n        .filter(acc => acc.type === 'Expense' && !acc.isGroup)\n        .map(acc => ({ value: acc.code, label: `${acc.name} (${acc.code})` }));\n}\n\nexport async function getRevenueAccounts(): Promise<{ value: string; label: string }[]> {\n    const accounts: Account[] = await readData(accountsFilePath);\n    return accounts\n        .filter(acc => acc.type === 'Revenue' && !acc.isGroup)\n        .map(acc => ({ value: acc.code, label: `${acc.name} (${acc.code})` }));\n}\n"],"names":[],"mappings":";;;;;;;IAwBsB,qBAAA,WAAA,GAAA,IAAA,kPAAA,EAAA,8CAAA,uOAAA,EAAA,KAAA,GAAA,6OAAA,EAAA","debugId":null}},
    {"offset": {"line": 577, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/command.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\ninterface CommandDialogProps extends DialogProps {}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none aria-selected:bg-accent aria-selected:text-accent-foreground data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAEA;AAEA;AACA;AAEA;AACA;AARA;;;;;;;AAUA,MAAM,wBAAU,2KAAgB,CAG9B,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC,oJAAgB;QACf,KAAK;QACL,WAAW,IAAA,4HAAE,EACX,6FACA;QAED,GAAG,KAAK;;;;;;;KAVP;AAaN,QAAQ,WAAW,GAAG,oJAAgB,CAAC,WAAW;AAIlD,MAAM,gBAAgB;QAAC,EAAE,QAAQ,EAAE,GAAG,OAA2B;IAC/D,qBACE,6LAAC,+IAAM;QAAE,GAAG,KAAK;kBACf,cAAA,6LAAC,sJAAa;YAAC,WAAU;sBACvB,cAAA,6LAAC;gBAAQ,WAAU;0BAChB;;;;;;;;;;;;;;;;AAKX;MAVM;AAYN,MAAM,6BAAe,2KAAgB,OAGnC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC;QAAI,WAAU;QAAkC,sBAAmB;;0BAClE,6LAAC,mNAAM;gBAAC,WAAU;;;;;;0BAClB,6LAAC,oJAAgB,CAAC,KAAK;gBACrB,KAAK;gBACL,WAAW,IAAA,4HAAE,EACX,0JACA;gBAED,GAAG,KAAK;;;;;;;;;;;;;;AAKf,aAAa,WAAW,GAAG,oJAAgB,CAAC,KAAK,CAAC,WAAW;AAE7D,MAAM,4BAAc,2KAAgB,OAGlC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC,oJAAgB,CAAC,IAAI;QACpB,KAAK;QACL,WAAW,IAAA,4HAAE,EAAC,mDAAmD;QAChE,GAAG,KAAK;;;;;;;;AAIb,YAAY,WAAW,GAAG,oJAAgB,CAAC,IAAI,CAAC,WAAW;AAE3D,MAAM,6BAAe,2KAAgB,OAGnC,CAAC,OAAO,oBACR,6LAAC,oJAAgB,CAAC,KAAK;QACrB,KAAK;QACL,WAAU;QACT,GAAG,KAAK;;;;;;;AAIb,aAAa,WAAW,GAAG,oJAAgB,CAAC,KAAK,CAAC,WAAW;AAE7D,MAAM,6BAAe,2KAAgB,OAGnC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC,oJAAgB,CAAC,KAAK;QACrB,KAAK;QACL,WAAW,IAAA,4HAAE,EACX,0NACA;QAED,GAAG,KAAK;;;;;;;;AAIb,aAAa,WAAW,GAAG,oJAAgB,CAAC,KAAK,CAAC,WAAW;AAE7D,MAAM,iCAAmB,2KAAgB,QAGvC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC,oJAAgB,CAAC,SAAS;QACzB,KAAK;QACL,WAAW,IAAA,4HAAE,EAAC,wBAAwB;QACrC,GAAG,KAAK;;;;;;;;AAGb,iBAAiB,WAAW,GAAG,oJAAgB,CAAC,SAAS,CAAC,WAAW;AAErE,MAAM,4BAAc,2KAAgB,QAGlC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC,oJAAgB,CAAC,IAAI;QACpB,KAAK;QACL,WAAW,IAAA,4HAAE,EACX,2OACA;QAED,GAAG,KAAK;;;;;;;;AAIb,YAAY,WAAW,GAAG,oJAAgB,CAAC,IAAI,CAAC,WAAW;AAE3D,MAAM,kBAAkB;QAAC,EACvB,SAAS,EACT,GAAG,OACmC;IACtC,qBACE,6LAAC;QACC,WAAW,IAAA,4HAAE,EACX,yDACA;QAED,GAAG,KAAK;;;;;;AAGf;OAbM;AAcN,gBAAgB,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 785, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/popover.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n"],"names":[],"mappings":";;;;;;;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,UAAU,8KAAqB;AAErC,MAAM,iBAAiB,iLAAwB;AAE/C,MAAM,+BAAiB,2KAAgB,MAGrC,QAA4D;QAA3D,EAAE,SAAS,EAAE,QAAQ,QAAQ,EAAE,aAAa,CAAC,EAAE,GAAG,OAAO;yBAC1D,6LAAC,gLAAuB;kBACtB,cAAA,6LAAC,iLAAwB;YACvB,KAAK;YACL,OAAO;YACP,YAAY;YACZ,WAAW,IAAA,4HAAE,EACX,8aACA;YAED,GAAG,KAAK;;;;;;;;;;;;;AAIf,eAAe,WAAW,GAAG,iLAAwB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 837, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/combobox.tsx"],"sourcesContent":["\n\"use client\"\n\nimport * as React from \"react\"\nimport { Check, ChevronsUpDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\"\nimport { Input } from \"./input\"\n\ntype ComboboxProps = {\n    options?: { value: string; label: string }[];\n    value: string;\n    onSelect: (value: string, label?: string) => void;\n    placeholder?: string;\n    disabled?: boolean;\n}\n\nexport function Combobox({ options = [], value, onSelect, placeholder, disabled }: ComboboxProps) {\n  const [open, setOpen] = React.useState(false)\n  const [inputValue, setInputValue] = React.useState(\"\")\n\n  const selectedOption = options.find((option) => \n    (option.value?.toLowerCase() === value?.toLowerCase())\n  );\n  \n  React.useEffect(() => {\n    setInputValue(selectedOption?.label || value || '')\n  }, [value, selectedOption])\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-expanded={open}\n          className=\"w-full justify-between font-normal\"\n          disabled={disabled}\n        >\n          <span className=\"truncate\">\n            {selectedOption?.label || value || placeholder || \"Select option...\"}\n          </span>\n          <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[--radix-popover-trigger-width] p-0\">\n        <Command>\n          <CommandInput \n            placeholder=\"Search or enter new...\"\n            value={inputValue}\n            onValueChange={setInputValue}\n           />\n          <CommandList>\n            <CommandEmpty onSelect={() => {\n                onSelect(inputValue, inputValue)\n                setOpen(false)\n            }}>\n                <div \n                    className=\"py-2 px-4 text-sm cursor-pointer hover:bg-accent\"\n                    onClick={() => {\n                         onSelect(inputValue, inputValue)\n                         setOpen(false)\n                    }}\n                >\n                    Add new: \"{inputValue}\"\n                </div>\n            </CommandEmpty>\n            <CommandGroup>\n              {options.map((option, index) => (\n                <CommandItem\n                  key={`${option.value}-${index}`}\n                  value={option.label}\n                  onSelect={(currentLabel) => {\n                    const selected = options.find(opt => opt.label.toLowerCase() === currentLabel.toLowerCase())\n                    onSelect(selected?.value || currentLabel, selected?.label || currentLabel)\n                    setOpen(false)\n                  }}\n                >\n                  <Check\n                    className={cn(\n                      \"mr-2 h-4 w-4\",\n                      value === option.value ? \"opacity-100\" : \"opacity-0\"\n                    )}\n                  />\n                  {option.label}\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  )\n}\n"],"names":[],"mappings":";;;;;AAGA;AACA;AAAA;AAEA;AACA;AACA;AAQA;;;AAfA;;;;;;;AA8BO,SAAS,SAAS,KAAuE;QAAvE,EAAE,UAAU,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,WAAW,EAAE,QAAQ,EAAiB,GAAvE;;IACvB,MAAM,CAAC,MAAM,QAAQ,GAAG,yKAAc,CAAC;IACvC,MAAM,CAAC,YAAY,cAAc,GAAG,yKAAc,CAAC;IAEnD,MAAM,iBAAiB,QAAQ,IAAI,CAAC,CAAC;YAClC;eAAA,EAAA,gBAAA,OAAO,KAAK,cAAZ,oCAAA,cAAc,WAAW,SAAO,kBAAA,4BAAA,MAAO,WAAW;;IAGrD,0KAAe;8BAAC;YACd,cAAc,CAAA,2BAAA,qCAAA,eAAgB,KAAK,KAAI,SAAS;QAClD;6BAAG;QAAC;QAAO;KAAe;IAE1B,qBACE,6LAAC,iJAAO;QAAC,MAAM;QAAM,cAAc;;0BACjC,6LAAC,wJAAc;gBAAC,OAAO;0BACrB,cAAA,6LAAC,+IAAM;oBACL,SAAQ;oBACR,MAAK;oBACL,iBAAe;oBACf,WAAU;oBACV,UAAU;;sCAEV,6LAAC;4BAAK,WAAU;sCACb,CAAA,2BAAA,qCAAA,eAAgB,KAAK,KAAI,SAAS,eAAe;;;;;;sCAEpD,6LAAC,mPAAc;4BAAC,WAAU;;;;;;;;;;;;;;;;;0BAG9B,6LAAC,wJAAc;gBAAC,WAAU;0BACxB,cAAA,6LAAC,iJAAO;;sCACN,6LAAC,sJAAY;4BACX,aAAY;4BACZ,OAAO;4BACP,eAAe;;;;;;sCAEjB,6LAAC,qJAAW;;8CACV,6LAAC,sJAAY;oCAAC,UAAU;wCACpB,SAAS,YAAY;wCACrB,QAAQ;oCACZ;8CACI,cAAA,6LAAC;wCACG,WAAU;wCACV,SAAS;4CACJ,SAAS,YAAY;4CACrB,QAAQ;wCACb;;4CACH;4CACc;4CAAW;;;;;;;;;;;;8CAG9B,6LAAC,sJAAY;8CACV,QAAQ,GAAG,CAAC,CAAC,QAAQ,sBACpB,6LAAC,qJAAW;4CAEV,OAAO,OAAO,KAAK;4CACnB,UAAU,CAAC;gDACT,MAAM,WAAW,QAAQ,IAAI,CAAC,CAAA,MAAO,IAAI,KAAK,CAAC,WAAW,OAAO,aAAa,WAAW;gDACzF,SAAS,CAAA,qBAAA,+BAAA,SAAU,KAAK,KAAI,cAAc,CAAA,qBAAA,+BAAA,SAAU,KAAK,KAAI;gDAC7D,QAAQ;4CACV;;8DAEA,6LAAC,gNAAK;oDACJ,WAAW,kIACT,gBACA,UAAU,OAAO,KAAK,GAAG,gBAAgB;;;;;;gDAG5C,OAAO,KAAK;;2CAdR,AAAC,GAAkB,OAAhB,OAAO,KAAK,EAAC,KAAS,OAAN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuB1C;GA5EgB;KAAA","debugId":null}},
    {"offset": {"line": 1018, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/radio-group.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n"],"names":[],"mappings":";;;;;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,2BAAa,2KAAgB,MAGjC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;IACxB,qBACE,6LAAC,qLAAwB;QACvB,WAAW,IAAA,4HAAE,EAAC,cAAc;QAC3B,GAAG,KAAK;QACT,KAAK;;;;;;AAGX;;AACA,WAAW,WAAW,GAAG,qLAAwB,CAAC,WAAW;AAE7D,MAAM,+BAAiB,2KAAgB,OAGrC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;IACxB,qBACE,6LAAC,qLAAwB;QACvB,KAAK;QACL,WAAW,IAAA,4HAAE,EACX,4OACA;QAED,GAAG,KAAK;kBAET,cAAA,6LAAC,0LAA6B;YAAC,WAAU;sBACvC,cAAA,6LAAC,mNAAM;gBAAC,WAAU;;;;;;;;;;;;;;;;AAI1B;;AACA,eAAe,WAAW,GAAG,qLAAwB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 1090, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/tenancy/contract/actions.ts"],"sourcesContent":["\n\n'use server';\n\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { z } from 'zod';\nimport { revalidatePath } from 'next/cache';\nimport { contractSchema, type Contract } from './schema';\nimport { type Unit } from '@/app/property/units/schema';\nimport { type Floor } from '@/app/property/floors/schema';\nimport { type Room } from '@/app/property/rooms/schema';\nimport { type Tenant } from '@/app/tenancy/tenants/schema';\nimport { addCheque } from '@/app/finance/cheque-deposit/actions';\nimport { differenceInDays, parseISO, addDays } from 'date-fns';\nimport { getUnits } from '@/app/property/units/actions';\nimport { getRooms } from '@/app/property/rooms/actions';\n\n\nconst contractsFilePath = path.join(process.cwd(), 'src/app/tenancy/contract/contracts-data.json');\nconst propertiesFilePath = path.join(process.cwd(), 'src/app/property/properties/list/properties-data.json');\nconst tenantsFilePath = path.join(process.cwd(), 'src/app/tenancy/tenants/tenants-data.json');\n\n\nasync function readData(filePath: string) {\n    try {\n        await fs.access(filePath);\n        const data = await fs.readFile(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            return [];\n        }\n        throw error;\n    }\n}\n\nasync function readContracts(): Promise<Contract[]> {\n    try {\n        await fs.access(contractsFilePath);\n        const data = await fs.readFile(contractsFilePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            return [];\n        }\n        throw error;\n    }\n}\n\nasync function writeContracts(data: Contract[]) {\n    await fs.writeFile(contractsFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\nexport async function getAllContracts() {\n    return await readContracts();\n}\n\n\nasync function createChequesFromContract(contract: Contract) {\n    if (contract.paymentMode !== 'cheque' || !contract.paymentSchedule) {\n        return;\n    }\n\n    for (const installment of contract.paymentSchedule) {\n        if (installment.chequeNo) {\n            await addCheque({\n                chequeNo: installment.chequeNo,\n                chequeDate: installment.dueDate,\n                amount: installment.amount,\n                bankName: installment.bankName || '',\n                status: 'In Hand',\n                type: 'Incoming',\n                partyType: 'Tenant',\n                partyName: contract.tenantCode,\n                property: contract.property,\n                unitCode: contract.unitCode,\n                roomCode: contract.roomCode,\n                contractNo: contract.contractNo,\n                remarks: `Installment ${installment.installment}`,\n            });\n        }\n    }\n}\n\nexport async function saveContractData(data: Omit<Contract, 'id'> & { id?: string, isAutoContractNo?: boolean }, isNewRecord: boolean) {\n    const { isAutoContractNo, ...contractData } = data;\n    const validation = contractSchema.omit({id: true}).safeParse(contractData);\n\n    if (!validation.success) {\n        const errors = validation.error.errors.map(e => e.message).join(', ');\n        return { success: false, error: errors };\n    }\n\n    try {\n        const allContracts = await readContracts();\n        const validatedData = validation.data;\n        \n        let savedContract: Contract;\n        \n        if (isNewRecord) {\n             let newContractNo = validatedData.contractNo;\n             if (isAutoContractNo || !newContractNo) {\n                newContractNo = await getNextContractNumber();\n             } else {\n                const contractExists = allContracts.some(c => c.contractNo === newContractNo);\n                if (contractExists) {\n                    return { success: false, error: `A contract with number \"${newContractNo}\" already exists.`};\n                }\n             }\n\n             const newContract: Contract = {\n                ...validatedData,\n                contractNo: newContractNo,\n                id: `CON-${Date.now()}`,\n            };\n            allContracts.push(newContract);\n            savedContract = newContract;\n        } else {\n            const index = allContracts.findIndex(c => c.id === data.id);\n            if (index !== -1) {\n                allContracts[index] = { ...allContracts[index], ...validatedData };\n                savedContract = allContracts[index];\n            } else {\n                 return { success: false, error: `Contract with ID \"${data.id}\" not found.` };\n            }\n        }\n        \n        await writeContracts(allContracts);\n        \n        await createChequesFromContract(savedContract);\n        \n        revalidatePath('/tenancy/contracts');\n        revalidatePath('/finance/cheque-deposit');\n        revalidatePath(`/tenancy/contract?id=${data.id}`);\n        return { success: true, data: savedContract };\n\n    } catch (error) {\n        console.error('Failed to save contract:', error);\n        return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n\nasync function getNextContractNumber() {\n    const allContracts = await readContracts();\n    let maxNum = 0;\n    allContracts.forEach(c => {\n        const match = c.contractNo.match(/^TC-(\\d+)$/);\n        if (match) {\n            const num = parseInt(match[1], 10);\n            if (num > maxNum) {\n                maxNum = num;\n            }\n        }\n    });\n    return `TC-${(maxNum + 1).toString().padStart(4, '0')}`;\n}\n\nexport async function findContract(query: { unitCode?: string, tenantName?: string, contractId?: string }): Promise<{ success: boolean; data?: Contract; error?: string }> {\n    try {\n        const allContracts = await readContracts();\n        let foundContract: Contract | undefined;\n\n        if (query.contractId === 'new') {\n            const newContractNo = await getNextContractNumber();\n            return { success: true, data: { ...initialContractState, contractNo: newContractNo } };\n        }\n        \n        if (query.contractId) {\n            foundContract = allContracts.find(c => c.id === query.contractId);\n        } else if (query.unitCode) {\n            foundContract = allContracts.find(c => c.unitCode === query.unitCode);\n        } else if (query.tenantName) {\n            foundContract = allContracts.find(c => c.tenantName.toLowerCase() === query.tenantName.toLowerCase());\n        }\n\n        if (foundContract) {\n            return { success: true, data: foundContract };\n        } else {\n            return { success: false, error: 'Contract not found.' };\n        }\n    } catch (error) {\n        console.error('Failed to find contract:', error);\n        return { success: false, error: (error as Error).message || 'An unknown error occurred' };\n    }\n}\n\n\nconst initialContractState: Contract = {\n    id: '',\n    contractNo: '',\n    contractDate: '',\n    unitCode: '',\n    roomCode: '',\n    property: '',\n    tenantCode: '',\n    tenantName: '',\n    mobile: '',\n    email: '',\n    address: '',\n    startDate: '',\n    endDate: '',\n    totalRent: 0,\n    paymentMode: 'cash',\n    status: 'New',\n    terminationDate: '',\n    rentBasedOn: 'Monthly',\n    paymentFrequency: 'Monthly',\n    numberOfPayments: 1,\n    gracePeriod: 0,\n    paymentSchedule: [],\n    terms: '',\n    tawtheeqRegistrationNo: '',\n    tawtheeqStatus: 'Not Registered',\n    tawtheeqRegistrationDate: '',\n};\n\nexport async function deleteContract(contractId: string) {\n    try {\n        const allContracts = await readContracts();\n        const updatedContracts = allContracts.filter(c => c.id !== contractId);\n\n        if (allContracts.length === updatedContracts.length) {\n            return { success: false, error: 'Contract not found.' };\n        }\n        \n        await writeContracts(updatedContracts);\n        revalidatePath('/tenancy/contracts');\n        return { success: true };\n    } catch (error) {\n        console.error('Failed to delete contract:', error);\n        return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n\nasync function readProperties() {\n    try {\n        const data = await fs.readFile(propertiesFilePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (e) {\n        return [];\n    }\n}\n\nasync function readTenants(): Promise<{tenantData: Tenant}[]> {\n    try {\n        const data = await fs.readFile(tenantsFilePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (e) {\n        return [];\n    }\n}\n\n\nexport async function getContractLookups() {\n    const properties = await readProperties();\n    const tenants = await readTenants();\n    const units = await getUnits();\n    const rooms = await getRooms();\n\n    return {\n        properties: properties.map((p: any) => ({ value: (p.propertyData || p).code, label: (p.propertyData || p).name })),\n        tenants: tenants.map((t: any) => ({ value: t.tenantData.code, label: t.tenantData.name, ...t.tenantData })),\n        units: units.map(u => ({...u, value: u.unitCode, label: u.unitCode })),\n        rooms: rooms.map(r => ({...r, value: r.roomCode, label: r.roomCode })),\n    }\n}\n\nexport async function getUnitsForProperty(propertyCode: string) {\n    const allUnits = await getUnits();\n    return allUnits\n        .filter(u => u.propertyCode === propertyCode && u.occupancyStatus !== 'Occupied')\n        .map((u: any) => ({ ...u, value: u.unitCode, label: u.unitCode }));\n}\n\nexport async function getRoomsForUnit(propertyCode: string, unitCode: string) {\n    const allRooms = await getRooms();\n    return allRooms\n        .filter(r => r.propertyCode === propertyCode && r.unitCode === unitCode && r.occupancyStatus === 'Vacant')\n        .map((r: any) => ({ ...r, value: r.roomCode, label: r.roomCode }));\n}\n\nexport async function getUnitDetails(unitCode: string) {\n    const allUnits = await getUnits();\n    const unit = allUnits.find(u => u.unitCode === unitCode);\n\n    if (!unit) {\n        return { success: false, error: 'Unit not found' };\n    }\n    \n    return { \n        success: true, \n        data: {\n            totalRent: unit.annualRent,\n        }\n    };\n}\n\nexport async function getRoomDetails(roomCode: string) {\n    const allRooms = await getRooms();\n    const room = allRooms.find(r => r.roomCode === roomCode);\n    if (!room) {\n        return { success: false, error: 'Room not found' };\n    }\n    return { success: true, data: room };\n}\n\nexport async function getTenantForProperty(propertyCode: string, unitCode: string, roomCode?: string) {\n    try {\n        const contracts: Contract[] = await fs.readFile(contractsFilePath, 'utf-8').then(JSON.parse);\n        \n        const activeContract = contracts.find(c =>\n            c.property === propertyCode &&\n            c.unitCode === unitCode &&\n            (roomCode ? c.roomCode === roomCode : true) && // Match room if provided\n            (c.status === 'New' || c.status === 'Renew')\n        );\n\n        if (activeContract) {\n            return { success: true, tenantName: activeContract.tenantName };\n        }\n        return { success: false, error: 'No active tenant found for this location.' };\n\n    } catch (error) {\n        return { success: false, error: (error as Error).message };\n    }\n}\n\nconst moveTenantSchema = z.object({\n    contractId: z.string(),\n    newPropertyCode: z.string(),\n    newUnitCode: z.string(),\n    newRoomCode: z.string().optional(),\n    moveDate: z.string(),\n});\n\nexport async function moveTenant(data: z.infer<typeof moveTenantSchema>) {\n    const validation = moveTenantSchema.safeParse(data);\n    if (!validation.success) {\n        return { success: false, error: 'Invalid data provided.' };\n    }\n\n    const { contractId, newPropertyCode, newUnitCode, newRoomCode, moveDate } = validation.data;\n\n    try {\n        const allContracts = await readContracts();\n        const contractIndex = allContracts.findIndex(c => c.id === contractId);\n\n        if (contractIndex === -1) {\n            return { success: false, error: 'Active contract not found for this tenant.' };\n        }\n\n        const contract = allContracts[contractIndex];\n        const oldLocation = `${contract.property}/${contract.unitCode}${contract.roomCode ? '/'+contract.roomCode : ''}`;\n        const newLocation = `${newPropertyCode}/${newUnitCode}${newRoomCode ? '/'+newRoomCode : ''}`;\n\n        contract.property = newPropertyCode;\n        contract.unitCode = newUnitCode;\n        contract.roomCode = newRoomCode;\n\n        contract.paymentSchedule.push({\n            installment: 0, \n            dueDate: moveDate,\n            amount: 0,\n            status: 'paid', \n            chequeNo: 'MOVEMENT',\n            bankName: `Moved from ${oldLocation} to ${newLocation}`,\n        });\n        \n        allContracts[contractIndex] = contract;\n\n        await writeContracts(allContracts);\n\n        revalidatePath('/tenancy/tenants/add');\n        revalidatePath('/property/properties');\n        revalidatePath('/property/units/vacant');\n        \n        return { success: true };\n\n    } catch (error) {\n        return { success: false, error: (error as Error).message };\n    }\n}\n\nexport async function getLatestContractForTenant(tenantCode: string): Promise<{ success: boolean; data?: Contract; error?: string }> {\n    if (!tenantCode) {\n        return { success: false, error: \"Tenant code is required.\" };\n    }\n    try {\n        const allContracts = await readContracts();\n        const tenantContracts = allContracts.filter(c => c.tenantCode === tenantCode);\n        if (tenantContracts.length === 0) {\n            return { success: false, error: 'No contracts found for this tenant.' };\n        }\n        tenantContracts.sort((a, b) => new Date(b.endDate).getTime() - new Date(a.endDate).getTime());\n        return { success: true, data: tenantContracts[0] };\n    } catch (error) {\n        return { success: false, error: (error as Error).message };\n    }\n}\n"],"names":[],"mappings":";;;;;;;IA4QsB,sBAAA,WAAA,GAAA,IAAA,kPAAA,EAAA,8CAAA,uOAAA,EAAA,KAAA,GAAA,6OAAA,EAAA","debugId":null}},
    {"offset": {"line": 1105, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/tenancy/contract/actions.ts"],"sourcesContent":["\n\n'use server';\n\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { z } from 'zod';\nimport { revalidatePath } from 'next/cache';\nimport { contractSchema, type Contract } from './schema';\nimport { type Unit } from '@/app/property/units/schema';\nimport { type Floor } from '@/app/property/floors/schema';\nimport { type Room } from '@/app/property/rooms/schema';\nimport { type Tenant } from '@/app/tenancy/tenants/schema';\nimport { addCheque } from '@/app/finance/cheque-deposit/actions';\nimport { differenceInDays, parseISO, addDays } from 'date-fns';\nimport { getUnits } from '@/app/property/units/actions';\nimport { getRooms } from '@/app/property/rooms/actions';\n\n\nconst contractsFilePath = path.join(process.cwd(), 'src/app/tenancy/contract/contracts-data.json');\nconst propertiesFilePath = path.join(process.cwd(), 'src/app/property/properties/list/properties-data.json');\nconst tenantsFilePath = path.join(process.cwd(), 'src/app/tenancy/tenants/tenants-data.json');\n\n\nasync function readData(filePath: string) {\n    try {\n        await fs.access(filePath);\n        const data = await fs.readFile(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            return [];\n        }\n        throw error;\n    }\n}\n\nasync function readContracts(): Promise<Contract[]> {\n    try {\n        await fs.access(contractsFilePath);\n        const data = await fs.readFile(contractsFilePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            return [];\n        }\n        throw error;\n    }\n}\n\nasync function writeContracts(data: Contract[]) {\n    await fs.writeFile(contractsFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\nexport async function getAllContracts() {\n    return await readContracts();\n}\n\n\nasync function createChequesFromContract(contract: Contract) {\n    if (contract.paymentMode !== 'cheque' || !contract.paymentSchedule) {\n        return;\n    }\n\n    for (const installment of contract.paymentSchedule) {\n        if (installment.chequeNo) {\n            await addCheque({\n                chequeNo: installment.chequeNo,\n                chequeDate: installment.dueDate,\n                amount: installment.amount,\n                bankName: installment.bankName || '',\n                status: 'In Hand',\n                type: 'Incoming',\n                partyType: 'Tenant',\n                partyName: contract.tenantCode,\n                property: contract.property,\n                unitCode: contract.unitCode,\n                roomCode: contract.roomCode,\n                contractNo: contract.contractNo,\n                remarks: `Installment ${installment.installment}`,\n            });\n        }\n    }\n}\n\nexport async function saveContractData(data: Omit<Contract, 'id'> & { id?: string, isAutoContractNo?: boolean }, isNewRecord: boolean) {\n    const { isAutoContractNo, ...contractData } = data;\n    const validation = contractSchema.omit({id: true}).safeParse(contractData);\n\n    if (!validation.success) {\n        const errors = validation.error.errors.map(e => e.message).join(', ');\n        return { success: false, error: errors };\n    }\n\n    try {\n        const allContracts = await readContracts();\n        const validatedData = validation.data;\n        \n        let savedContract: Contract;\n        \n        if (isNewRecord) {\n             let newContractNo = validatedData.contractNo;\n             if (isAutoContractNo || !newContractNo) {\n                newContractNo = await getNextContractNumber();\n             } else {\n                const contractExists = allContracts.some(c => c.contractNo === newContractNo);\n                if (contractExists) {\n                    return { success: false, error: `A contract with number \"${newContractNo}\" already exists.`};\n                }\n             }\n\n             const newContract: Contract = {\n                ...validatedData,\n                contractNo: newContractNo,\n                id: `CON-${Date.now()}`,\n            };\n            allContracts.push(newContract);\n            savedContract = newContract;\n        } else {\n            const index = allContracts.findIndex(c => c.id === data.id);\n            if (index !== -1) {\n                allContracts[index] = { ...allContracts[index], ...validatedData };\n                savedContract = allContracts[index];\n            } else {\n                 return { success: false, error: `Contract with ID \"${data.id}\" not found.` };\n            }\n        }\n        \n        await writeContracts(allContracts);\n        \n        await createChequesFromContract(savedContract);\n        \n        revalidatePath('/tenancy/contracts');\n        revalidatePath('/finance/cheque-deposit');\n        revalidatePath(`/tenancy/contract?id=${data.id}`);\n        return { success: true, data: savedContract };\n\n    } catch (error) {\n        console.error('Failed to save contract:', error);\n        return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n\nasync function getNextContractNumber() {\n    const allContracts = await readContracts();\n    let maxNum = 0;\n    allContracts.forEach(c => {\n        const match = c.contractNo.match(/^TC-(\\d+)$/);\n        if (match) {\n            const num = parseInt(match[1], 10);\n            if (num > maxNum) {\n                maxNum = num;\n            }\n        }\n    });\n    return `TC-${(maxNum + 1).toString().padStart(4, '0')}`;\n}\n\nexport async function findContract(query: { unitCode?: string, tenantName?: string, contractId?: string }): Promise<{ success: boolean; data?: Contract; error?: string }> {\n    try {\n        const allContracts = await readContracts();\n        let foundContract: Contract | undefined;\n\n        if (query.contractId === 'new') {\n            const newContractNo = await getNextContractNumber();\n            return { success: true, data: { ...initialContractState, contractNo: newContractNo } };\n        }\n        \n        if (query.contractId) {\n            foundContract = allContracts.find(c => c.id === query.contractId);\n        } else if (query.unitCode) {\n            foundContract = allContracts.find(c => c.unitCode === query.unitCode);\n        } else if (query.tenantName) {\n            foundContract = allContracts.find(c => c.tenantName.toLowerCase() === query.tenantName.toLowerCase());\n        }\n\n        if (foundContract) {\n            return { success: true, data: foundContract };\n        } else {\n            return { success: false, error: 'Contract not found.' };\n        }\n    } catch (error) {\n        console.error('Failed to find contract:', error);\n        return { success: false, error: (error as Error).message || 'An unknown error occurred' };\n    }\n}\n\n\nconst initialContractState: Contract = {\n    id: '',\n    contractNo: '',\n    contractDate: '',\n    unitCode: '',\n    roomCode: '',\n    property: '',\n    tenantCode: '',\n    tenantName: '',\n    mobile: '',\n    email: '',\n    address: '',\n    startDate: '',\n    endDate: '',\n    totalRent: 0,\n    paymentMode: 'cash',\n    status: 'New',\n    terminationDate: '',\n    rentBasedOn: 'Monthly',\n    paymentFrequency: 'Monthly',\n    numberOfPayments: 1,\n    gracePeriod: 0,\n    paymentSchedule: [],\n    terms: '',\n    tawtheeqRegistrationNo: '',\n    tawtheeqStatus: 'Not Registered',\n    tawtheeqRegistrationDate: '',\n};\n\nexport async function deleteContract(contractId: string) {\n    try {\n        const allContracts = await readContracts();\n        const updatedContracts = allContracts.filter(c => c.id !== contractId);\n\n        if (allContracts.length === updatedContracts.length) {\n            return { success: false, error: 'Contract not found.' };\n        }\n        \n        await writeContracts(updatedContracts);\n        revalidatePath('/tenancy/contracts');\n        return { success: true };\n    } catch (error) {\n        console.error('Failed to delete contract:', error);\n        return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n\nasync function readProperties() {\n    try {\n        const data = await fs.readFile(propertiesFilePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (e) {\n        return [];\n    }\n}\n\nasync function readTenants(): Promise<{tenantData: Tenant}[]> {\n    try {\n        const data = await fs.readFile(tenantsFilePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (e) {\n        return [];\n    }\n}\n\n\nexport async function getContractLookups() {\n    const properties = await readProperties();\n    const tenants = await readTenants();\n    const units = await getUnits();\n    const rooms = await getRooms();\n\n    return {\n        properties: properties.map((p: any) => ({ value: (p.propertyData || p).code, label: (p.propertyData || p).name })),\n        tenants: tenants.map((t: any) => ({ value: t.tenantData.code, label: t.tenantData.name, ...t.tenantData })),\n        units: units.map(u => ({...u, value: u.unitCode, label: u.unitCode })),\n        rooms: rooms.map(r => ({...r, value: r.roomCode, label: r.roomCode })),\n    }\n}\n\nexport async function getUnitsForProperty(propertyCode: string) {\n    const allUnits = await getUnits();\n    return allUnits\n        .filter(u => u.propertyCode === propertyCode && u.occupancyStatus !== 'Occupied')\n        .map((u: any) => ({ ...u, value: u.unitCode, label: u.unitCode }));\n}\n\nexport async function getRoomsForUnit(propertyCode: string, unitCode: string) {\n    const allRooms = await getRooms();\n    return allRooms\n        .filter(r => r.propertyCode === propertyCode && r.unitCode === unitCode && r.occupancyStatus === 'Vacant')\n        .map((r: any) => ({ ...r, value: r.roomCode, label: r.roomCode }));\n}\n\nexport async function getUnitDetails(unitCode: string) {\n    const allUnits = await getUnits();\n    const unit = allUnits.find(u => u.unitCode === unitCode);\n\n    if (!unit) {\n        return { success: false, error: 'Unit not found' };\n    }\n    \n    return { \n        success: true, \n        data: {\n            totalRent: unit.annualRent,\n        }\n    };\n}\n\nexport async function getRoomDetails(roomCode: string) {\n    const allRooms = await getRooms();\n    const room = allRooms.find(r => r.roomCode === roomCode);\n    if (!room) {\n        return { success: false, error: 'Room not found' };\n    }\n    return { success: true, data: room };\n}\n\nexport async function getTenantForProperty(propertyCode: string, unitCode: string, roomCode?: string) {\n    try {\n        const contracts: Contract[] = await fs.readFile(contractsFilePath, 'utf-8').then(JSON.parse);\n        \n        const activeContract = contracts.find(c =>\n            c.property === propertyCode &&\n            c.unitCode === unitCode &&\n            (roomCode ? c.roomCode === roomCode : true) && // Match room if provided\n            (c.status === 'New' || c.status === 'Renew')\n        );\n\n        if (activeContract) {\n            return { success: true, tenantName: activeContract.tenantName };\n        }\n        return { success: false, error: 'No active tenant found for this location.' };\n\n    } catch (error) {\n        return { success: false, error: (error as Error).message };\n    }\n}\n\nconst moveTenantSchema = z.object({\n    contractId: z.string(),\n    newPropertyCode: z.string(),\n    newUnitCode: z.string(),\n    newRoomCode: z.string().optional(),\n    moveDate: z.string(),\n});\n\nexport async function moveTenant(data: z.infer<typeof moveTenantSchema>) {\n    const validation = moveTenantSchema.safeParse(data);\n    if (!validation.success) {\n        return { success: false, error: 'Invalid data provided.' };\n    }\n\n    const { contractId, newPropertyCode, newUnitCode, newRoomCode, moveDate } = validation.data;\n\n    try {\n        const allContracts = await readContracts();\n        const contractIndex = allContracts.findIndex(c => c.id === contractId);\n\n        if (contractIndex === -1) {\n            return { success: false, error: 'Active contract not found for this tenant.' };\n        }\n\n        const contract = allContracts[contractIndex];\n        const oldLocation = `${contract.property}/${contract.unitCode}${contract.roomCode ? '/'+contract.roomCode : ''}`;\n        const newLocation = `${newPropertyCode}/${newUnitCode}${newRoomCode ? '/'+newRoomCode : ''}`;\n\n        contract.property = newPropertyCode;\n        contract.unitCode = newUnitCode;\n        contract.roomCode = newRoomCode;\n\n        contract.paymentSchedule.push({\n            installment: 0, \n            dueDate: moveDate,\n            amount: 0,\n            status: 'paid', \n            chequeNo: 'MOVEMENT',\n            bankName: `Moved from ${oldLocation} to ${newLocation}`,\n        });\n        \n        allContracts[contractIndex] = contract;\n\n        await writeContracts(allContracts);\n\n        revalidatePath('/tenancy/tenants/add');\n        revalidatePath('/property/properties');\n        revalidatePath('/property/units/vacant');\n        \n        return { success: true };\n\n    } catch (error) {\n        return { success: false, error: (error as Error).message };\n    }\n}\n\nexport async function getLatestContractForTenant(tenantCode: string): Promise<{ success: boolean; data?: Contract; error?: string }> {\n    if (!tenantCode) {\n        return { success: false, error: \"Tenant code is required.\" };\n    }\n    try {\n        const allContracts = await readContracts();\n        const tenantContracts = allContracts.filter(c => c.tenantCode === tenantCode);\n        if (tenantContracts.length === 0) {\n            return { success: false, error: 'No contracts found for this tenant.' };\n        }\n        tenantContracts.sort((a, b) => new Date(b.endDate).getTime() - new Date(a.endDate).getTime());\n        return { success: true, data: tenantContracts[0] };\n    } catch (error) {\n        return { success: false, error: (error as Error).message };\n    }\n}\n"],"names":[],"mappings":";;;;;;;IAmRsB,kBAAA,WAAA,GAAA,IAAA,kPAAA,EAAA,8CAAA,uOAAA,EAAA,KAAA,GAAA,6OAAA,EAAA","debugId":null}},
    {"offset": {"line": 1120, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/tenancy/customer/invoice/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { revalidatePath } from 'next/cache';\nimport { firestoreAdmin } from '@/lib/firebase/admin-config';\nimport { invoiceSchema, type Invoice } from './schema';\n\nasync function getNextInvoiceNumber(prefix: string) {\n    const querySnapshot = await firestoreAdmin.collection(\"invoices\").where(\"invoiceNo\", \">=\", prefix).where(\"invoiceNo\", \"<\", prefix + 'z').get();\n    let maxNum = 0;\n    querySnapshot.docs.forEach(doc => {\n        const match = doc.data().invoiceNo.match(new RegExp(`^${prefix}-(\\\\d+)$`));\n        if (match) {\n            const num = parseInt(match[1], 10);\n            if (num > maxNum) {\n                maxNum = num;\n            }\n        }\n    });\n    return `${prefix}-${(maxNum + 1).toString().padStart(4, '0')}`;\n}\n\nexport async function getInvoicesForCustomer(customerCode: string) {\n    const querySnapshot = await firestoreAdmin.collection(\"invoices\").where(\"customerCode\", \"==\", customerCode).get();\n    return querySnapshot.docs.map(doc => {\n        const data = doc.data() as Invoice;\n        return { ...data, id: doc.id, remainingBalance: data.total - (data.amountPaid || 0) };\n    });\n}\n\nexport async function getNextGeneralInvoiceNumber() {\n    return await getNextInvoiceNumber('INV');\n}\n\nexport async function getNextSubscriptionInvoiceNumber() {\n    return await getNextInvoiceNumber('SUB-INV');\n}\n\nexport async function saveInvoice(data: Omit<Invoice, 'amountPaid' | 'remainingBalance'> & { isAutoInvoiceNo?: boolean, isSubscription?: boolean }, createdBy: string) {\n    const { isAutoInvoiceNo, isSubscription, ...invoiceData } = data;\n    const validation = invoiceSchema.omit({id: true, amountPaid: true, remainingBalance: true}).safeParse(invoiceData);\n\n    if (!validation.success) {\n        console.error(\"Invoice Validation Error:\", validation.error.format());\n        return { success: false, error: 'Invalid data format.' };\n    }\n\n    try {\n        const isNewRecord = !data.id;\n        const validatedData = validation.data;\n        let savedInvoice: Invoice;\n\n        if (isNewRecord) {\n            let newInvoiceNo = validatedData.invoiceNo;\n            if (isAutoInvoiceNo) {\n                newInvoiceNo = isSubscription ? await getNextSubscriptionInvoiceNumber() : await getNextGeneralInvoiceNumber();\n            } else {\n                const querySnapshot = await firestoreAdmin.collection(\"invoices\").where(\"invoiceNo\", \"==\", newInvoiceNo).get();\n                if (!querySnapshot.empty) {\n                    return { success: false, error: `An invoice with number \"${newInvoiceNo}\" already exists.`};\n                }\n            }\n\n            const newInvoice: Invoice = {\n                ...validatedData,\n                invoiceNo: newInvoiceNo,\n                amountPaid: 0,\n                items: validatedData.items.map(item => ({...item, id: item.id || `item-${Date.now()}-${Math.random()}`})),\n                id: ''\n            };\n            const docRef = await firestoreAdmin.collection(\"invoices\").add(newInvoice);\n            savedInvoice = { ...newInvoice, id: docRef.id };\n            \n        } else {\n            const docRef = firestoreAdmin.collection(\"invoices\").doc(data.id as string);\n            await docRef.update(validatedData);\n            const updatedDoc = await docRef.get();\n            savedInvoice = { ...updatedDoc.data(), id: updatedDoc.id } as Invoice;\n        }\n\n        revalidatePath(`/tenancy/customer/add?code=${data.customerCode}`);\n        revalidatePath(`/tenancy/tenants/add?code=${data.customerCode}`);\n        return { success: true, data: savedInvoice };\n    } catch (error) {\n        return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n\nexport async function saveSubscriptionInvoice(data: Omit<Invoice, 'amountPaid' | 'remainingBalance'> & { isAutoInvoiceNo?: boolean }, createdBy: string) {\n    return await saveInvoice({ ...data, isSubscription: true }, createdBy);\n}\n\n\nexport async function deleteInvoice(invoiceId: string) {\n    try {\n        const docRef = firestoreAdmin.collection(\"invoices\").doc(invoiceId);\n        const doc = await docRef.get();\n        if (!doc.exists) {\n            return { success: false, error: 'Invoice not found.' };\n        }\n        const customerCode = doc.data()?.customerCode;\n        await docRef.delete();\n        revalidatePath(`/tenancy/customer/add?code=${customerCode}`);\n        revalidatePath(`/tenancy/tenants/add?code=${customerCode}`);\n        return { success: true };\n    } catch (error) {\n        return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n\nexport async function updateInvoiceStatus(invoiceId: string, status: Invoice['status']) {\n    try {\n        const docRef = firestoreAdmin.collection(\"invoices\").doc(invoiceId);\n        const doc = await docRef.get();\n        if (!doc.exists) {\n            return { success: false, error: 'Invoice not found to update status.' };\n        }\n        await docRef.update({ status });\n        revalidatePath(`/tenancy/customer/add?code=${doc.data()?.customerCode}`);\n        revalidatePath(`/tenancy/tenants/add?code=${doc.data()?.customerCode}`);\n        return { success: true };\n    } catch (error) {\n         return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n\nexport async function applyPaymentToInvoices(invoicePayments: { invoiceId: string; amount: number }[], customerCode: string) {\n    try {\n        const batch = firestoreAdmin.batch();\n        for (const payment of invoicePayments) {\n            const docRef = firestoreAdmin.collection(\"invoices\").doc(payment.invoiceId);\n            const doc = await docRef.get();\n            if (doc.exists) {\n                const invoice = doc.data() as Invoice;\n                const newAmountPaid = (invoice.amountPaid || 0) + payment.amount;\n                const remainingBalance = invoice.total - newAmountPaid;\n                const newStatus = remainingBalance <= 0.001 ? 'Paid' : invoice.status;\n                batch.update(docRef, { amountPaid: newAmountPaid, status: newStatus });\n            }\n        }\n        await batch.commit();\n\n        revalidatePath(`/tenancy/customer/add?code=${customerCode}`);\n        revalidatePath(`/tenancy/tenants/add?code=${customerCode}`);\n        return { success: true };\n    } catch (error) {\n         return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n"],"names":[],"mappings":";;;;;;;IAsBsB,yBAAA,WAAA,GAAA,IAAA,kPAAA,EAAA,8CAAA,uOAAA,EAAA,KAAA,GAAA,6OAAA,EAAA","debugId":null}},
    {"offset": {"line": 1135, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/vendors/bill/actions.ts"],"sourcesContent":["\n\n'use server';\n\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { revalidatePath } from 'next/cache';\nimport { billSchema, type Bill } from './schema-def';\n\nconst billsFilePath = path.join(process.cwd(), 'src/app/vendors/bill/bills-data.json');\n\nasync function readBills(): Promise<Bill[]> {\n    try {\n        await fs.access(billsFilePath);\n        const data = await fs.readFile(billsFilePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            await writeBills([]);\n            return [];\n        }\n        throw error;\n    }\n}\n\nasync function writeBills(data: Bill[]) {\n    await fs.writeFile(billsFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\n\nexport async function getBillsForVendor(vendorCode: string) {\n    const allBills = await readBills();\n    return allBills.filter(bill => bill.vendorCode === vendorCode);\n}\n\n\nexport async function getNextBillNumber() {\n    const allBills = await readBills();\n    let maxNum = 0;\n    allBills.forEach(i => {\n        const match = i.billNo.match(/^BL-(\\d+)$/);\n        if (match) {\n            const num = parseInt(match[1], 10);\n            if (num > maxNum) {\n                maxNum = num;\n            }\n        }\n    });\n    return `BL-${(maxNum + 1).toString().padStart(4, '0')}`;\n}\n\nexport async function saveBill(data: Omit<Bill, 'id' | 'amountPaid' | 'remainingBalance'> & { id?: string, isAutoBillNo?: boolean }) {\n    const { isAutoBillNo, ...billData } = data;\n    \n    const dataWithDueDate = {\n        ...billData,\n        dueDate: billData.dueDate || billData.billDate,\n    };\n    \n    const validation = billSchema.omit({id: true, amountPaid: true, remainingBalance: true}).safeParse(dataWithDueDate);\n\n    if (!validation.success) {\n        console.error(\"Bill Validation Error:\", validation.error.format());\n        return { success: false, error: 'Invalid data format.' };\n    }\n\n    try {\n        const allBills = await readBills();\n        const validatedData = validation.data;\n        let savedBill: Bill;\n\n        if (data.id) { // Update existing\n            const index = allBills.findIndex(bill => bill.id === data.id);\n            if (index === -1) {\n                return { success: false, error: 'Bill not found.' };\n            }\n            allBills[index] = { ...allBills[index], ...validatedData, items: validatedData.items.map(item => ({...item, id: item.id || `item-${Date.now()}-${Math.random()}`})) };\n            savedBill = allBills[index];\n        } else { // Create new\n            let newBillNo = validatedData.billNo;\n            if (isAutoBillNo || !newBillNo) {\n                 newBillNo = await getNextBillNumber();\n            } else {\n                const billExists = allBills.some(bill => bill.billNo === newBillNo);\n                if (billExists) {\n                    return { success: false, error: `A bill with number \"${newBillNo}\" already exists.`};\n                }\n            }\n            const newBill: Bill = {\n                ...validatedData,\n                billNo: newBillNo,\n                id: `BILL-${Date.now()}`,\n                amountPaid: 0,\n                 items: validatedData.items.map(item => ({...item, id: `item-${Date.now()}-${Math.random()}`}))\n            };\n            allBills.push(newBill);\n            savedBill = newBill;\n        }\n        \n        await writeBills(allBills);\n        revalidatePath(`/vendors/add?code=${data.vendorCode}`);\n        return { success: true, data: savedBill };\n    } catch (error) {\n        return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n\nexport async function deleteBill(billId: string) {\n    try {\n        const allBills = await readBills();\n        const billToDelete = allBills.find(bill => bill.id === billId);\n        if (!billToDelete) {\n             return { success: false, error: 'Bill not found.' };\n        }\n\n        const updatedBills = allBills.filter(bill => bill.id !== billId);\n        await writeBills(updatedBills);\n        revalidatePath(`/vendors/add?code=${billToDelete.vendorCode}`);\n        return { success: true };\n    } catch (error) {\n        return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n"],"names":[],"mappings":";;;;;;;IA8BsB,oBAAA,WAAA,GAAA,IAAA,kPAAA,EAAA,8CAAA,uOAAA,EAAA,KAAA,GAAA,6OAAA,EAAA","debugId":null}},
    {"offset": {"line": 1150, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/table.tsx"],"sourcesContent":["\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AACA;AAEA;;;;AAEA,MAAM,sBAAQ,2KAAgB,MAG5B,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC;YACC,KAAK;YACL,WAAW,IAAA,4HAAE,EAAC,iCAAiC;YAC9C,GAAG,KAAK;;;;;;;;;;;;;AAIf,MAAM,WAAW,GAAG;AAEpB,MAAM,4BAAc,2KAAgB,OAGlC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC;QAAM,KAAK;QAAK,WAAW,IAAA,4HAAE,EAAC,mBAAmB;QAAa,GAAG,KAAK;;;;;;;;AAEzE,YAAY,WAAW,GAAG;AAE1B,MAAM,0BAAY,2KAAgB,OAGhC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC;QACC,KAAK;QACL,WAAW,IAAA,4HAAE,EAAC,8BAA8B;QAC3C,GAAG,KAAK;;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,4BAAc,2KAAgB,OAGlC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC;QACC,KAAK;QACL,WAAW,IAAA,4HAAE,EACX,2DACA;QAED,GAAG,KAAK;;;;;;;;AAGb,YAAY,WAAW,GAAG;AAE1B,MAAM,yBAAW,2KAAgB,OAG/B,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC;QACC,KAAK;QACL,WAAW,IAAA,4HAAE,EACX,6DACA;QAED,GAAG,KAAK;;;;;;;;AAGb,SAAS,WAAW,GAAG;AAEvB,MAAM,0BAAY,2KAAgB,QAGhC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC;QACC,KAAK;QACL,WAAW,IAAA,4HAAE,EACX,oGACA;QAED,GAAG,KAAK;;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,0BAAY,2KAAgB,QAGhC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC;QACC,KAAK;QACL,WAAW,IAAA,4HAAE,EAAC,kDAAkD;QAC/D,GAAG,KAAK;;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,6BAAe,2KAAgB,QAGnC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC;QACC,KAAK;QACL,WAAW,IAAA,4HAAE,EAAC,sCAAsC;QACnD,GAAG,KAAK;;;;;;;;AAGb,aAAa,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 1318, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/finance/payment/add-payment-dialog.tsx"],"sourcesContent":["\n\n'use client';\n\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n  DialogClose,\n  DialogTrigger,\n} from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { useToast } from '@/hooks/use-toast';\nimport { Plus, Loader2, CreditCard, Building2, FileText, Calendar as CalendarIcon, X, Receipt } from 'lucide-react';\nimport { useForm, Controller, useFieldArray } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { paymentSchema, type Payment } from './schema';\nimport { addPayment, getReferences } from './actions';\nimport { getLookups } from '@/app/lookups/actions';\nimport { getExpenseAccounts } from '@/app/finance/chart-of-accounts/lookups';\nimport { Combobox } from '@/components/ui/combobox';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';\nimport { format } from 'date-fns';\nimport { getUnitsForProperty, getRoomsForUnit } from '@/app/tenancy/contract/actions';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport { cn } from '@/lib/utils';\nimport { type Invoice } from '@/app/tenancy/customer/invoice/schema';\nimport { getInvoicesForCustomer } from '@/app/tenancy/customer/invoice/actions';\nimport { getBillsForVendor } from '@/app/vendors/bill/actions';\nimport { type Bill } from '@/app/vendors/bill/schema';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { type Agent } from '@/app/vendors/agents/schema';\nimport { type ReceiptBook } from '../book-management/schema';\n\n\ntype PaymentFormData = z.infer<typeof paymentSchema>;\n\ntype Lookups = {\n    tenants: { value: string, label: string }[];\n    landlords: { value: string, label: string }[];\n    vendors: { value: string, label: string }[];\n    agents: (Agent & { value: string, label: string })[];\n    customers: { value: string, label: string }[];\n    bankAccounts: { value: string, label: string }[];\n    properties: {value: string, label: string}[];\n    units: {value: string, label: string}[];\n    rooms: {value: string, label: string}[];\n    partitions: {value: string, label: string}[];\n    references: {value: string, label: string, amount?: number, propertyCode?: string, unitCode?: string, roomCode?: string, partitionCode?: string, book?: ReceiptBook}[];\n    users: { value: string, label: string }[];\n    receiptBooks: ReceiptBook[];\n    expenseAccounts: { value: string; label: string; }[];\n}\n\ninterface AddPaymentDialogProps {\n  onPaymentAdded: () => void;\n  children?: React.ReactNode;\n  isOpen?: boolean;\n  setIsOpen?: (open: boolean) => void;\n  defaultValues?: Partial<PaymentFormData>;\n  customerInvoices?: Invoice[];\n  vendorBills?: Bill[];\n}\n\nexport function AddPaymentDialog({ onPaymentAdded, children, isOpen: externalOpen, setIsOpen: setExternalOpen, defaultValues, customerInvoices = [], vendorBills = [] }: AddPaymentDialogProps) {\n  const [internalOpen, setInternalOpen] = useState(false);\n  const isOpen = externalOpen ?? internalOpen;\n  const setIsOpen = setExternalOpen ?? setInternalOpen;\n  \n  const [isSaving, setIsSaving] = useState(false);\n  const { toast } = useToast();\n  const [lookups, setLookups] = useState<Lookups>({ tenants: [], landlords: [], vendors: [], agents: [], customers: [], bankAccounts: [], properties: [], units: [], rooms: [], partitions: [], references: [], users: [], receiptBooks: [], expenseAccounts: [] });\n  const [currentUser, setCurrentUser] = useState<string>('');\n\n  const {\n    register,\n    handleSubmit,\n    control,\n    reset,\n    watch,\n    setValue,\n    formState: { errors },\n  } = useForm<PaymentFormData>({\n    resolver: zodResolver(paymentSchema),\n  });\n  \n  const { fields: invoiceFields, append: appendInvoice, remove: removeInvoice } = useFieldArray({\n    control,\n    name: \"invoiceAllocations\"\n  });\n  const { fields: billFields, append: appendBill, remove: removeBill } = useFieldArray({\n    control,\n    name: \"billAllocations\"\n  });\n\n\n  const paymentType = watch('type');\n  const partyType = watch('partyType');\n  const partyName = watch('partyName');\n  const referenceType = watch('referenceType');\n  const paymentMethod = watch('paymentMethod');\n  const watchedProperty = watch('property');\n  const watchedUnit = watch('unitCode');\n  const paymentFrom = watch('paymentFrom');\n  const watchedInvoiceAllocations = watch('invoiceAllocations');\n  const watchedBillAllocations = watch('billAllocations');\n  const watchedCollector = watch('createdByUser');\n  const watchedReferenceNo = watch('referenceNo');\n\n  const [invoicesForCustomer, setInvoicesForCustomer] = useState<Invoice[]>(customerInvoices);\n  const [billsForVendor, setBillsForVendor] = useState<Bill[]>(vendorBills);\n  \n  useEffect(() => {\n    const userProfile = sessionStorage.getItem('userProfile');\n    if(userProfile) {\n        setCurrentUser(JSON.parse(userProfile).name);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (watchedInvoiceAllocations) {\n        const totalAllocated = watchedInvoiceAllocations.reduce((sum, current) => sum + (current.amount || 0), 0);\n        setValue('amount', totalAllocated);\n    }\n  }, [watchedInvoiceAllocations, setValue]);\n  \n   useEffect(() => {\n    if (watchedBillAllocations) {\n        const totalAllocated = watchedBillAllocations.reduce((sum, current) => sum + (current.amount || 0), 0);\n        setValue('amount', totalAllocated);\n    }\n  }, [watchedBillAllocations, setValue]);\n\n\n  useEffect(() => {\n    getLookups().then(data => setLookups(prev => ({...prev, ...data})));\n    getExpenseAccounts().then(data => setLookups(prev => ({...prev, expenseAccounts: data})));\n  }, [])\n  \n   useEffect(() => {\n    const fetchInvoicesAndBills = async () => {\n        if(partyType === 'Customer' && partyName) {\n            const data = await getInvoicesForCustomer(partyName);\n            setInvoicesForCustomer(data);\n            const defaultAllocs = defaultValues?.invoiceAllocations || [];\n            const currentAllocs = watch('invoiceAllocations') || [];\n\n            if(defaultAllocs.length > 0) {\n                setValue('invoiceAllocations', defaultAllocs);\n            } else if (currentAllocs.length === 0) {\n                setValue('invoiceAllocations', data\n                    .filter(inv => inv.status !== 'Paid' && inv.status !== 'Cancelled')\n                    .map(inv => ({ invoiceId: inv.id, amount: 0}))\n                );\n            }\n        } else {\n            setInvoicesForCustomer([]);\n        }\n\n        if(partyType === 'Vendor' && partyName) {\n            const data = await getBillsForVendor(partyName);\n            setBillsForVendor(data);\n            const defaultAllocs = defaultValues?.billAllocations || [];\n            const currentAllocs = watch('billAllocations') || [];\n            if(defaultAllocs.length > 0) {\n                setValue('billAllocations', defaultAllocs);\n            } else if (currentAllocs.length === 0) {\n                setValue('billAllocations', data\n                    .filter(bill => bill.status !== 'Paid' && bill.status !== 'Cancelled')\n                    .map(bill => ({ billId: bill.id, amount: 0}))\n                );\n            }\n        } else {\n            setBillsForVendor([]);\n        }\n    };\n    if (isOpen) {\n        fetchInvoicesAndBills();\n    }\n   }, [isOpen, partyType, partyName, setValue, watch, defaultValues]);\n   \n   useEffect(() => {\n    const fetchReferences = async () => {\n        if (referenceType) {\n            const data = await getReferences(partyType, partyName, referenceType, paymentType, watchedCollector);\n            setLookups(prev => ({...prev, references: data}));\n        } else {\n            setLookups(prev => ({...prev, references: []}));\n        }\n    };\n    fetchReferences();\n   }, [partyType, partyName, referenceType, paymentType, watchedCollector]);\n\n\n   useEffect(() => {\n    const fetchUnits = async () => {\n        if (watchedProperty) {\n            const units = await getUnitsForProperty(watchedProperty);\n            setLookups(prev => ({...prev, units}));\n        } else {\n            setLookups(prev => ({...prev, units: [], rooms: []}));\n        }\n    }\n    fetchUnits();\n  }, [watchedProperty]);\n\n  useEffect(() => {\n    const fetchSubUnits = async () => {\n        if (watchedProperty && watchedUnit) {\n            const rooms = await getRoomsForUnit(watchedProperty, watchedUnit);\n            setLookups(prev => ({...prev, rooms, partitions: []}));\n        } else {\n            setLookups(prev => ({...prev, rooms: [], partitions: []}));\n        }\n    }\n    fetchSubUnits();\n  }, [watchedProperty, watchedUnit]);\n\n\n  useEffect(() => {\n      if(isOpen) {\n        const initialValues = defaultValues || {\n            type: 'Receipt',\n            date: format(new Date(), 'yyyy-MM-dd'),\n            partyType: 'Tenant',\n            partyName: '',\n            amount: 0,\n            paymentMethod: 'Cash',\n            paymentFrom: 'Bank',\n            status: 'Received',\n            invoiceAllocations: [],\n            billAllocations: [],\n        };\n        reset(initialValues);\n      }\n  }, [isOpen, reset, defaultValues]);\n\n  useEffect(() => {\n    if(!defaultValues) {\n        if (paymentType === 'Receipt') {\n            setValue('partyType', 'Tenant');\n            setValue('status', 'Received');\n        } else {\n            setValue('partyType', 'Landlord');\n            setValue('status', 'Paid');\n        }\n        setValue('partyName', '');\n        setValue('referenceType', '');\n        setValue('referenceNo', '');\n    }\n  }, [paymentType, setValue, defaultValues]);\n\n  useEffect(() => {\n    if (referenceType === 'Receipt Book' && watchedReferenceNo) {\n        const receiptNumberOnly = watchedReferenceNo.split('-').pop()?.trim();\n        if (receiptNumberOnly && /^\\d+$/.test(receiptNumberOnly)) {\n             const leafNumber = parseInt(receiptNumberOnly, 10);\n             for(const book of lookups.receiptBooks) {\n                if(leafNumber >= book.receiptStartNo && leafNumber <= book.receiptEndNo) {\n                    if (book.assignedTo && book.assignedTo !== watchedCollector) {\n                        setValue('createdByUser', book.assignedTo);\n                    }\n                    const formattedRef = `Book: ${book.bookNo}, Receipt: ${leafNumber}`;\n                    const existingRef = lookups.references.find(r => r.label === formattedRef);\n                    if(!existingRef) {\n                        setValue('referenceNo', `Book: ${book.bookNo}-${leafNumber}`);\n                    }\n                    break;\n                }\n             }\n        }\n    }\n  }, [watchedReferenceNo, referenceType, lookups.receiptBooks, setValue, watchedCollector, lookups.references]);\n  \n  const partyOptions = {\n      'Tenant': lookups.tenants,\n      'Landlord': lookups.landlords,\n      'Vendor': lookups.vendors,\n      'Agent': lookups.agents,\n      'Customer': lookups.customers\n  }[partyType] || [];\n\n\n  const onSubmit = async (data: PaymentFormData) => {\n    setIsSaving(true);\n    const result = await addPayment({...data, createdByUser: currentUser});\n\n    if (result.success) {\n      toast({\n        title: 'Payment Recorded',\n        description: `Successfully recorded payment of ${new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(data.amount)}.`,\n      });\n      setIsOpen(false);\n      onPaymentAdded();\n    } else {\n      toast({\n        variant: 'destructive',\n        title: 'Error',\n        description: result.error,\n      });\n    }\n    setIsSaving(false);\n  };\n  \n  const handleReset = () => {\n    reset({\n      type: 'Receipt',\n      date: format(new Date(), 'yyyy-MM-dd'),\n      partyType: 'Tenant',\n      partyName: '',\n      amount: 0,\n      paymentMethod: 'Cash',\n      paymentFrom: 'Bank',\n      status: 'Received',\n    });\n  }\n\n  const handleReferenceSelect = (value: string) => {\n    setValue('referenceNo', value);\n    const selectedRef = lookups.references.find(r => r.value === value);\n    if (selectedRef) {\n        if (selectedRef.amount) {\n            setValue('amount', selectedRef.amount);\n        }\n        setValue('description', `Payment for ${referenceType}: ${selectedRef.label}`);\n\n        if (selectedRef.propertyCode) {\n            setValue('property', selectedRef.propertyCode);\n            setTimeout(() => {\n                if(selectedRef.unitCode) setValue('unitCode', selectedRef.unitCode);\n                if(selectedRef.roomCode) setValue('roomCode', selectedRef.roomCode);\n            }, 200);\n        }\n    }\n  }\n\n  const handlePartySelect = (partyCode: string) => {\n    setValue('partyName', partyCode);\n\n    if (partyType === 'Agent') {\n        const selectedAgent = lookups.agents.find(agent => agent.value === partyCode);\n        if (selectedAgent && selectedAgent.commissionRate) {\n            setValue('amount', selectedAgent.commissionRate);\n        }\n        setValue('agentCode', partyCode);\n    }\n  };\n\n  const referenceTypeOptions = () => {\n    if (paymentType === 'Payment') {\n        return [\n            <SelectItem key=\"Lease Contract\" value=\"Lease Contract\">Lease Contract</SelectItem>,\n            <SelectItem key=\"Bill\" value=\"Bill\">Bill</SelectItem>,\n        ];\n    } else { // Receipt\n        return [\n            <SelectItem key=\"Tenancy Contract\" value=\"Tenancy Contract\">Tenancy Contract</SelectItem>,\n            <SelectItem key=\"Invoice\" value=\"Invoice\">Invoice</SelectItem>,\n            <SelectItem key=\"Receipt Book\" value=\"Receipt Book\">Receipt Book</SelectItem>,\n        ];\n    }\n  }\n\n  return (\n    <Dialog open={isOpen} onOpenChange={setIsOpen}>\n      {children ? (\n        <DialogTrigger asChild>{children}</DialogTrigger>\n      ) : (\n         <DialogTrigger asChild><Button><Plus className=\"mr-2 h-4 w-4\" /> Add Payment</Button></DialogTrigger>\n      )}\n      <DialogContent className=\"max-w-4xl\">\n        <form>\n            <DialogHeader>\n                <div className=\"flex items-center space-x-3\">\n                    <div className=\"p-2 bg-primary/10 rounded-lg\">\n                        <Receipt className=\"h-6 w-6 text-primary\" />\n                    </div>\n                    <div>\n                        <DialogTitle>Record New Payment</DialogTitle>\n                    </div>\n                </div>\n            </DialogHeader>\n            <div className=\"space-y-6 py-4 max-h-[70vh] overflow-y-auto pr-4\">\n                <Card>\n                    <CardHeader><CardTitle className=\"flex items-center space-x-2\"><CreditCard className=\"h-5 w-5 text-primary\" /><span>Payment Details</span></CardTitle></CardHeader>\n                    <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                        <div className=\"space-y-2\"><Label>Payment Type *</Label><Controller name=\"type\" control={control} render={({ field }) => (<Select onValueChange={field.onChange} value={field.value}><SelectTrigger><SelectValue placeholder=\"Select payment type\"/></SelectTrigger><SelectContent><SelectItem value=\"Receipt\">Receipt (Incoming)</SelectItem><SelectItem value=\"Payment\">Payment (Outgoing)</SelectItem></SelectContent></Select>)} /></div>\n                        <div className=\"space-y-2\"><Label>Payment Date *</Label><Controller name=\"date\" control={control} render={({ field }) => ( <Popover><PopoverTrigger asChild><Button variant={\"outline\"} className={cn(\"w-full justify-start text-left font-normal\", !field.value && \"text-muted-foreground\")}><CalendarIcon className=\"mr-2 h-4 w-4\" />{field.value ? format(new Date(field.value), \"PPP\") : <span>Pick a date</span>}</Button></PopoverTrigger><PopoverContent className=\"w-auto p-0\"><Input type=\"date\" value={field.value} onChange={e => field.onChange(e.target.value)} /></PopoverContent></Popover>)} /></div>\n                        <div className=\"space-y-2\"><Label>Party Type *</Label><Controller name=\"partyType\" control={control} render={({ field }) => (<Select onValueChange={field.onChange} value={field.value}><SelectTrigger><SelectValue placeholder=\"Select party type\"/></SelectTrigger><SelectContent><SelectItem value=\"Tenant\">Tenant</SelectItem><SelectItem value=\"Landlord\">Landlord</SelectItem><SelectItem value=\"Vendor\">Vendor</SelectItem><SelectItem value=\"Agent\">Agent</SelectItem><SelectItem value=\"Customer\">Customer</SelectItem></SelectContent></Select>)} /></div>\n                        <div className=\"space-y-2\"><Label>Party Name *</Label><Controller name=\"partyName\" control={control} render={({ field }) => (<Combobox options={partyOptions} value={field.value || ''} onSelect={handlePartySelect} placeholder=\"Select party\"/>)} /></div>\n                        <div className=\"space-y-2\"><Label>Amount *</Label><Input type=\"number\" placeholder=\"0.00\" {...register('amount', { valueAsNumber: true })} /></div>\n                        <div className=\"space-y-2\"><Label>Payment Method *</Label><Controller name=\"paymentMethod\" control={control} render={({ field }) => (<Select onValueChange={field.onChange} value={field.value}><SelectTrigger><SelectValue placeholder=\"Select payment method\"/></SelectTrigger><SelectContent><SelectItem value=\"Cash\">Cash</SelectItem><SelectItem value=\"Cheque\">Cheque</SelectItem><SelectItem value=\"Bank Transfer\">Bank Transfer</SelectItem><SelectItem value=\"Card\">Card</SelectItem></SelectContent></Select>)} /></div>\n                    </CardContent>\n                </Card>\n\n                <Card>\n                    <CardHeader><CardTitle>Payment Source</CardTitle></CardHeader>\n                    <CardContent className=\"space-y-4\">\n                        <Controller\n                            name=\"paymentFrom\"\n                            control={control}\n                            render={({ field }) => (\n                                <RadioGroup\n                                onValueChange={field.onChange}\n                                value={field.value}\n                                className=\"flex space-x-6\"\n                                >\n                                <div className=\"flex items-center space-x-2\">\n                                    <RadioGroupItem value=\"Bank\" id=\"bank\" />\n                                    <Label htmlFor=\"bank\">Bank</Label>\n                                </div>\n                                <div className=\"flex items-center space-x-2\">\n                                    <RadioGroupItem value=\"Petty Cash\" id=\"petty-cash\" />\n                                    <Label htmlFor=\"petty-cash\">Petty Cash</Label>\n                                </div>\n                                </RadioGroup>\n                            )}\n                        />\n                        {paymentFrom === 'Bank' && (\n                            <div className=\"space-y-2\">\n                                <Label>Bank Account</Label>\n                                <Controller\n                                    name=\"bankAccountId\"\n                                    control={control}\n                                    render={({ field }) => (\n                                        <Select\n                                            onValueChange={field.onChange}\n                                            value={field.value}\n                                        >\n                                            <SelectTrigger>\n                                                <SelectValue placeholder=\"Select bank account\"/>\n                                            </SelectTrigger>\n                                            <SelectContent>\n                                                {lookups.bankAccounts.map(acc => (\n                                                    <SelectItem key={acc.value} value={acc.value}>{acc.label}</SelectItem>\n                                                ))}\n                                            </SelectContent>\n                                        </Select>\n                                    )}\n                                />\n                            </div>\n                        )}\n                    </CardContent>\n                </Card>\n\n                 <Card>\n                    <CardHeader><CardTitle className=\"flex items-center space-x-2\"><Building2 className=\"h-5 w-5 text-primary\" /><span>Property Details</span></CardTitle></CardHeader>\n                    <CardContent className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                         <div className=\"space-y-2\"><Label>Property</Label><Controller name=\"property\" control={control} render={({ field }) => (<Combobox options={lookups.properties || []} value={field.value || ''} onSelect={value => { field.onChange(value); setValue('unitCode', ''); setValue('roomCode',''); }} placeholder=\"Select property\"/>)} /></div>\n                         <div className=\"space-y-2\"><Label>Unit</Label><Controller name=\"unitCode\" control={control} render={({ field }) => (<Combobox options={lookups.units.filter(u => u.propertyCode === watchedProperty)} value={field.value || ''} onSelect={value => { field.onChange(value); setValue('roomCode',''); }} placeholder=\"Select unit\" disabled={!watchedProperty}/>)} /></div>\n                         <div className=\"space-y-2\"><Label>Room</Label><Controller name=\"roomCode\" control={control} render={({ field }) => (<Combobox options={lookups.rooms.filter(r => r.propertyCode === watchedProperty && r.unitCode === watchedUnit)} value={field.value || ''} onSelect={field.onChange} placeholder=\"Select room\" disabled={!watchedUnit}/>)} /></div>\n                    </CardContent>\n                </Card>\n\n                 <Card>\n                    <CardHeader><CardTitle className=\"flex items-center space-x-2\"><FileText className=\"h-5 w-5 text-primary\" /><span>Reference Information (Optional)</span></CardTitle></CardHeader>\n                    <CardContent className=\"space-y-4\">\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                           <div className=\"space-y-2\">\n                                <Label>Reference Type</Label>\n                                <Controller \n                                    name=\"referenceType\" \n                                    control={control} \n                                    render={({ field }) => (\n                                        <Select onValueChange={field.onChange} value={field.value}>\n                                            <SelectTrigger><SelectValue placeholder=\"Select reference type\" /></SelectTrigger>\n                                            <SelectContent>\n                                                {referenceTypeOptions()}\n                                                <SelectItem value=\"Other\">Other</SelectItem>\n                                            </SelectContent>\n                                        </Select>\n                                    )} \n                                />\n                           </div>\n                           {paymentType === 'Receipt' && referenceType === 'Receipt Book' && (\n                                <div className=\"space-y-2\">\n                                    <Label>Collector</Label>\n                                    <Controller name=\"createdByUser\" control={control} render={({ field }) => (\n                                        <Combobox \n                                            options={lookups.users} \n                                            value={field.value || ''} \n                                            onSelect={field.onChange} \n                                            placeholder=\"Select Collector\"/>\n                                    )} />\n                                </div>\n                            )}\n                           <div className=\"space-y-2\"><Label>Reference Number</Label><Controller name=\"referenceNo\" control={control} render={({ field }) => (<Combobox options={lookups.references} value={field.value || ''} onSelect={handleReferenceSelect} placeholder=\"Enter or select a reference\" />)} /></div>\n                        </div>\n                        <div className=\"space-y-2\"><Label>Description</Label><Textarea placeholder=\"Additional notes or description\" rows={3} {...register('description')} /></div>\n                    </CardContent>\n                </Card>\n\n                 {paymentType === 'Receipt' && partyType === 'Customer' && invoicesForCustomer.length > 0 && (\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Invoice Allocations</CardTitle>\n                      <CardDescription>Allocate this payment to open invoices.</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <Table>\n                        <TableHeader>\n                          <TableRow>\n                            <TableHead>Invoice #</TableHead>\n                            <TableHead>Due Date</TableHead>\n                            <TableHead className=\"text-right\">Balance Due</TableHead>\n                            <TableHead className=\"text-right\">Allocation</TableHead>\n                          </TableRow>\n                        </TableHeader>\n                        <TableBody>\n                          {invoicesForCustomer.map((invoice, index) => {\n                            const fieldIndex = invoiceFields.findIndex(f => f.invoiceId === invoice.id);\n                            if (fieldIndex === -1) return null;\n                            return (\n                                <TableRow key={invoice.id}>\n                                  <TableCell>{invoice.invoiceNo}</TableCell>\n                                  <TableCell>{format(new Date(invoice.dueDate), 'PP')}</TableCell>\n                                  <TableCell className=\"text-right\">{new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(invoice.remainingBalance || 0)}</TableCell>\n                                  <TableCell className=\"text-right\">\n                                    <Controller\n                                      control={control}\n                                      name={`invoiceAllocations.${fieldIndex}.amount`}\n                                      defaultValue={0}\n                                      render={({ field }) => (\n                                        <Input\n                                          type=\"number\"\n                                          {...field}\n                                          className=\"text-right\"\n                                          onChange={e => field.onChange(parseFloat(e.target.value) || 0)}\n                                          max={invoice.remainingBalance}\n                                        />\n                                      )}\n                                    />\n                                  </TableCell>\n                                </TableRow>\n                              )\n                          })}\n                        </TableBody>\n                      </Table>\n                    </CardContent>\n                  </Card>\n                )}\n                {paymentType === 'Payment' && partyType === 'Vendor' && billsForVendor.length > 0 && (\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Bill Allocations</CardTitle>\n                      <CardDescription>Allocate this payment to open bills.</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <Table>\n                        <TableHeader>\n                          <TableRow>\n                            <TableHead>Bill #</TableHead>\n                            <TableHead>Due Date</TableHead>\n                            <TableHead className=\"text-right\">Balance Due</TableHead>\n                            <TableHead className=\"text-right\">Allocation</TableHead>\n                          </TableRow>\n                        </TableHeader>\n                        <TableBody>\n                          {billsForVendor.map((bill, index) => {\n                            const fieldIndex = billFields.findIndex(f => f.billId === bill.id);\n                            if (fieldIndex === -1) return null;\n                            return (\n                                <TableRow key={bill.id}>\n                                  <TableCell>{bill.billNo}</TableCell>\n                                  <TableCell>{format(new Date(bill.dueDate), 'PP')}</TableCell>\n                                  <TableCell className=\"text-right\">{new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(bill.remainingBalance || 0)}</TableCell>\n                                  <TableCell className=\"text-right\">\n                                    <Controller\n                                      control={control}\n                                      name={`billAllocations.${fieldIndex}.amount`}\n                                      defaultValue={0}\n                                      render={({ field }) => (\n                                        <Input\n                                          type=\"number\"\n                                          {...field}\n                                          className=\"text-right\"\n                                          onChange={e => field.onChange(parseFloat(e.target.value) || 0)}\n                                          max={bill.remainingBalance}\n                                        />\n                                      )}\n                                    />\n                                  </TableCell>\n                                </TableRow>\n                              )\n                          })}\n                        </TableBody>\n                      </Table>\n                    </CardContent>\n                  </Card>\n                )}\n            </div>\n            <DialogFooter className=\"mt-6 pt-4 border-t\">\n                <Button type=\"button\" variant=\"outline\" onClick={handleReset}><X className=\"mr-2 h-4 w-4\"/>Clear</Button>\n                <DialogClose asChild><Button type=\"button\" variant=\"outline\">Cancel</Button></DialogClose>\n                <Button type=\"button\" onClick={handleSubmit(onSubmit)} disabled={isSaving}>\n                    {isSaving && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                    Record Payment\n                </Button>\n            </DialogFooter>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n"],"names":[],"mappings":";;;;;AAIA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;AApCA;;;;;;;;;;;;;;;;;;;;;;;;;;AAsEO,SAAS,iBAAiB,KAA6J;QAA7J,EAAE,cAAc,EAAE,QAAQ,EAAE,QAAQ,YAAY,EAAE,WAAW,eAAe,EAAE,aAAa,EAAE,mBAAmB,EAAE,EAAE,cAAc,EAAE,EAAyB,GAA7J;;IAC/B,MAAM,CAAC,cAAc,gBAAgB,GAAG,IAAA,yKAAQ,EAAC;IACjD,MAAM,SAAS,yBAAA,0BAAA,eAAgB;IAC/B,MAAM,YAAY,4BAAA,6BAAA,kBAAmB;IAErC,MAAM,CAAC,UAAU,YAAY,GAAG,IAAA,yKAAQ,EAAC;IACzC,MAAM,EAAE,KAAK,EAAE,GAAG,IAAA,2IAAQ;IAC1B,MAAM,CAAC,SAAS,WAAW,GAAG,IAAA,yKAAQ,EAAU;QAAE,SAAS,EAAE;QAAE,WAAW,EAAE;QAAE,SAAS,EAAE;QAAE,QAAQ,EAAE;QAAE,WAAW,EAAE;QAAE,cAAc,EAAE;QAAE,YAAY,EAAE;QAAE,OAAO,EAAE;QAAE,OAAO,EAAE;QAAE,YAAY,EAAE;QAAE,YAAY,EAAE;QAAE,OAAO,EAAE;QAAE,cAAc,EAAE;QAAE,iBAAiB,EAAE;IAAC;IAC/P,MAAM,CAAC,aAAa,eAAe,GAAG,IAAA,yKAAQ,EAAS;IAEvD,MAAM,EACJ,QAAQ,EACR,YAAY,EACZ,OAAO,EACP,KAAK,EACL,KAAK,EACL,QAAQ,EACR,WAAW,EAAE,MAAM,EAAE,EACtB,GAAG,IAAA,4KAAO,EAAkB;QAC3B,UAAU,IAAA,gLAAW,EAAC,8JAAa;IACrC;IAEA,MAAM,EAAE,QAAQ,aAAa,EAAE,QAAQ,aAAa,EAAE,QAAQ,aAAa,EAAE,GAAG,IAAA,kLAAa,EAAC;QAC5F;QACA,MAAM;IACR;IACA,MAAM,EAAE,QAAQ,UAAU,EAAE,QAAQ,UAAU,EAAE,QAAQ,UAAU,EAAE,GAAG,IAAA,kLAAa,EAAC;QACnF;QACA,MAAM;IACR;IAGA,MAAM,cAAc,MAAM;IAC1B,MAAM,YAAY,MAAM;IACxB,MAAM,YAAY,MAAM;IACxB,MAAM,gBAAgB,MAAM;IAC5B,MAAM,gBAAgB,MAAM;IAC5B,MAAM,kBAAkB,MAAM;IAC9B,MAAM,cAAc,MAAM;IAC1B,MAAM,cAAc,MAAM;IAC1B,MAAM,4BAA4B,MAAM;IACxC,MAAM,yBAAyB,MAAM;IACrC,MAAM,mBAAmB,MAAM;IAC/B,MAAM,qBAAqB,MAAM;IAEjC,MAAM,CAAC,qBAAqB,uBAAuB,GAAG,IAAA,yKAAQ,EAAY;IAC1E,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,IAAA,yKAAQ,EAAS;IAE7D,IAAA,0KAAS;sCAAC;YACR,MAAM,cAAc,eAAe,OAAO,CAAC;YAC3C,IAAG,aAAa;gBACZ,eAAe,KAAK,KAAK,CAAC,aAAa,IAAI;YAC/C;QACF;qCAAG,EAAE;IAEL,IAAA,0KAAS;sCAAC;YACR,IAAI,2BAA2B;gBAC3B,MAAM,iBAAiB,0BAA0B,MAAM;iEAAC,CAAC,KAAK,UAAY,MAAM,CAAC,QAAQ,MAAM,IAAI,CAAC;gEAAG;gBACvG,SAAS,UAAU;YACvB;QACF;qCAAG;QAAC;QAA2B;KAAS;IAEvC,IAAA,0KAAS;sCAAC;YACT,IAAI,wBAAwB;gBACxB,MAAM,iBAAiB,uBAAuB,MAAM;iEAAC,CAAC,KAAK,UAAY,MAAM,CAAC,QAAQ,MAAM,IAAI,CAAC;gEAAG;gBACpG,SAAS,UAAU;YACvB;QACF;qCAAG;QAAC;QAAwB;KAAS;IAGrC,IAAA,0KAAS;sCAAC;YACR,IAAA,8KAAU,IAAG,IAAI;8CAAC,CAAA,OAAQ;sDAAW,CAAA,OAAQ,CAAC;gCAAC,GAAG,IAAI;gCAAE,GAAG,IAAI;4BAAA,CAAC;;;YAChE,IAAA,iNAAkB,IAAG,IAAI;8CAAC,CAAA,OAAQ;sDAAW,CAAA,OAAQ,CAAC;gCAAC,GAAG,IAAI;gCAAE,iBAAiB;4BAAI,CAAC;;;QACxF;qCAAG,EAAE;IAEJ,IAAA,0KAAS;sCAAC;YACT,MAAM;oEAAwB;oBAC1B,IAAG,cAAc,cAAc,WAAW;wBACtC,MAAM,OAAO,MAAM,IAAA,iNAAsB,EAAC;wBAC1C,uBAAuB;wBACvB,MAAM,gBAAgB,CAAA,0BAAA,oCAAA,cAAe,kBAAkB,KAAI,EAAE;wBAC7D,MAAM,gBAAgB,MAAM,yBAAyB,EAAE;wBAEvD,IAAG,cAAc,MAAM,GAAG,GAAG;4BACzB,SAAS,sBAAsB;wBACnC,OAAO,IAAI,cAAc,MAAM,KAAK,GAAG;4BACnC,SAAS,sBAAsB,KAC1B,MAAM;oFAAC,CAAA,MAAO,IAAI,MAAM,KAAK,UAAU,IAAI,MAAM,KAAK;mFACtD,GAAG;oFAAC,CAAA,MAAO,CAAC;wCAAE,WAAW,IAAI,EAAE;wCAAE,QAAQ;oCAAC,CAAC;;wBAEpD;oBACJ,OAAO;wBACH,uBAAuB,EAAE;oBAC7B;oBAEA,IAAG,cAAc,YAAY,WAAW;wBACpC,MAAM,OAAO,MAAM,IAAA,6LAAiB,EAAC;wBACrC,kBAAkB;wBAClB,MAAM,gBAAgB,CAAA,0BAAA,oCAAA,cAAe,eAAe,KAAI,EAAE;wBAC1D,MAAM,gBAAgB,MAAM,sBAAsB,EAAE;wBACpD,IAAG,cAAc,MAAM,GAAG,GAAG;4BACzB,SAAS,mBAAmB;wBAChC,OAAO,IAAI,cAAc,MAAM,KAAK,GAAG;4BACnC,SAAS,mBAAmB,KACvB,MAAM;oFAAC,CAAA,OAAQ,KAAK,MAAM,KAAK,UAAU,KAAK,MAAM,KAAK;mFACzD,GAAG;oFAAC,CAAA,OAAQ,CAAC;wCAAE,QAAQ,KAAK,EAAE;wCAAE,QAAQ;oCAAC,CAAC;;wBAEnD;oBACJ,OAAO;wBACH,kBAAkB,EAAE;oBACxB;gBACJ;;YACA,IAAI,QAAQ;gBACR;YACJ;QACD;qCAAG;QAAC;QAAQ;QAAW;QAAW;QAAU;QAAO;KAAc;IAEjE,IAAA,0KAAS;sCAAC;YACT,MAAM;8DAAkB;oBACpB,IAAI,eAAe;wBACf,MAAM,OAAO,MAAM,IAAA,4LAAa,EAAC,WAAW,WAAW,eAAe,aAAa;wBACnF;0EAAW,CAAA,OAAQ,CAAC;oCAAC,GAAG,IAAI;oCAAE,YAAY;gCAAI,CAAC;;oBACnD,OAAO;wBACH;0EAAW,CAAA,OAAQ,CAAC;oCAAC,GAAG,IAAI;oCAAE,YAAY,EAAE;gCAAA,CAAC;;oBACjD;gBACJ;;YACA;QACD;qCAAG;QAAC;QAAW;QAAW;QAAe;QAAa;KAAiB;IAGvE,IAAA,0KAAS;sCAAC;YACT,MAAM;yDAAa;oBACf,IAAI,iBAAiB;wBACjB,MAAM,QAAQ,MAAM,IAAA,mMAAmB,EAAC;wBACxC;qEAAW,CAAA,OAAQ,CAAC;oCAAC,GAAG,IAAI;oCAAE;gCAAK,CAAC;;oBACxC,OAAO;wBACH;qEAAW,CAAA,OAAQ,CAAC;oCAAC,GAAG,IAAI;oCAAE,OAAO,EAAE;oCAAE,OAAO,EAAE;gCAAA,CAAC;;oBACvD;gBACJ;;YACA;QACF;qCAAG;QAAC;KAAgB;IAEpB,IAAA,0KAAS;sCAAC;YACR,MAAM;4DAAgB;oBAClB,IAAI,mBAAmB,aAAa;wBAChC,MAAM,QAAQ,MAAM,IAAA,+LAAe,EAAC,iBAAiB;wBACrD;wEAAW,CAAA,OAAQ,CAAC;oCAAC,GAAG,IAAI;oCAAE;oCAAO,YAAY,EAAE;gCAAA,CAAC;;oBACxD,OAAO;wBACH;wEAAW,CAAA,OAAQ,CAAC;oCAAC,GAAG,IAAI;oCAAE,OAAO,EAAE;oCAAE,YAAY,EAAE;gCAAA,CAAC;;oBAC5D;gBACJ;;YACA;QACF;qCAAG;QAAC;QAAiB;KAAY;IAGjC,IAAA,0KAAS;sCAAC;YACN,IAAG,QAAQ;gBACT,MAAM,gBAAgB,iBAAiB;oBACnC,MAAM;oBACN,MAAM,IAAA,mKAAM,EAAC,IAAI,QAAQ;oBACzB,WAAW;oBACX,WAAW;oBACX,QAAQ;oBACR,eAAe;oBACf,aAAa;oBACb,QAAQ;oBACR,oBAAoB,EAAE;oBACtB,iBAAiB,EAAE;gBACvB;gBACA,MAAM;YACR;QACJ;qCAAG;QAAC;QAAQ;QAAO;KAAc;IAEjC,IAAA,0KAAS;sCAAC;YACR,IAAG,CAAC,eAAe;gBACf,IAAI,gBAAgB,WAAW;oBAC3B,SAAS,aAAa;oBACtB,SAAS,UAAU;gBACvB,OAAO;oBACH,SAAS,aAAa;oBACtB,SAAS,UAAU;gBACvB;gBACA,SAAS,aAAa;gBACtB,SAAS,iBAAiB;gBAC1B,SAAS,eAAe;YAC5B;QACF;qCAAG;QAAC;QAAa;QAAU;KAAc;IAEzC,IAAA,0KAAS;sCAAC;YACR,IAAI,kBAAkB,kBAAkB,oBAAoB;oBAC9B;gBAA1B,MAAM,qBAAoB,gCAAA,mBAAmB,KAAK,CAAC,KAAK,GAAG,gBAAjC,oDAAA,8BAAqC,IAAI;gBACnE,IAAI,qBAAqB,QAAQ,IAAI,CAAC,oBAAoB;oBACrD,MAAM,aAAa,SAAS,mBAAmB;oBAC/C,KAAI,MAAM,QAAQ,QAAQ,YAAY,CAAE;wBACrC,IAAG,cAAc,KAAK,cAAc,IAAI,cAAc,KAAK,YAAY,EAAE;4BACrE,IAAI,KAAK,UAAU,IAAI,KAAK,UAAU,KAAK,kBAAkB;gCACzD,SAAS,iBAAiB,KAAK,UAAU;4BAC7C;4BACA,MAAM,eAAe,AAAC,SAAiC,OAAzB,KAAK,MAAM,EAAC,eAAwB,OAAX;4BACvD,MAAM,cAAc,QAAQ,UAAU,CAAC,IAAI;0EAAC,CAAA,IAAK,EAAE,KAAK,KAAK;;4BAC7D,IAAG,CAAC,aAAa;gCACb,SAAS,eAAe,AAAC,SAAuB,OAAf,KAAK,MAAM,EAAC,KAAc,OAAX;4BACpD;4BACA;wBACJ;oBACH;gBACL;YACJ;QACF;qCAAG;QAAC;QAAoB;QAAe,QAAQ,YAAY;QAAE;QAAU;QAAkB,QAAQ,UAAU;KAAC;IAE5G,MAAM,eAAe;QACjB,UAAU,QAAQ,OAAO;QACzB,YAAY,QAAQ,SAAS;QAC7B,UAAU,QAAQ,OAAO;QACzB,SAAS,QAAQ,MAAM;QACvB,YAAY,QAAQ,SAAS;IACjC,CAAC,CAAC,UAAU,IAAI,EAAE;IAGlB,MAAM,WAAW,OAAO;QACtB,YAAY;QACZ,MAAM,SAAS,MAAM,IAAA,yLAAU,EAAC;YAAC,GAAG,IAAI;YAAE,eAAe;QAAW;QAEpE,IAAI,OAAO,OAAO,EAAE;YAClB,MAAM;gBACJ,OAAO;gBACP,aAAa,AAAC,oCAA8H,OAA3F,IAAI,KAAK,YAAY,CAAC,SAAS;oBAAE,OAAO;oBAAY,UAAU;gBAAM,GAAG,MAAM,CAAC,KAAK,MAAM,GAAE;YAC9I;YACA,UAAU;YACV;QACF,OAAO;YACL,MAAM;gBACJ,SAAS;gBACT,OAAO;gBACP,aAAa,OAAO,KAAK;YAC3B;QACF;QACA,YAAY;IACd;IAEA,MAAM,cAAc;QAClB,MAAM;YACJ,MAAM;YACN,MAAM,IAAA,mKAAM,EAAC,IAAI,QAAQ;YACzB,WAAW;YACX,WAAW;YACX,QAAQ;YACR,eAAe;YACf,aAAa;YACb,QAAQ;QACV;IACF;IAEA,MAAM,wBAAwB,CAAC;QAC7B,SAAS,eAAe;QACxB,MAAM,cAAc,QAAQ,UAAU,CAAC,IAAI,CAAC,CAAA,IAAK,EAAE,KAAK,KAAK;QAC7D,IAAI,aAAa;YACb,IAAI,YAAY,MAAM,EAAE;gBACpB,SAAS,UAAU,YAAY,MAAM;YACzC;YACA,SAAS,eAAe,AAAC,eAAgC,OAAlB,eAAc,MAAsB,OAAlB,YAAY,KAAK;YAE1E,IAAI,YAAY,YAAY,EAAE;gBAC1B,SAAS,YAAY,YAAY,YAAY;gBAC7C,WAAW;oBACP,IAAG,YAAY,QAAQ,EAAE,SAAS,YAAY,YAAY,QAAQ;oBAClE,IAAG,YAAY,QAAQ,EAAE,SAAS,YAAY,YAAY,QAAQ;gBACtE,GAAG;YACP;QACJ;IACF;IAEA,MAAM,oBAAoB,CAAC;QACzB,SAAS,aAAa;QAEtB,IAAI,cAAc,SAAS;YACvB,MAAM,gBAAgB,QAAQ,MAAM,CAAC,IAAI,CAAC,CAAA,QAAS,MAAM,KAAK,KAAK;YACnE,IAAI,iBAAiB,cAAc,cAAc,EAAE;gBAC/C,SAAS,UAAU,cAAc,cAAc;YACnD;YACA,SAAS,aAAa;QAC1B;IACF;IAEA,MAAM,uBAAuB;QAC3B,IAAI,gBAAgB,WAAW;YAC3B,OAAO;8BACH,6LAAC,mJAAU;oBAAsB,OAAM;8BAAiB;mBAAxC;;;;;8BAChB,6LAAC,mJAAU;oBAAY,OAAM;8BAAO;mBAApB;;;;;aACnB;QACL,OAAO;YACH,OAAO;8BACH,6LAAC,mJAAU;oBAAwB,OAAM;8BAAmB;mBAA5C;;;;;8BAChB,6LAAC,mJAAU;oBAAe,OAAM;8BAAU;mBAA1B;;;;;8BAChB,6LAAC,mJAAU;oBAAoB,OAAM;8BAAe;mBAApC;;;;;aACnB;QACL;IACF;IAEA,qBACE,6LAAC,+IAAM;QAAC,MAAM;QAAQ,cAAc;;YACjC,yBACC,6LAAC,sJAAa;gBAAC,OAAO;0BAAE;;;;;qCAEvB,6LAAC,sJAAa;gBAAC,OAAO;0BAAC,cAAA,6LAAC,+IAAM;;sCAAC,6LAAC,6MAAI;4BAAC,WAAU;;;;;;wBAAiB;;;;;;;;;;;;0BAEnE,6LAAC,sJAAa;gBAAC,WAAU;0BACvB,cAAA,6LAAC;;sCACG,6LAAC,qJAAY;sCACT,cAAA,6LAAC;gCAAI,WAAU;;kDACX,6LAAC;wCAAI,WAAU;kDACX,cAAA,6LAAC,sNAAO;4CAAC,WAAU;;;;;;;;;;;kDAEvB,6LAAC;kDACG,cAAA,6LAAC,oJAAW;sDAAC;;;;;;;;;;;;;;;;;;;;;;sCAIzB,6LAAC;4BAAI,WAAU;;8CACX,6LAAC,2IAAI;;sDACD,6LAAC,iJAAU;sDAAC,cAAA,6LAAC,gJAAS;gDAAC,WAAU;;kEAA8B,6LAAC,mOAAU;wDAAC,WAAU;;;;;;kEAAyB,6LAAC;kEAAK;;;;;;;;;;;;;;;;;sDACpH,6LAAC,kJAAW;4CAAC,WAAU;;8DACnB,6LAAC;oDAAI,WAAU;;sEAAY,6LAAC,6IAAK;sEAAC;;;;;;sEAAsB,6LAAC,+KAAU;4DAAC,MAAK;4DAAO,SAAS;4DAAS,QAAQ;oEAAC,EAAE,KAAK,EAAE;qFAAM,6LAAC,+IAAM;oEAAC,eAAe,MAAM,QAAQ;oEAAE,OAAO,MAAM,KAAK;;sFAAE,6LAAC,sJAAa;sFAAC,cAAA,6LAAC,oJAAW;gFAAC,aAAY;;;;;;;;;;;sFAAuC,6LAAC,sJAAa;;8FAAC,6LAAC,mJAAU;oFAAC,OAAM;8FAAU;;;;;;8FAA+B,6LAAC,mJAAU;oFAAC,OAAM;8FAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8DAC1W,6LAAC;oDAAI,WAAU;;sEAAY,6LAAC,6IAAK;sEAAC;;;;;;sEAAsB,6LAAC,+KAAU;4DAAC,MAAK;4DAAO,SAAS;4DAAS,QAAQ;oEAAC,EAAE,KAAK,EAAE;qFAAO,6LAAC,iJAAO;;sFAAC,6LAAC,wJAAc;4EAAC,OAAO;sFAAC,cAAA,6LAAC,+IAAM;gFAAC,SAAS;gFAAW,WAAW,IAAA,4HAAE,EAAC,8CAA8C,CAAC,MAAM,KAAK,IAAI;;kGAA0B,6LAAC,yNAAY;wFAAC,WAAU;;;;;;oFAAkB,MAAM,KAAK,GAAG,IAAA,mKAAM,EAAC,IAAI,KAAK,MAAM,KAAK,GAAG,uBAAS,6LAAC;kGAAK;;;;;;;;;;;;;;;;;sFAA6C,6LAAC,wJAAc;4EAAC,WAAU;sFAAa,cAAA,6LAAC,6IAAK;gFAAC,MAAK;gFAAO,OAAO,MAAM,KAAK;gFAAE,UAAU,CAAA,IAAK,MAAM,QAAQ,CAAC,EAAE,MAAM,CAAC,KAAK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8DAC1iB,6LAAC;oDAAI,WAAU;;sEAAY,6LAAC,6IAAK;sEAAC;;;;;;sEAAoB,6LAAC,+KAAU;4DAAC,MAAK;4DAAY,SAAS;4DAAS,QAAQ;oEAAC,EAAE,KAAK,EAAE;qFAAM,6LAAC,+IAAM;oEAAC,eAAe,MAAM,QAAQ;oEAAE,OAAO,MAAM,KAAK;;sFAAE,6LAAC,sJAAa;sFAAC,cAAA,6LAAC,oJAAW;gFAAC,aAAY;;;;;;;;;;;sFAAqC,6LAAC,sJAAa;;8FAAC,6LAAC,mJAAU;oFAAC,OAAM;8FAAS;;;;;;8FAAmB,6LAAC,mJAAU;oFAAC,OAAM;8FAAW;;;;;;8FAAqB,6LAAC,mJAAU;oFAAC,OAAM;8FAAS;;;;;;8FAAmB,6LAAC,mJAAU;oFAAC,OAAM;8FAAQ;;;;;;8FAAkB,6LAAC,mJAAU;oFAAC,OAAM;8FAAW;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8DAC3e,6LAAC;oDAAI,WAAU;;sEAAY,6LAAC,6IAAK;sEAAC;;;;;;sEAAoB,6LAAC,+KAAU;4DAAC,MAAK;4DAAY,SAAS;4DAAS,QAAQ;oEAAC,EAAE,KAAK,EAAE;qFAAM,6LAAC,mJAAQ;oEAAC,SAAS;oEAAc,OAAO,MAAM,KAAK,IAAI;oEAAI,UAAU;oEAAmB,aAAY;;;;;;;;;;;;;;;;;;8DACjO,6LAAC;oDAAI,WAAU;;sEAAY,6LAAC,6IAAK;sEAAC;;;;;;sEAAgB,6LAAC,6IAAK;4DAAC,MAAK;4DAAS,aAAY;4DAAQ,GAAG,SAAS,UAAU;gEAAE,eAAe;4DAAK,EAAE;;;;;;;;;;;;8DACzI,6LAAC;oDAAI,WAAU;;sEAAY,6LAAC,6IAAK;sEAAC;;;;;;sEAAwB,6LAAC,+KAAU;4DAAC,MAAK;4DAAgB,SAAS;4DAAS,QAAQ;oEAAC,EAAE,KAAK,EAAE;qFAAM,6LAAC,+IAAM;oEAAC,eAAe,MAAM,QAAQ;oEAAE,OAAO,MAAM,KAAK;;sFAAE,6LAAC,sJAAa;sFAAC,cAAA,6LAAC,oJAAW;gFAAC,aAAY;;;;;;;;;;;sFAAyC,6LAAC,sJAAa;;8FAAC,6LAAC,mJAAU;oFAAC,OAAM;8FAAO;;;;;;8FAAiB,6LAAC,mJAAU;oFAAC,OAAM;8FAAS;;;;;;8FAAmB,6LAAC,mJAAU;oFAAC,OAAM;8FAAgB;;;;;;8FAA0B,6LAAC,mJAAU;oFAAC,OAAM;8FAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8CAIrd,6LAAC,2IAAI;;sDACD,6LAAC,iJAAU;sDAAC,cAAA,6LAAC,gJAAS;0DAAC;;;;;;;;;;;sDACvB,6LAAC,kJAAW;4CAAC,WAAU;;8DACnB,6LAAC,+KAAU;oDACP,MAAK;oDACL,SAAS;oDACT,QAAQ;4DAAC,EAAE,KAAK,EAAE;6EACd,6LAAC,2JAAU;4DACX,eAAe,MAAM,QAAQ;4DAC7B,OAAO,MAAM,KAAK;4DAClB,WAAU;;8EAEV,6LAAC;oEAAI,WAAU;;sFACX,6LAAC,+JAAc;4EAAC,OAAM;4EAAO,IAAG;;;;;;sFAChC,6LAAC,6IAAK;4EAAC,SAAQ;sFAAO;;;;;;;;;;;;8EAE1B,6LAAC;oEAAI,WAAU;;sFACX,6LAAC,+JAAc;4EAAC,OAAM;4EAAa,IAAG;;;;;;sFACtC,6LAAC,6IAAK;4EAAC,SAAQ;sFAAa;;;;;;;;;;;;;;;;;;;;;;;;gDAKvC,gBAAgB,wBACb,6LAAC;oDAAI,WAAU;;sEACX,6LAAC,6IAAK;sEAAC;;;;;;sEACP,6LAAC,+KAAU;4DACP,MAAK;4DACL,SAAS;4DACT,QAAQ;oEAAC,EAAE,KAAK,EAAE;qFACd,6LAAC,+IAAM;oEACH,eAAe,MAAM,QAAQ;oEAC7B,OAAO,MAAM,KAAK;;sFAElB,6LAAC,sJAAa;sFACV,cAAA,6LAAC,oJAAW;gFAAC,aAAY;;;;;;;;;;;sFAE7B,6LAAC,sJAAa;sFACT,QAAQ,YAAY,CAAC,GAAG,CAAC,CAAA,oBACtB,6LAAC,mJAAU;oFAAiB,OAAO,IAAI,KAAK;8FAAG,IAAI,KAAK;mFAAvC,IAAI,KAAK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8CAW7D,6LAAC,2IAAI;;sDACF,6LAAC,iJAAU;sDAAC,cAAA,6LAAC,gJAAS;gDAAC,WAAU;;kEAA8B,6LAAC,gOAAS;wDAAC,WAAU;;;;;;kEAAyB,6LAAC;kEAAK;;;;;;;;;;;;;;;;;sDACnH,6LAAC,kJAAW;4CAAC,WAAU;;8DAClB,6LAAC;oDAAI,WAAU;;sEAAY,6LAAC,6IAAK;sEAAC;;;;;;sEAAgB,6LAAC,+KAAU;4DAAC,MAAK;4DAAW,SAAS;4DAAS,QAAQ;oEAAC,EAAE,KAAK,EAAE;qFAAM,6LAAC,mJAAQ;oEAAC,SAAS,QAAQ,UAAU,IAAI,EAAE;oEAAE,OAAO,MAAM,KAAK,IAAI;oEAAI,UAAU,CAAA;wEAAW,MAAM,QAAQ,CAAC;wEAAQ,SAAS,YAAY;wEAAK,SAAS,YAAW;oEAAK;oEAAG,aAAY;;;;;;;;;;;;;;;;;;8DAC7S,6LAAC;oDAAI,WAAU;;sEAAY,6LAAC,6IAAK;sEAAC;;;;;;sEAAY,6LAAC,+KAAU;4DAAC,MAAK;4DAAW,SAAS;4DAAS,QAAQ;oEAAC,EAAE,KAAK,EAAE;qFAAM,6LAAC,mJAAQ;oEAAC,SAAS,QAAQ,KAAK,CAAC,MAAM,CAAC,CAAA,IAAK,EAAE,YAAY,KAAK;oEAAkB,OAAO,MAAM,KAAK,IAAI;oEAAI,UAAU,CAAA;wEAAW,MAAM,QAAQ,CAAC;wEAAQ,SAAS,YAAW;oEAAK;oEAAG,aAAY;oEAAc,UAAU,CAAC;;;;;;;;;;;;;;;;;;8DAC7U,6LAAC;oDAAI,WAAU;;sEAAY,6LAAC,6IAAK;sEAAC;;;;;;sEAAY,6LAAC,+KAAU;4DAAC,MAAK;4DAAW,SAAS;4DAAS,QAAQ;oEAAC,EAAE,KAAK,EAAE;qFAAM,6LAAC,mJAAQ;oEAAC,SAAS,QAAQ,KAAK,CAAC,MAAM,CAAC,CAAA,IAAK,EAAE,YAAY,KAAK,mBAAmB,EAAE,QAAQ,KAAK;oEAAc,OAAO,MAAM,KAAK,IAAI;oEAAI,UAAU,MAAM,QAAQ;oEAAE,aAAY;oEAAc,UAAU,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8CAIrU,6LAAC,2IAAI;;sDACF,6LAAC,iJAAU;sDAAC,cAAA,6LAAC,gJAAS;gDAAC,WAAU;;kEAA8B,6LAAC,6NAAQ;wDAAC,WAAU;;;;;;kEAAyB,6LAAC;kEAAK;;;;;;;;;;;;;;;;;sDAClH,6LAAC,kJAAW;4CAAC,WAAU;;8DACnB,6LAAC;oDAAI,WAAU;;sEACZ,6LAAC;4DAAI,WAAU;;8EACV,6LAAC,6IAAK;8EAAC;;;;;;8EACP,6LAAC,+KAAU;oEACP,MAAK;oEACL,SAAS;oEACT,QAAQ;4EAAC,EAAE,KAAK,EAAE;6FACd,6LAAC,+IAAM;4EAAC,eAAe,MAAM,QAAQ;4EAAE,OAAO,MAAM,KAAK;;8FACrD,6LAAC,sJAAa;8FAAC,cAAA,6LAAC,oJAAW;wFAAC,aAAY;;;;;;;;;;;8FACxC,6LAAC,sJAAa;;wFACT;sGACD,6LAAC,mJAAU;4FAAC,OAAM;sGAAQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wDAM9C,gBAAgB,aAAa,kBAAkB,gCAC3C,6LAAC;4DAAI,WAAU;;8EACX,6LAAC,6IAAK;8EAAC;;;;;;8EACP,6LAAC,+KAAU;oEAAC,MAAK;oEAAgB,SAAS;oEAAS,QAAQ;4EAAC,EAAE,KAAK,EAAE;6FACjE,6LAAC,mJAAQ;4EACL,SAAS,QAAQ,KAAK;4EACtB,OAAO,MAAM,KAAK,IAAI;4EACtB,UAAU,MAAM,QAAQ;4EACxB,aAAY;;;;;;;;;;;;;;;;;;sEAI7B,6LAAC;4DAAI,WAAU;;8EAAY,6LAAC,6IAAK;8EAAC;;;;;;8EAAwB,6LAAC,+KAAU;oEAAC,MAAK;oEAAc,SAAS;oEAAS,QAAQ;4EAAC,EAAE,KAAK,EAAE;6FAAM,6LAAC,mJAAQ;4EAAC,SAAS,QAAQ,UAAU;4EAAE,OAAO,MAAM,KAAK,IAAI;4EAAI,UAAU;4EAAuB,aAAY;;;;;;;;;;;;;;;;;;;;;;;;8DAEpP,6LAAC;oDAAI,WAAU;;sEAAY,6LAAC,6IAAK;sEAAC;;;;;;sEAAmB,6LAAC,mJAAQ;4DAAC,aAAY;4DAAkC,MAAM;4DAAI,GAAG,SAAS,cAAc;;;;;;;;;;;;;;;;;;;;;;;;gCAIvJ,gBAAgB,aAAa,cAAc,cAAc,oBAAoB,MAAM,GAAG,mBACtF,6LAAC,2IAAI;;sDACH,6LAAC,iJAAU;;8DACT,6LAAC,gJAAS;8DAAC;;;;;;8DACX,6LAAC,sJAAe;8DAAC;;;;;;;;;;;;sDAEnB,6LAAC,kJAAW;sDACV,cAAA,6LAAC,6IAAK;;kEACJ,6LAAC,mJAAW;kEACV,cAAA,6LAAC,gJAAQ;;8EACP,6LAAC,iJAAS;8EAAC;;;;;;8EACX,6LAAC,iJAAS;8EAAC;;;;;;8EACX,6LAAC,iJAAS;oEAAC,WAAU;8EAAa;;;;;;8EAClC,6LAAC,iJAAS;oEAAC,WAAU;8EAAa;;;;;;;;;;;;;;;;;kEAGtC,6LAAC,iJAAS;kEACP,oBAAoB,GAAG,CAAC,CAAC,SAAS;4DACjC,MAAM,aAAa,cAAc,SAAS,CAAC,CAAA,IAAK,EAAE,SAAS,KAAK,QAAQ,EAAE;4DAC1E,IAAI,eAAe,CAAC,GAAG,OAAO;4DAC9B,qBACI,6LAAC,gJAAQ;;kFACP,6LAAC,iJAAS;kFAAE,QAAQ,SAAS;;;;;;kFAC7B,6LAAC,iJAAS;kFAAE,IAAA,mKAAM,EAAC,IAAI,KAAK,QAAQ,OAAO,GAAG;;;;;;kFAC9C,6LAAC,iJAAS;wEAAC,WAAU;kFAAc,IAAI,KAAK,YAAY,CAAC,SAAS;4EAAE,OAAO;4EAAY,UAAU;wEAAM,GAAG,MAAM,CAAC,QAAQ,gBAAgB,IAAI;;;;;;kFAC7I,6LAAC,iJAAS;wEAAC,WAAU;kFACnB,cAAA,6LAAC,+KAAU;4EACT,SAAS;4EACT,MAAM,AAAC,sBAAgC,OAAX,YAAW;4EACvC,cAAc;4EACd,QAAQ;oFAAC,EAAE,KAAK,EAAE;qGAChB,6LAAC,6IAAK;oFACJ,MAAK;oFACJ,GAAG,KAAK;oFACT,WAAU;oFACV,UAAU,CAAA,IAAK,MAAM,QAAQ,CAAC,WAAW,EAAE,MAAM,CAAC,KAAK,KAAK;oFAC5D,KAAK,QAAQ,gBAAgB;;;;;;;;;;;;;;;;;;+DAfxB,QAAQ,EAAE;;;;;wDAsB/B;;;;;;;;;;;;;;;;;;;;;;;gCAMT,gBAAgB,aAAa,cAAc,YAAY,eAAe,MAAM,GAAG,mBAC9E,6LAAC,2IAAI;;sDACH,6LAAC,iJAAU;;8DACT,6LAAC,gJAAS;8DAAC;;;;;;8DACX,6LAAC,sJAAe;8DAAC;;;;;;;;;;;;sDAEnB,6LAAC,kJAAW;sDACV,cAAA,6LAAC,6IAAK;;kEACJ,6LAAC,mJAAW;kEACV,cAAA,6LAAC,gJAAQ;;8EACP,6LAAC,iJAAS;8EAAC;;;;;;8EACX,6LAAC,iJAAS;8EAAC;;;;;;8EACX,6LAAC,iJAAS;oEAAC,WAAU;8EAAa;;;;;;8EAClC,6LAAC,iJAAS;oEAAC,WAAU;8EAAa;;;;;;;;;;;;;;;;;kEAGtC,6LAAC,iJAAS;kEACP,eAAe,GAAG,CAAC,CAAC,MAAM;4DACzB,MAAM,aAAa,WAAW,SAAS,CAAC,CAAA,IAAK,EAAE,MAAM,KAAK,KAAK,EAAE;4DACjE,IAAI,eAAe,CAAC,GAAG,OAAO;4DAC9B,qBACI,6LAAC,gJAAQ;;kFACP,6LAAC,iJAAS;kFAAE,KAAK,MAAM;;;;;;kFACvB,6LAAC,iJAAS;kFAAE,IAAA,mKAAM,EAAC,IAAI,KAAK,KAAK,OAAO,GAAG;;;;;;kFAC3C,6LAAC,iJAAS;wEAAC,WAAU;kFAAc,IAAI,KAAK,YAAY,CAAC,SAAS;4EAAE,OAAO;4EAAY,UAAU;wEAAM,GAAG,MAAM,CAAC,KAAK,gBAAgB,IAAI;;;;;;kFAC1I,6LAAC,iJAAS;wEAAC,WAAU;kFACnB,cAAA,6LAAC,+KAAU;4EACT,SAAS;4EACT,MAAM,AAAC,mBAA6B,OAAX,YAAW;4EACpC,cAAc;4EACd,QAAQ;oFAAC,EAAE,KAAK,EAAE;qGAChB,6LAAC,6IAAK;oFACJ,MAAK;oFACJ,GAAG,KAAK;oFACT,WAAU;oFACV,UAAU,CAAA,IAAK,MAAM,QAAQ,CAAC,WAAW,EAAE,MAAM,CAAC,KAAK,KAAK;oFAC5D,KAAK,KAAK,gBAAgB;;;;;;;;;;;;;;;;;;+DAfrB,KAAK,EAAE;;;;;wDAsB5B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sCAOd,6LAAC,qJAAY;4BAAC,WAAU;;8CACpB,6LAAC,+IAAM;oCAAC,MAAK;oCAAS,SAAQ;oCAAU,SAAS;;sDAAa,6LAAC,oMAAC;4CAAC,WAAU;;;;;;wCAAgB;;;;;;;8CAC3F,6LAAC,oJAAW;oCAAC,OAAO;8CAAC,cAAA,6LAAC,+IAAM;wCAAC,MAAK;wCAAS,SAAQ;kDAAU;;;;;;;;;;;8CAC7D,6LAAC,+IAAM;oCAAC,MAAK;oCAAS,SAAS,aAAa;oCAAW,UAAU;;wCAC5D,0BAAY,6LAAC,+NAAO;4CAAC,WAAU;;;;;;wCAA+B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQnF;GA3hBgB;;QAMI,2IAAQ;QAYtB,4KAAO;QAIqE,kLAAa;QAItB,kLAAa;;;KA1BtE","debugId":null}},
    {"offset": {"line": 3349, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/alert-dialog.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AAEA;AACA;AANA;;;;;;AAQA,MAAM,cAAc,sLAAyB;AAE7C,MAAM,qBAAqB,yLAA4B;AAEvD,MAAM,oBAAoB,wLAA2B;AAErD,MAAM,mCAAqB,2KAAgB,CAGzC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC,yLAA4B;QAC3B,WAAW,IAAA,4HAAE,EACX,2JACA;QAED,GAAG,KAAK;QACT,KAAK;;;;;;;KAVH;AAaN,mBAAmB,WAAW,GAAG,yLAA4B,CAAC,WAAW;AAEzE,MAAM,mCAAqB,2KAAgB,OAGzC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC;;0BACC,6LAAC;;;;;0BACD,6LAAC,yLAA4B;gBAC3B,KAAK;gBACL,WAAW,IAAA,4HAAE,EACX,+fACA;gBAED,GAAG,KAAK;;;;;;;;;;;;;;AAIf,mBAAmB,WAAW,GAAG,yLAA4B,CAAC,WAAW;AAEzE,MAAM,oBAAoB;QAAC,EACzB,SAAS,EACT,GAAG,OACkC;yBACrC,6LAAC;QACC,WAAW,IAAA,4HAAE,EACX,oDACA;QAED,GAAG,KAAK;;;;;;;MATP;AAYN,kBAAkB,WAAW,GAAG;AAEhC,MAAM,oBAAoB;QAAC,EACzB,SAAS,EACT,GAAG,OACkC;yBACrC,6LAAC;QACC,WAAW,IAAA,4HAAE,EACX,iEACA;QAED,GAAG,KAAK;;;;;;;MATP;AAYN,kBAAkB,WAAW,GAAG;AAEhC,MAAM,iCAAmB,2KAAgB,OAGvC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC,uLAA0B;QACzB,KAAK;QACL,WAAW,IAAA,4HAAE,EAAC,yBAAyB;QACtC,GAAG,KAAK;;;;;;;;AAGb,iBAAiB,WAAW,GAAG,uLAA0B,CAAC,WAAW;AAErE,MAAM,uCAAyB,2KAAgB,OAG7C,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC,6LAAgC;QAC/B,KAAK;QACL,WAAW,IAAA,4HAAE,EAAC,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;;AAGb,uBAAuB,WAAW,GAChC,6LAAgC,CAAC,WAAW;AAE9C,MAAM,kCAAoB,2KAAgB,OAGxC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC,wLAA2B;QAC1B,KAAK;QACL,WAAW,IAAA,4HAAE,EAAC,IAAA,uJAAc,KAAI;QAC/B,GAAG,KAAK;;;;;;;;AAGb,kBAAkB,WAAW,GAAG,wLAA2B,CAAC,WAAW;AAEvE,MAAM,kCAAoB,2KAAgB,QAGxC,QAA0B;QAAzB,EAAE,SAAS,EAAE,GAAG,OAAO;yBACxB,6LAAC,wLAA2B;QAC1B,KAAK;QACL,WAAW,IAAA,4HAAE,EACX,IAAA,uJAAc,EAAC;YAAE,SAAS;QAAU,IACpC,gBACA;QAED,GAAG,KAAK;;;;;;;;AAGb,kBAAkB,WAAW,GAAG,wLAA2B,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 3534, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/finance/due-payments/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { type Contract as TenancyContract } from '@/app/tenancy/contract/schema';\nimport { type LeaseContract } from '@/app/lease/contract/schema';\nimport { type Payment } from '@/app/finance/payment/schema';\nimport { type DuePayment } from './schema';\nimport { parseISO, isBefore, startOfToday, isAfter, differenceInDays } from 'date-fns';\nimport { revalidatePath } from 'next/cache';\n\nconst tenancyContractsFilePath = path.join(process.cwd(), 'src/app/tenancy/contract/contracts-data.json');\nconst leaseContractsFilePath = path.join(process.cwd(), 'src/app/lease/contract/contracts-data.json');\nconst paymentsFilePath = path.join(process.cwd(), 'src/app/finance/payment/payments-data.json');\nconst landlordsFilePath = path.join(process.cwd(), 'src/app/landlord/landlords-data.json');\n\nasync function readData(filePath: string) {\n    try {\n        const data = await fs.readFile(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            return [];\n        }\n        throw error;\n    }\n}\n\nexport async function getDuePayments(): Promise<DuePayment[]> {\n    const tenancyContracts: TenancyContract[] = await readData(tenancyContractsFilePath);\n    const leaseContracts: LeaseContract[] = await readData(leaseContractsFilePath);\n    const payments: Payment[] = await readData(paymentsFilePath);\n    const landlords: any[] = await readData(landlordsFilePath);\n\n    const landlordMap = new Map(landlords.map(l => [l.landlordData.code, l.landlordData.name]));\n\n    const paidInstallments = new Set(\n        payments.filter(p => p.referenceNo && p.status !== 'Cancelled').map(p => p.referenceNo)\n    );\n    \n    const today = startOfToday();\n    let dueItems: DuePayment[] = [];\n\n    // Process Tenancy Contracts (Receivables)\n    tenancyContracts.forEach(contract => {\n        if (!contract.paymentSchedule) return;\n\n        contract.paymentSchedule.forEach(installment => {\n            const installmentId = `${contract.contractNo}-${installment.installment}`;\n            const dueDate = parseISO(installment.dueDate);\n            let status: DuePayment['status'] = 'Upcoming';\n\n            if(paidInstallments.has(installmentId)) {\n                status = 'Paid';\n            } else if (isBefore(dueDate, today)) {\n                status = 'Overdue';\n            } else if (differenceInDays(dueDate, today) <= 30) {\n                 status = 'Due Soon';\n            }\n\n            dueItems.push({\n                id: installmentId,\n                partyType: 'Tenant',\n                partyName: contract.tenantName,\n                type: 'Receivable',\n                property: contract.property,\n                contractNo: contract.contractNo,\n                dueDate: installment.dueDate,\n                amount: installment.amount,\n                status,\n            });\n        });\n    });\n\n    // Process Lease Contracts (Payables)\n    leaseContracts.forEach(contract => {\n        if (!contract.paymentSchedule) return;\n\n        contract.paymentSchedule.forEach(installment => {\n            const installmentId = `${contract.contractNo}-${installment.installment}`;\n            const dueDate = parseISO(installment.dueDate);\n            let status: DuePayment['status'] = 'Upcoming';\n\n            if(paidInstallments.has(installmentId)) {\n                status = 'Paid';\n            } else if (isBefore(dueDate, today)) {\n                status = 'Overdue';\n            } else if (differenceInDays(dueDate, today) <= 30) {\n                 status = 'Due Soon';\n            }\n            \n            dueItems.push({\n                id: installmentId,\n                partyType: 'Landlord',\n                partyName: landlordMap.get(contract.landlordCode) || contract.landlordCode,\n                type: 'Payable',\n                property: contract.property,\n                contractNo: contract.contractNo,\n                dueDate: installment.dueDate,\n                amount: installment.amount,\n                status,\n            });\n        });\n    });\n\n    return dueItems.sort((a, b) => new Date(a.dueDate).getTime() - new Date(b.dueDate).getTime());\n}\n\nexport async function getSummary(duePayments: DuePayment[]) {\n    const summary = {\n        totalReceivable: 0,\n        totalPayable: 0,\n        overdueReceivable: 0,\n        overduePayable: 0,\n    };\n\n    for(const item of duePayments) {\n        if(item.status === 'Paid') continue;\n\n        if(item.type === 'Receivable') {\n            summary.totalReceivable += item.amount;\n            if(item.status === 'Overdue') {\n                summary.overdueReceivable += item.amount;\n            }\n        } else { // Payable\n            summary.totalPayable += item.amount;\n             if(item.status === 'Overdue') {\n                summary.overduePayable += item.amount;\n            }\n        }\n    }\n\n    return summary;\n}\n\nexport async function deleteDuePaymentInstallment(installmentId: string) {\n    try {\n        const [contractNo, installmentNo] = installmentId.split('-');\n        \n        const leaseContracts: LeaseContract[] = await readData(leaseContractsFilePath);\n        const tenancyContracts: TenancyContract[] = await readData(tenancyContractsFilePath);\n\n        let contractFound = false;\n        \n        const leaseIndex = leaseContracts.findIndex(c => c.contractNo === contractNo);\n        if (leaseIndex > -1) {\n            leaseContracts[leaseIndex].paymentSchedule = leaseContracts[leaseIndex].paymentSchedule.filter(\n                inst => inst.installment.toString() !== installmentNo\n            );\n            await fs.writeFile(leaseContractsFilePath, JSON.stringify(leaseContracts, null, 2), 'utf-8');\n            contractFound = true;\n        }\n\n        const tenancyIndex = tenancyContracts.findIndex(c => c.contractNo === contractNo);\n        if (tenancyIndex > -1) {\n            tenancyContracts[tenancyIndex].paymentSchedule = tenancyContracts[tenancyIndex].paymentSchedule.filter(\n                inst => inst.installment.toString() !== installmentNo\n            );\n            await fs.writeFile(tenancyContractsFilePath, JSON.stringify(tenancyContracts, null, 2), 'utf-8');\n            contractFound = true;\n        }\n\n        if (!contractFound) {\n            return { success: false, error: 'Could not find the source contract for this due payment.' };\n        }\n\n        revalidatePath('/finance/due-payments');\n        return { success: true };\n    } catch(error) {\n        return { success: false, error: 'Failed to delete due payment entry.' };\n    }\n}\n"],"names":[],"mappings":";;;;;;;IAwIsB,8BAAA,WAAA,GAAA,IAAA,kPAAA,EAAA,8CAAA,uOAAA,EAAA,KAAA,GAAA,6OAAA,EAAA","debugId":null}},
    {"offset": {"line": 3549, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/finance/due-payments/columns.tsx"],"sourcesContent":["\n'use client';\n\nimport { useState } from 'react';\nimport { ColumnDef } from '@tanstack/react-table';\nimport { ArrowUpDown, ArrowDown, ArrowUp, User, Building, MoreHorizontal, Pencil, LinkIcon, Trash2 } from 'lucide-react';\nimport { format, isBefore, startOfToday } from 'date-fns';\nimport { cn } from '@/lib/utils';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { DuePayment } from './schema';\nimport { AddPaymentDialog } from '@/app/finance/payment/add-payment-dialog';\nimport { type Payment } from '@/app/finance/payment/schema';\nimport { useRouter } from 'next/navigation';\nimport { useCurrency } from '@/context/currency-context';\nimport { useToast } from '@/hooks/use-toast';\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger, DropdownMenuSeparator } from '@/components/ui/dropdown-menu';\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '@/components/ui/alert-dialog';\nimport { deleteDuePaymentInstallment } from './actions';\n\n\nconst statusConfig: { [key in DuePayment['status']]: { label: string, className: string }} = {\n    'Upcoming': { label: 'Upcoming', className: 'bg-gray-500/20 text-gray-700' },\n    'Due Soon': { label: 'Due Soon', className: 'bg-yellow-500/20 text-yellow-700' },\n    'Overdue': { label: 'Overdue', className: 'bg-red-500/20 text-red-700' },\n    'Paid': { label: 'Paid', className: 'bg-green-500/20 text-green-700' },\n}\n\nconst ActionsCell = ({ row, onRefresh }: { row: { original: DuePayment }, onRefresh: () => void }) => {\n    const router = useRouter();\n    const { toast } = useToast();\n    const [isPaymentDialogOpen, setIsPaymentDialogOpen] = useState(false);\n    const [isDeleting, setIsDeleting] = useState(false);\n    const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n    const duePayment = row.original;\n\n    const defaultValues: Partial<Omit<Payment, 'id'>> = {\n        type: duePayment.type === 'Receivable' ? 'Receipt' : 'Payment',\n        date: format(new Date(), 'yyyy-MM-dd'),\n        partyType: duePayment.partyType,\n        partyName: duePayment.partyName,\n        amount: duePayment.amount,\n        paymentMethod: 'Cash',\n        paymentFrom: 'Petty Cash',\n        referenceNo: duePayment.id,\n        contractNo: duePayment.contractNo,\n        property: duePayment.property,\n        remarks: `Payment for installment ${duePayment.id}`,\n        status: duePayment.type === 'Receivable' ? 'Received' : 'Paid',\n    };\n    \n    const handleShare = () => {\n        const paymentUrl = `${window.location.origin}/pay?invoice=${duePayment.id}&amount=${duePayment.amount}&description=${encodeURIComponent(`Payment for ${duePayment.id}`)}`;\n        navigator.clipboard.writeText(paymentUrl).then(() => {\n            toast({ title: \"Link Copied\", description: \"Payment link copied to clipboard.\" });\n        }, (err) => {\n            toast({ variant: 'destructive', title: \"Error\", description: \"Could not copy link.\"});\n        });\n    }\n\n    const handleDelete = async () => {\n        setIsDeleting(true);\n        const result = await deleteDuePaymentInstallment(duePayment.id);\n        if (result.success) {\n            toast({ title: 'Success', description: 'Due payment installment has been deleted.' });\n            onRefresh();\n        } else {\n            toast({ variant: 'destructive', title: 'Error', description: result.error });\n        }\n        setIsDeleting(false);\n        setIsDeleteDialogOpen(false);\n    };\n\n    return (\n        <>\n            <AddPaymentDialog\n                isOpen={isPaymentDialogOpen}\n                setIsOpen={setIsPaymentDialogOpen}\n                defaultValues={defaultValues}\n                onPaymentAdded={onRefresh}\n            />\n             <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>\n                <AlertDialogContent>\n                    <AlertDialogHeader>\n                        <AlertDialogTitle>Are you sure?</AlertDialogTitle>\n                        <AlertDialogDescription>This will permanently delete this due payment installment from its contract. This action cannot be undone.</AlertDialogDescription>\n                    </AlertDialogHeader>\n                    <AlertDialogFooter>\n                        <AlertDialogCancel>Cancel</AlertDialogCancel>\n                        <AlertDialogAction onClick={handleDelete} disabled={isDeleting} className=\"bg-destructive hover:bg-destructive/90\">\n                            {isDeleting ? 'Deleting...' : 'Delete'}\n                        </AlertDialogAction>\n                    </AlertDialogFooter>\n                </AlertDialogContent>\n            </AlertDialog>\n            <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                    <Button variant=\"ghost\" size=\"icon\"><MoreHorizontal className=\"h-4 w-4\"/></Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent>\n                    <DropdownMenuItem onClick={() => setIsPaymentDialogOpen(true)} disabled={duePayment.status === 'Paid'}>\n                        Record Payment\n                    </DropdownMenuItem>\n                    {duePayment.type === 'Receivable' && (\n                        <DropdownMenuItem onClick={handleShare} disabled={duePayment.status === 'Paid'}>\n                            <LinkIcon className=\"mr-2 h-4 w-4\" /> Get Payment Link\n                        </DropdownMenuItem>\n                    )}\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem onSelect={() => setIsDeleteDialogOpen(true)} className=\"text-destructive\">\n                        <Trash2 className=\"mr-2 h-4 w-4\" /> Delete Entry\n                    </DropdownMenuItem>\n                </DropdownMenuContent>\n            </DropdownMenu>\n        </>\n    )\n}\n\nexport const columns = (onRefresh: () => void): ColumnDef<DuePayment>[] => [\n  {\n    id: 'select',\n    header: ({ table }) => (\n      <Checkbox\n        checked={table.getIsAllPageRowsSelected()}\n        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n        aria-label=\"Select all\"\n      />\n    ),\n    cell: ({ row }) => (\n      <Checkbox\n        checked={row.getIsSelected()}\n        onCheckedChange={(value) => row.toggleSelected(!!value)}\n        aria-label=\"Select row\"\n      />\n    ),\n    enableSorting: false,\n    enableHiding: false,\n  },\n  {\n    accessorKey: 'type',\n    header: 'Type',\n    cell: ({ row }) => {\n        const type = row.original.type;\n        const color = type === 'Receivable' ? 'text-green-600' : 'text-red-600';\n        const Icon = type === 'Receivable' ? ArrowDown : ArrowUp;\n        return <span className={cn('font-medium flex items-center gap-2', color)}><Icon className=\"h-4 w-4\"/>{type}</span>\n    }\n  },\n  {\n    accessorKey: 'dueDate',\n    header: ({ column }) => (\n      <Button\n        variant=\"ghost\"\n        onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}\n      >\n        Due Date\n        <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n      </Button>\n    ),\n    cell: ({ row }) => {\n        const date = new Date(row.getValue('dueDate'));\n        const isOverdue = isBefore(date, startOfToday()) && row.original.status !== 'Paid';\n        return <span className={cn(isOverdue && 'font-bold text-destructive')}>{format(date, 'PP')}</span>;\n    },\n  },\n  {\n    accessorKey: 'partyName',\n    header: 'Party',\n    cell: ({ row }) => {\n        const partyType = row.original.partyType;\n        const Icon = partyType === 'Tenant' ? User : Building;\n        return (\n            <div className=\"flex flex-col\">\n                <span className=\"font-medium\">{row.original.partyName}</span>\n                <span className=\"text-xs text-muted-foreground flex items-center gap-1\"><Icon className=\"h-3 w-3\" />{partyType}</span>\n            </div>\n        )\n    }\n  },\n  {\n    accessorKey: 'property',\n    header: 'Property',\n  },\n  {\n    accessorKey: 'amount',\n    header: () => <div className=\"text-right\">Amount</div>,\n    cell: function Cell({ row }) {\n      const { formatCurrency } = useCurrency();\n      const amount = parseFloat(row.getValue('amount'));\n      \n      return <div className=\"text-right font-medium\">{formatCurrency(amount)}</div>;\n    },\n  },\n  {\n    accessorKey: 'status',\n    header: 'Status',\n    cell: ({ row }) => {\n      const status = row.getValue('status') as DuePayment['status'];\n      const config = statusConfig[status];\n      return <Badge variant={'outline'} className={cn(config.className, 'border-transparent')}>{config.label}</Badge>;\n    },\n  },\n   {\n    id: 'actions',\n    header: 'Action',\n    cell: ({ row }) => <ActionsCell row={row} onRefresh={onRefresh} />,\n  },\n];\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 4055, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/finance/due-payments/data-table.tsx"],"sourcesContent":["\n'use client';\n\nimport * as React from 'react';\nimport {\n  ColumnDef,\n  ColumnFiltersState,\n  SortingState,\n  VisibilityState,\n  flexRender,\n  getCoreRowModel,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\n\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\n\ninterface DataTableProps<TData, TValue> {\n  columns: ColumnDef<TData, TValue>[];\n  data: TData[];\n}\n\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n}: DataTableProps<TData, TValue>) {\n  const [sorting, setSorting] = React.useState<SortingState>([]);\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>([]);\n  const [columnVisibility, setColumnVisibility] = React.useState<VisibilityState>({});\n  const [rowSelection, setRowSelection] = React.useState({});\n\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    onSortingChange: setSorting,\n    getSortedRowModel: getSortedRowModel(),\n    onColumnFiltersChange: setColumnFilters,\n    getFilteredRowModel: getFilteredRowModel(),\n    onColumnVisibilityChange: setColumnVisibility,\n    onRowSelectionChange: setRowSelection,\n    state: {\n      sorting,\n      columnFilters,\n      columnVisibility,\n      rowSelection,\n    },\n  });\n\n  return (\n    <div>\n      <div className=\"flex items-center py-4 gap-2\">\n        <Input\n          placeholder=\"Filter by party name...\"\n          value={(table.getColumn('partyName')?.getFilterValue() as string) ?? ''}\n          onChange={(event) =>\n            table.getColumn('partyName')?.setFilterValue(event.target.value)\n          }\n          className=\"max-w-sm\"\n        />\n        <Select onValueChange={(value) => table.getColumn('status')?.setFilterValue(value === 'all' ? '' : value)}>\n            <SelectTrigger className=\"w-[180px]\">\n                <SelectValue placeholder=\"Filter by status\" />\n            </SelectTrigger>\n            <SelectContent>\n                <SelectItem value=\"all\">All Statuses</SelectItem>\n                <SelectItem value=\"Upcoming\">Upcoming</SelectItem>\n                <SelectItem value=\"Due Soon\">Due Soon</SelectItem>\n                <SelectItem value=\"Overdue\">Overdue</SelectItem>\n                <SelectItem value=\"Paid\">Paid</SelectItem>\n            </SelectContent>\n        </Select>\n        <Select onValueChange={(value) => table.getColumn('type')?.setFilterValue(value === 'all' ? '' : value)}>\n            <SelectTrigger className=\"w-[180px]\">\n                <SelectValue placeholder=\"Filter by type\" />\n            </SelectTrigger>\n            <SelectContent>\n                <SelectItem value=\"all\">All Types</SelectItem>\n                <SelectItem value=\"Receivable\">Receivable</SelectItem>\n                <SelectItem value=\"Payable\">Payable</SelectItem>\n            </SelectContent>\n        </Select>\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"outline\" className=\"ml-auto\">\n              Columns\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\">\n            {table\n              .getAllColumns()\n              .filter((column) => column.getCanHide())\n              .map((column) => {\n                return (\n                  <DropdownMenuCheckboxItem\n                    key={column.id}\n                    className=\"capitalize\"\n                    checked={column.getIsVisible()}\n                    onCheckedChange={(value) =>\n                      column.toggleVisibility(!!value)\n                    }\n                  >\n                    {column.id}\n                  </DropdownMenuCheckboxItem>\n                );\n              })}\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n      <div className=\"rounded-md border\">\n        <Table>\n          <TableHeader>\n            {table.getHeaderGroups().map((headerGroup) => (\n              <TableRow key={headerGroup.id}>\n                {headerGroup.headers.map((header) => {\n                  return (\n                    <TableHead key={header.id}>\n                      {header.isPlaceholder\n                        ? null\n                        : flexRender(\n                            header.column.columnDef.header,\n                            header.getContext()\n                          )}\n                    </TableHead>\n                  );\n                })}\n              </TableRow>\n            ))}\n          </TableHeader>\n          <TableBody>\n            {table.getRowModel().rows?.length ? (\n              table.getRowModel().rows.map((row) => (\n                <TableRow\n                  key={row.id}\n                  data-state={row.getIsSelected() && 'selected'}\n                >\n                  {row.getVisibleCells().map((cell) => (\n                    <TableCell key={cell.id}>\n                      {flexRender(\n                        cell.column.columnDef.cell,\n                        cell.getContext()\n                      )}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))\n            ) : (\n              <TableRow>\n                <TableCell\n                  colSpan={columns.length}\n                  className=\"h-24 text-center\"\n                >\n                  No results.\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </div>\n      <div className=\"flex items-center justify-end space-x-2 py-4\">\n        <div className=\"flex-1 text-sm text-muted-foreground\">\n          {table.getFilteredSelectedRowModel().rows.length} of{' '}\n          {table.getFilteredRowModel().rows.length} row(s) selected.\n        </div>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => table.previousPage()}\n          disabled={!table.getCanPreviousPage()}\n        >\n          Previous\n        </Button>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => table.nextPage()}\n          disabled={!table.getCanNextPage()}\n        >\n          Next\n        </Button>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 4441, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/finance/due-payments/due-payments-client.tsx"],"sourcesContent":["\n'use client';\n\nimport { useState, useEffect } from 'react';\nimport { getDuePayments, getSummary } from './actions';\nimport { columns } from './columns';\nimport { DataTable } from './data-table';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { ArrowDown, ArrowUp, AlertTriangle, RefreshCw } from 'lucide-react';\nimport { type DuePayment } from './schema';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\nimport { useCurrency } from '@/context/currency-context';\n\ntype Summary = {\n    totalReceivable: number;\n    totalPayable: number;\n    overdueReceivable: number;\n    overduePayable: number;\n}\n\nexport function DuePaymentsClient({ initialPayments, initialSummary }: { initialPayments: DuePayment[], initialSummary: Summary }) {\n  const [payments, setPayments] = useState(initialPayments);\n  const [summary, setSummary] = useState(initialSummary);\n  const [isLoading, setIsLoading] = useState(false);\n  const { formatCurrency } = useCurrency();\n\n  const refreshData = async () => {\n    setIsLoading(true);\n    const paymentsResult = await getDuePayments();\n    const summaryResult = await getSummary(paymentsResult);\n    setPayments(paymentsResult);\n    setSummary(summaryResult);\n    setIsLoading(false);\n  }\n\n  useEffect(() => {\n    setPayments(initialPayments);\n    setSummary(initialSummary);\n  }, [initialPayments, initialSummary]);\n\n  return (\n    <div className=\"container mx-auto py-10\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <div>\n            <h1 className=\"text-3xl font-bold font-headline\">Due Payments Report</h1>\n            <p className=\"text-muted-foreground\">\n                A consolidated view of all upcoming and overdue payments.\n            </p>\n        </div>\n         <Button variant=\"outline\" size=\"icon\" onClick={refreshData} disabled={isLoading}>\n            <RefreshCw className={cn(\"h-4 w-4\", isLoading && \"animate-spin\")} />\n        </Button>\n      </div>\n\n       <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4 mb-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Receivable</CardTitle>\n            <ArrowDown className=\"h-4 w-4 text-green-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">{formatCurrency(summary.totalReceivable)}</div>\n            <p className=\"text-xs text-muted-foreground\">All upcoming payments from tenants</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Payable</CardTitle>\n            <ArrowUp className=\"h-4 w-4 text-red-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-red-600\">{formatCurrency(summary.totalPayable)}</div>\n            <p className=\"text-xs text-muted-foreground\">All upcoming payments to landlords</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Overdue Receivable</CardTitle>\n            <AlertTriangle className=\"h-4 w-4 text-destructive\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-destructive\">{formatCurrency(summary.overdueReceivable)}</div>\n            <p className=\"text-xs text-muted-foreground\">Receivables past their due date</p>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Overdue Payable</CardTitle>\n            <AlertTriangle className=\"h-4 w-4 text-destructive\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-destructive\">{formatCurrency(summary.overduePayable)}</div>\n            <p className=\"text-xs text-muted-foreground\">Payables past their due date</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <DataTable columns={columns(refreshData)} data={payments} />\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;;;AAXA;;;;;;;;;;AAoBO,SAAS,kBAAkB,KAA+F;QAA/F,EAAE,eAAe,EAAE,cAAc,EAA8D,GAA/F;;IAChC,MAAM,CAAC,UAAU,YAAY,GAAG,IAAA,yKAAQ,EAAC;IACzC,MAAM,CAAC,SAAS,WAAW,GAAG,IAAA,yKAAQ,EAAC;IACvC,MAAM,CAAC,WAAW,aAAa,GAAG,IAAA,yKAAQ,EAAC;IAC3C,MAAM,EAAE,cAAc,EAAE,GAAG,IAAA,wJAAW;IAEtC,MAAM,cAAc;QAClB,aAAa;QACb,MAAM,iBAAiB,MAAM,IAAA,qMAAc;QAC3C,MAAM,gBAAgB,MAAM,IAAA,iMAAU,EAAC;QACvC,YAAY;QACZ,WAAW;QACX,aAAa;IACf;IAEA,IAAA,0KAAS;uCAAC;YACR,YAAY;YACZ,WAAW;QACb;sCAAG;QAAC;QAAiB;KAAe;IAEpC,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;;0CACG,6LAAC;gCAAG,WAAU;0CAAmC;;;;;;0CACjD,6LAAC;gCAAE,WAAU;0CAAwB;;;;;;;;;;;;kCAIxC,6LAAC,+IAAM;wBAAC,SAAQ;wBAAU,MAAK;wBAAO,SAAS;wBAAa,UAAU;kCACnE,cAAA,6LAAC,gOAAS;4BAAC,WAAW,IAAA,4HAAE,EAAC,WAAW,aAAa;;;;;;;;;;;;;;;;;0BAItD,6LAAC;gBAAI,WAAU;;kCACd,6LAAC,2IAAI;;0CACH,6LAAC,iJAAU;gCAAC,WAAU;;kDACpB,6LAAC,gJAAS;wCAAC,WAAU;kDAAsB;;;;;;kDAC3C,6LAAC,gOAAS;wCAAC,WAAU;;;;;;;;;;;;0CAEvB,6LAAC,kJAAW;;kDACV,6LAAC;wCAAI,WAAU;kDAAqC,eAAe,QAAQ,eAAe;;;;;;kDAC1F,6LAAC;wCAAE,WAAU;kDAAgC;;;;;;;;;;;;;;;;;;kCAGjD,6LAAC,2IAAI;;0CACH,6LAAC,iJAAU;gCAAC,WAAU;;kDACpB,6LAAC,gJAAS;wCAAC,WAAU;kDAAsB;;;;;;kDAC3C,6LAAC,0NAAO;wCAAC,WAAU;;;;;;;;;;;;0CAErB,6LAAC,kJAAW;;kDACV,6LAAC;wCAAI,WAAU;kDAAmC,eAAe,QAAQ,YAAY;;;;;;kDACrF,6LAAC;wCAAE,WAAU;kDAAgC;;;;;;;;;;;;;;;;;;kCAGjD,6LAAC,2IAAI;;0CACH,6LAAC,iJAAU;gCAAC,WAAU;;kDACpB,6LAAC,gJAAS;wCAAC,WAAU;kDAAsB;;;;;;kDAC3C,6LAAC,4OAAa;wCAAC,WAAU;;;;;;;;;;;;0CAE3B,6LAAC,kJAAW;;kDACV,6LAAC;wCAAI,WAAU;kDAAuC,eAAe,QAAQ,iBAAiB;;;;;;kDAC9F,6LAAC;wCAAE,WAAU;kDAAgC;;;;;;;;;;;;;;;;;;kCAGjD,6LAAC,2IAAI;;0CACH,6LAAC,iJAAU;gCAAC,WAAU;;kDACpB,6LAAC,gJAAS;wCAAC,WAAU;kDAAsB;;;;;;kDAC3C,6LAAC,4OAAa;wCAAC,WAAU;;;;;;;;;;;;0CAE3B,6LAAC,kJAAW;;kDACV,6LAAC;wCAAI,WAAU;kDAAuC,eAAe,QAAQ,cAAc;;;;;;kDAC3F,6LAAC;wCAAE,WAAU;kDAAgC;;;;;;;;;;;;;;;;;;;;;;;;0BAKnD,6LAAC,0KAAS;gBAAC,SAAS,IAAA,kKAAO,EAAC;gBAAc,MAAM;;;;;;;;;;;;AAGtD;GAhFgB;;QAIa,wJAAW;;;KAJxB","debugId":null}}]
}