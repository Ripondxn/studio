{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 10, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/badge.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n"],"names":[],"mappings":";;;;;;;AACA;AAEA;;;;AAEA,MAAM,gBAAgB,IAAA,uKAAG,EACvB,0KACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,WACE;YACF,aACE;YACF,SAAS;QACX;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAOF,SAAS,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAmB;IACzD,qBACE,8OAAC;QAAI,WAAW,IAAA,yHAAE,EAAC,cAAc;YAAE;QAAQ,IAAI;QAAa,GAAG,KAAK;;;;;;AAExE","debugId":null}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/table.tsx"],"sourcesContent":["\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AACA;AAEA;;;;AAEA,MAAM,sBAAQ,mNAAgB,CAG5B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YACC,KAAK;YACL,WAAW,IAAA,yHAAE,EAAC,iCAAiC;YAC9C,GAAG,KAAK;;;;;;;;;;;AAIf,MAAM,WAAW,GAAG;AAEpB,MAAM,4BAAc,mNAAgB,CAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAM,KAAK;QAAK,WAAW,IAAA,yHAAE,EAAC,mBAAmB;QAAa,GAAG,KAAK;;;;;;AAEzE,YAAY,WAAW,GAAG;AAE1B,MAAM,0BAAY,mNAAgB,CAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,IAAA,yHAAE,EAAC,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,4BAAc,mNAAgB,CAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,IAAA,yHAAE,EACX,2DACA;QAED,GAAG,KAAK;;;;;;AAGb,YAAY,WAAW,GAAG;AAE1B,MAAM,yBAAW,mNAAgB,CAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,IAAA,yHAAE,EACX,6DACA;QAED,GAAG,KAAK;;;;;;AAGb,SAAS,WAAW,GAAG;AAEvB,MAAM,0BAAY,mNAAgB,CAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,IAAA,yHAAE,EACX,oGACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,0BAAY,mNAAgB,CAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,IAAA,yHAAE,EAAC,kDAAkD;QAC/D,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,6BAAe,mNAAgB,CAGnC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,IAAA,yHAAE,EAAC,sCAAsC;QACnD,GAAG,KAAK;;;;;;AAGb,aAAa,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 168, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,gBAAgB,IAAA,uKAAG,EACvB;AAGF,MAAM,sBAAQ,mNAAgB,CAI5B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,yKAAmB;QAClB,KAAK;QACL,WAAW,IAAA,yHAAE,EAAC,iBAAiB;QAC9B,GAAG,KAAK;;;;;;AAGb,MAAM,WAAW,GAAG,yKAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 199, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/textarea.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {cn} from '@/lib/utils';\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({className, ...props}, ref) => {\n    return (\n      <textarea\n        className={cn(\n          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nTextarea.displayName = 'Textarea';\n\nexport {Textarea};\n"],"names":[],"mappings":";;;;;AAAA;AAEA;;;;AAKA,MAAM,yBAAW,mNAAgB,CAC/B,CAAC,EAAC,SAAS,EAAE,GAAG,OAAM,EAAE;IACtB,qBACE,8OAAC;QACC,WAAW,IAAA,yHAAE,EACX,qTACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,SAAS,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 226, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/dialog.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,SAAS,0KAAoB;AAEnC,MAAM,gBAAgB,6KAAuB;AAE7C,MAAM,eAAe,4KAAsB;AAE3C,MAAM,cAAc,2KAAqB;AAEzC,MAAM,8BAAgB,mNAAgB,CAGpC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,6KAAuB;QACtB,KAAK;QACL,WAAW,IAAA,yHAAE,EACX,0JACA;QAED,GAAG,KAAK;;;;;;AAGb,cAAc,WAAW,GAAG,6KAAuB,CAAC,WAAW;AAE/D,MAAM,8BAAgB,mNAAgB,CAGpC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,8OAAC;;0BACC,8OAAC;;;;;0BACD,8OAAC,6KAAuB;gBACtB,KAAK;gBACL,WAAW,IAAA,yHAAE,EACX,+fACA;gBAED,GAAG,KAAK;;oBAER;kCACD,8OAAC,2KAAqB;wBAAC,WAAU;;0CAC/B,8OAAC,iMAAC;gCAAC,WAAU;;;;;;0CACb,8OAAC;gCAAK,WAAU;0CAAU;;;;;;;;;;;;;;;;;;;;;;;;AAKlC,cAAc,WAAW,GAAG,6KAAuB,CAAC,WAAW;AAE/D,MAAM,eAAe,CAAC,EACpB,SAAS,EACT,GAAG,OACkC,iBACrC,8OAAC;QACC,WAAW,IAAA,yHAAE,EACX,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,aAAa,WAAW,GAAG;AAE3B,MAAM,eAAe,CAAC,EACpB,SAAS,EACT,GAAG,OACkC,iBACrC,8OAAC;QACC,WAAW,IAAA,yHAAE,EACX,iEACA;QAED,GAAG,KAAK;;;;;;AAGb,aAAa,WAAW,GAAG;AAE3B,MAAM,4BAAc,mNAAgB,CAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,2KAAqB;QACpB,KAAK;QACL,WAAW,IAAA,yHAAE,EACX,qDACA;QAED,GAAG,KAAK;;;;;;AAGb,YAAY,WAAW,GAAG,2KAAqB,CAAC,WAAW;AAE3D,MAAM,kCAAoB,mNAAgB,CAGxC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,iLAA2B;QAC1B,KAAK;QACL,WAAW,IAAA,yHAAE,EAAC,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,kBAAkB,WAAW,GAAG,iLAA2B,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 366, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/alert-dialog.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AAEA;AACA;AANA;;;;;;AAQA,MAAM,cAAc,mLAAyB;AAE7C,MAAM,qBAAqB,sLAA4B;AAEvD,MAAM,oBAAoB,qLAA2B;AAErD,MAAM,mCAAqB,mNAAgB,CAGzC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,sLAA4B;QAC3B,WAAW,IAAA,yHAAE,EACX,2JACA;QAED,GAAG,KAAK;QACT,KAAK;;;;;;AAGT,mBAAmB,WAAW,GAAG,sLAA4B,CAAC,WAAW;AAEzE,MAAM,mCAAqB,mNAAgB,CAGzC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;;0BACC,8OAAC;;;;;0BACD,8OAAC,sLAA4B;gBAC3B,KAAK;gBACL,WAAW,IAAA,yHAAE,EACX,+fACA;gBAED,GAAG,KAAK;;;;;;;;;;;;AAIf,mBAAmB,WAAW,GAAG,sLAA4B,CAAC,WAAW;AAEzE,MAAM,oBAAoB,CAAC,EACzB,SAAS,EACT,GAAG,OACkC,iBACrC,8OAAC;QACC,WAAW,IAAA,yHAAE,EACX,oDACA;QAED,GAAG,KAAK;;;;;;AAGb,kBAAkB,WAAW,GAAG;AAEhC,MAAM,oBAAoB,CAAC,EACzB,SAAS,EACT,GAAG,OACkC,iBACrC,8OAAC;QACC,WAAW,IAAA,yHAAE,EACX,iEACA;QAED,GAAG,KAAK;;;;;;AAGb,kBAAkB,WAAW,GAAG;AAEhC,MAAM,iCAAmB,mNAAgB,CAGvC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,oLAA0B;QACzB,KAAK;QACL,WAAW,IAAA,yHAAE,EAAC,yBAAyB;QACtC,GAAG,KAAK;;;;;;AAGb,iBAAiB,WAAW,GAAG,oLAA0B,CAAC,WAAW;AAErE,MAAM,uCAAyB,mNAAgB,CAG7C,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,0LAAgC;QAC/B,KAAK;QACL,WAAW,IAAA,yHAAE,EAAC,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,uBAAuB,WAAW,GAChC,0LAAgC,CAAC,WAAW;AAE9C,MAAM,kCAAoB,mNAAgB,CAGxC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,qLAA2B;QAC1B,KAAK;QACL,WAAW,IAAA,yHAAE,EAAC,IAAA,oJAAc,KAAI;QAC/B,GAAG,KAAK;;;;;;AAGb,kBAAkB,WAAW,GAAG,qLAA2B,CAAC,WAAW;AAEvE,MAAM,kCAAoB,mNAAgB,CAGxC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,qLAA2B;QAC1B,KAAK;QACL,WAAW,IAAA,yHAAE,EACX,IAAA,oJAAc,EAAC;YAAE,SAAS;QAAU,IACpC,gBACA;QAED,GAAG,KAAK;;;;;;AAGb,kBAAkB,WAAW,GAAG,qLAA2B,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 502, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/popover.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n"],"names":[],"mappings":";;;;;;;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,UAAU,2KAAqB;AAErC,MAAM,iBAAiB,8KAAwB;AAE/C,MAAM,+BAAiB,mNAAgB,CAGrC,CAAC,EAAE,SAAS,EAAE,QAAQ,QAAQ,EAAE,aAAa,CAAC,EAAE,GAAG,OAAO,EAAE,oBAC5D,8OAAC,6KAAuB;kBACtB,cAAA,8OAAC,8KAAwB;YACvB,KAAK;YACL,OAAO;YACP,YAAY;YACZ,WAAW,IAAA,yHAAE,EACX,8aACA;YAED,GAAG,KAAK;;;;;;;;;;;AAIf,eAAe,WAAW,GAAG,8KAAwB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 544, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/finance/payment/actions.ts"],"sourcesContent":["\n\n'use server';\n\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { z } from 'zod';\nimport { revalidatePath } from 'next/cache';\nimport { paymentSchema, type Payment } from './schema';\nimport { type BankAccount } from '@/app/finance/banking/schema';\nimport { startOfMonth, endOfMonth, isWithinInterval, parseISO, isBefore } from 'date-fns';\nimport { applyPaymentToInvoices } from '@/app/tenancy/customer/invoice/actions';\nimport { type Contract as TenancyContract } from '@/app/tenancy/contract/schema';\nimport { type LeaseContract } from '@/app/lease/contract/schema';\nimport { type Invoice } from '@/app/tenancy/customer/invoice/schema';\nimport { type Bill } from '@/app/vendors/bill/schema';\nimport { type Cheque } from '../cheque-deposit/schema';\nimport { getWorkflowSettings } from '@/app/admin/workflow-settings/actions';\nimport { applyFinancialImpact, reverseFinancialImpact } from '@/app/workflow/actions';\nimport { type ReceiptBook } from '../book-management/schema';\n\n\nconst paymentsFilePath = path.join(process.cwd(), 'src/app/finance/payment/payments-data.json');\nconst invoicesFilePath = path.join(process.cwd(), 'src/app/tenancy/customer/invoice/invoices-data.json');\nconst billsFilePath = path.join(process.cwd(), 'src/app/vendors/bill/bills-data.json');\nconst receiptBooksFilePath = path.join(process.cwd(), 'src/app/finance/book-management/receipt-books-data.json');\nconst tenancyContractsFilePath = path.join(process.cwd(), 'src/app/tenancy/contract/contracts-data.json');\nconst leaseContractsFilePath = path.join(process.cwd(), 'src/app/lease/contract/contracts-data.json');\n\n\nasync function readData(filePath: string) {\n    try {\n        await fs.access(filePath);\n        const data = await fs.readFile(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            return [];\n        }\n        throw error;\n    }\n}\n\nasync function writeData(filePath: string, data: any) {\n    await fs.writeFile(filePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\n\nasync function readPayments(): Promise<Payment[]> {\n    return await readData(paymentsFilePath);\n}\nasync function writePayments(data: Payment[]) {\n    await fs.writeFile(paymentsFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\nasync function readInvoices(): Promise<Invoice[]> {\n    return await readData(invoicesFilePath);\n}\nasync function writeInvoices(data: Invoice[]) {\n    await fs.writeFile(invoicesFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\nasync function readBills(): Promise<Bill[]> {\n    return await readData(billsFilePath);\n}\nasync function writeBills(data: Bill[]) {\n    await fs.writeFile(billsFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\nasync function applyPaymentToBills(billPayments: { billId: string; amount: number }[], vendorCode: string) {\n    try {\n        const allBills = await readBills();\n        let utilityAccountId: string | undefined;\n\n        for (const payment of billPayments) {\n            const index = allBills.findIndex(b => b.id === payment.billId);\n            if (index !== -1) {\n                allBills[index].amountPaid = (allBills[index].amountPaid || 0) + payment.amount;\n                const remainingBalance = allBills[index].total - allBills[index].amountPaid;\n                \n                if (remainingBalance <= 0.001) {\n                    allBills[index].status = 'Paid';\n                } else if (allBills[index].status === 'Draft' || allBills[index].status === 'Overdue') {\n                    allBills[index].status = 'Sent';\n                }\n                \n                // Carry over the utilityAccountId if it exists on the bill\n                if (allBills[index].utilityAccountId) {\n                    utilityAccountId = allBills[index].utilityAccountId;\n                }\n            }\n        }\n\n        await writeBills(allBills);\n        revalidatePath(`/vendors/add?code=${vendorCode}`);\n        return { success: true, utilityAccountId };\n    } catch (error) {\n         return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n\n\nexport async function getPayments(user: { email: string; role: string; name?: string; }) {\n    const allPayments = await readPayments();\n    \n    // Filter out cancelled payments from the main view\n    const activePayments = allPayments.filter(p => p.status !== 'Cancelled');\n    \n    if (user.role === 'Admin' || user.role === 'Super Admin') {\n        return activePayments.sort((a,b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n    }\n    \n    const userPayments = activePayments.filter(p => p.createdByUser === user.name);\n\n    return userPayments.sort((a,b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n}\n\nasync function updateReceiptBookUsage(receiptNo: string) {\n    try {\n        const books = await readData(receiptBooksFilePath) as ReceiptBook[];\n        const [bookNo] = receiptNo.split('-');\n        if (!bookNo) return;\n\n        const bookIndex = books.findIndex(b => b.bookNo === bookNo);\n        if (bookIndex !== -1) {\n            books[bookIndex].leafsUsed = (books[bookIndex].leafsUsed || 0) + 1;\n             if (books[bookIndex].leafsUsed >= books[bookIndex].noOfLeafs) {\n                books[bookIndex].status = 'Finished';\n            }\n            await writeData(receiptBooksFilePath, books);\n            revalidatePath('/finance/book-management');\n        }\n    } catch (error) {\n        console.error(`Failed to update receipt book for receipt #${receiptNo}`, error);\n    }\n}\n\n\nexport async function addPayment(data: z.infer<typeof paymentSchema>) {\n    const validation = paymentSchema.safeParse(data);\n    if (!validation.success) {\n        return { success: false, error: 'Invalid data format.' };\n    }\n    \n    const paymentData = validation.data;\n\n    try {\n        const allPayments = await readPayments();\n        \n        if (paymentData.referenceNo && paymentData.referenceType !== 'Other') {\n            const isDuplicate = allPayments.some(p => \n                p.referenceNo === paymentData.referenceNo &&\n                p.status !== 'Cancelled'\n            );\n            if (isDuplicate) {\n                return { success: false, error: `A payment for reference \"${paymentData.referenceNo}\" already exists.` };\n            }\n        }\n        \n        const workflowSettings = await getWorkflowSettings();\n        const initialStatus = workflowSettings.approvalProcessEnabled ? 'DRAFT' : 'POSTED';\n        const newId = paymentData.id || `PAY-${Date.now()}`;\n\n        const newPayment: Payment = {\n            ...paymentData,\n            id: newId,\n            currentStatus: initialStatus,\n        };\n        \n        if (newPayment.type === 'Receipt' && newPayment.invoiceAllocations && newPayment.invoiceAllocations.length > 0) {\n            await applyPaymentToInvoices(newPayment.invoiceAllocations, newPayment.partyName);\n        }\n\n        if (newPayment.type === 'Payment' && newPayment.billAllocations && newPayment.billAllocations.length > 0) {\n            const billResult = await applyPaymentToBills(newPayment.billAllocations, newPayment.partyName);\n            if (billResult.utilityAccountId) {\n                newPayment.utilityAccountId = billResult.utilityAccountId;\n            }\n        }\n        \n        // If it's a DRAFT, the approval history will be added upon submission.\n        if (initialStatus === 'POSTED') {\n            newPayment.approvalHistory = [{\n                action: 'Created & Auto-Posted',\n                actorId: paymentData.createdByUser || 'System',\n                actorRole: 'User',\n                timestamp: new Date().toISOString(),\n                comments: 'Directly recorded transaction.',\n            }];\n            await applyFinancialImpact(newPayment);\n        }\n        \n        if (newPayment.referenceType === 'Receipt Book' && newPayment.referenceNo) {\n            await updateReceiptBookUsage(newPayment.referenceNo);\n        }\n        \n        allPayments.push(newPayment);\n        await writePayments(allPayments);\n        \n        revalidateAllPaths(newPayment);\n        return { success: true, data: newPayment };\n\n    } catch (error) {\n        return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n\n\nexport async function cancelPayment(paymentId: string) {\n    try {\n        const allPayments = await readPayments();\n        const paymentIndex = allPayments.findIndex(p => p.id === paymentId);\n\n        if (paymentIndex === -1) {\n            return { success: false, error: 'Payment not found.' };\n        }\n        \n        const paymentToCancel = allPayments[paymentIndex];\n\n        if(paymentToCancel.status === 'Cancelled') {\n            return { success: false, error: 'Payment is already cancelled.'};\n        }\n        \n        if(paymentToCancel.currentStatus === 'POSTED') {\n           await reverseFinancialImpact(paymentToCancel);\n        }\n        \n        allPayments[paymentIndex].status = 'Cancelled';\n        await writePayments(allPayments);\n\n        revalidateAllPaths(paymentToCancel);\n        return { success: true };\n    } catch (error) {\n        return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n\nexport async function restorePayment(paymentId: string) {\n    try {\n        const allPayments = await readPayments();\n        const paymentIndex = allPayments.findIndex(p => p.id === paymentId);\n\n        if (paymentIndex === -1) {\n            return { success: false, error: 'Payment not found.' };\n        }\n        \n        const paymentToRestore = allPayments[paymentIndex];\n\n        if(paymentToRestore.status !== 'Cancelled') {\n            return { success: false, error: 'Payment is not cancelled.'};\n        }\n        \n        if(paymentToRestore.currentStatus === 'POSTED') {\n           await applyFinancialImpact(paymentToRestore);\n        }\n        \n        // Restore to a sensible previous state\n        paymentToRestore.status = paymentToRestore.type === 'Payment' ? 'Paid' : 'Received';\n        await writePayments(allPayments);\n\n        revalidateAllPaths(paymentToRestore);\n        return { success: true };\n    } catch (error) {\n        return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n\n// Keeping this function for hard deletes (e.g. of draft transactions) if needed later\nexport async function deletePayment(paymentId: string) {\n    try {\n        const allPayments = await readPayments();\n        const paymentToDelete = allPayments.find(p => p.id === paymentId);\n\n        if (!paymentToDelete) {\n            return { success: false, error: 'Payment not found.' };\n        }\n        \n        if(paymentToDelete.currentStatus === 'POSTED') {\n            await reverseFinancialImpact(paymentToDelete);\n        }\n        \n        const updatedPayments = allPayments.filter(p => p.id !== paymentId);\n        await writePayments(updatedPayments);\n\n       revalidateAllPaths(paymentToDelete);\n\n        return { success: true };\n    } catch (error) {\n        return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n\n\nfunction revalidateAllPaths(payment: Payment) {\n    revalidatePath('/finance/payment');\n    revalidatePath('/finance/banking');\n    revalidatePath('/finance/chart-of-accounts');\n    revalidatePath('/vendors/agents');\n    revalidatePath('/workflow');\n    revalidatePath(`/tenancy/customer/add?code=${payment.partyName}`);\n    revalidatePath(`/vendors/add?code=${payment.partyName}`);\n}\n\nexport async function getPartyNameLookups(): Promise<Record<string, string>> {\n    // This function can be moved to a central lookup file to avoid duplication\n    // For now, keeping it here to fix the immediate issue.\n    const tenants: {tenantData: any}[] = await readData(path.join(process.cwd(), 'src/app/tenancy/tenants/tenants-data.json'));\n    const landlords: {landlordData: any}[] = await readData(path.join(process.cwd(), 'src/app/landlord/landlords-data.json'));\n    const vendors: {vendorData: any}[] = await readData(path.join(process.cwd(), 'src/app/vendors/vendors-data.json'));\n    const agents: any[] = await readData(path.join(process.cwd(), 'src/app/vendors/agents/agents-data.json'));\n    const customers: {customerData: any}[] = await readData(path.join(process.cwd(), 'src/app/tenancy/customer/customers-data.json'));\n\n    const lookups: Record<string, string> = {};\n\n    tenants.forEach(t => {\n        if(t.tenantData.code) lookups[t.tenantData.code] = t.tenantData.name;\n    });\n    landlords.forEach(l => {\n        if(l.landlordData.code) lookups[l.landlordData.code] = l.landlordData.name;\n    });\n    vendors.forEach(v => {\n        if(v.vendorData.code) lookups[v.vendorData.code] = v.vendorData.name;\n    });\n     agents.forEach(a => {\n        if(a.code) lookups[a.code] = a.name;\n    });\n    customers.forEach(c => {\n        if(c.customerData.code) lookups[c.customerData.code] = c.customerData.name;\n    });\n\n    return lookups;\n}\n\n\nexport async function getSummary() {\n    const payments = await readPayments();\n    const now = new Date();\n    const startOfThisMonth = startOfMonth(now);\n    const endOfThisMonth = endOfMonth(now);\n\n    const summary = {\n        totalReceivedThisMonth: 0,\n        totalPaidThisMonth: 0,\n    };\n\n    for (const payment of payments) {\n        if(payment.currentStatus !== 'POSTED') continue; \n\n        const paymentDate = parseISO(payment.date);\n        if (isWithinInterval(paymentDate, { start: startOfThisMonth, end: endOfThisMonth })) {\n            if (payment.type === 'Receipt') {\n                summary.totalReceivedThisMonth += payment.amount;\n            } else if (payment.type === 'Payment') {\n                summary.totalPaidThisMonth += payment.amount;\n            }\n        }\n    }\n    \n    return summary;\n}\n\nexport async function getNextPaymentVoucherNumber() {\n    const payments = await readPayments();\n    const paymentVouchers = payments.filter(p => p.type === 'Payment');\n    if (paymentVouchers.length === 0) {\n        return 'PV-00001';\n    }\n    const lastVoucherNo = paymentVouchers.reduce((max, p) => {\n        const currentNum = parseInt(p.voucherNo.split('-')[1], 10);\n        return currentNum > max ? currentNum : max;\n    }, 0);\n    return `PV-${(lastVoucherNo + 1).toString().padStart(5, '0')}`;\n}\n\nexport async function getReferences(partyType: string, partyName: string, referenceType: string, paymentType: string, collectorName?: string) {\n    if (!partyType || !partyName || !referenceType) return [];\n    \n    const allPayments = await readPayments();\n    const paidRefs = new Set(allPayments.filter(p => p.status !== 'Cancelled').map(p => p.referenceNo));\n    \n    let references: { value: string, label: string, amount?: number, propertyCode?: string, unitCode?: string, roomCode?: string, partitionCode?: string, book?: any }[] = [];\n    \n    if (paymentType === 'Receipt') {\n        if (referenceType === 'Tenancy Contract') {\n            const contracts = await readData(tenancyContractsFilePath);\n            references = contracts\n                .filter((c: TenancyContract) => c.tenantCode === partyName)\n                .map((c: TenancyContract) => ({\n                    value: c.contractNo,\n                    label: `Contract: ${c.contractNo} (Property: ${c.property})`,\n                    amount: c.totalRent,\n                    propertyCode: c.property,\n                    unitCode: c.unitCode,\n                    roomCode: c.roomCode,\n                }));\n        } else if (referenceType === 'Invoice') {\n            const invoices = await readData(invoicesFilePath);\n            references = invoices\n                .filter((i: Invoice) => i.customerCode === partyName && i.status !== 'Paid' && i.status !== 'Cancelled')\n                .map((i: Invoice) => ({\n                    value: i.invoiceNo,\n                    label: `Invoice: ${i.invoiceNo} (Due: ${i.dueDate}, Bal: ${i.total - (i.amountPaid || 0)})`,\n                    amount: i.total - (i.amountPaid || 0),\n                    propertyCode: i.property,\n                    unitCode: i.unitCode,\n                    roomCode: i.roomCode,\n                }));\n        } else if (referenceType === 'Receipt Book') {\n            const books = await readData(receiptBooksFilePath);\n            books.forEach((book: ReceiptBook) => {\n                if(book.status === 'Active' && (!book.assignedTo || book.assignedTo === collectorName)) {\n                     for (let i = book.receiptStartNo; i <= book.receiptEndNo; i++) {\n                        const receiptNo = `${book.bookNo}-${i}`;\n                        if (!paidRefs.has(receiptNo)) {\n                            references.push({\n                                value: receiptNo,\n                                label: `Book: ${book.bookNo}, Receipt: ${i}`,\n                                book: book,\n                            });\n                        }\n                    }\n                }\n            });\n        }\n    } else { // Payment\n        if (referenceType === 'Lease Contract') {\n             const contracts = await readData(leaseContractsFilePath);\n             references = contracts\n                .filter((c: LeaseContract) => c.landlordCode === partyName)\n                .map((c: LeaseContract) => ({\n                    value: c.contractNo,\n                    label: `Lease: ${c.contractNo} (Property: ${c.property})`,\n                    amount: c.totalRent,\n                    propertyCode: c.property,\n                }));\n        } else if (referenceType === 'Bill') {\n            const bills = await readData(billsFilePath);\n            references = bills\n                .filter((b: Bill) => b.vendorCode === partyName && b.status !== 'Paid' && b.status !== 'Cancelled')\n                .map((b: Bill) => ({\n                    value: b.billNo,\n                    label: `Bill: ${b.billNo} (Due: ${b.dueDate}, Bal: ${b.total - (b.amountPaid || 0)})`,\n                    amount: b.total - (b.amountPaid || 0),\n                    propertyCode: b.property,\n                    unitCode: b.unitCode,\n                    roomCode: b.roomCode,\n                }));\n        }\n    }\n    \n    return references;\n}\n"],"names":[],"mappings":";;;;;;;IAsGsB,cAAA,WAAA,GAAA,IAAA,+OAAA,EAAA,8CAAA,oOAAA,EAAA,KAAA,GAAA,0OAAA,EAAA","debugId":null}},
    {"offset": {"line": 556, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/finance/payment/actions.ts"],"sourcesContent":["\n\n'use server';\n\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { z } from 'zod';\nimport { revalidatePath } from 'next/cache';\nimport { paymentSchema, type Payment } from './schema';\nimport { type BankAccount } from '@/app/finance/banking/schema';\nimport { startOfMonth, endOfMonth, isWithinInterval, parseISO, isBefore } from 'date-fns';\nimport { applyPaymentToInvoices } from '@/app/tenancy/customer/invoice/actions';\nimport { type Contract as TenancyContract } from '@/app/tenancy/contract/schema';\nimport { type LeaseContract } from '@/app/lease/contract/schema';\nimport { type Invoice } from '@/app/tenancy/customer/invoice/schema';\nimport { type Bill } from '@/app/vendors/bill/schema';\nimport { type Cheque } from '../cheque-deposit/schema';\nimport { getWorkflowSettings } from '@/app/admin/workflow-settings/actions';\nimport { applyFinancialImpact, reverseFinancialImpact } from '@/app/workflow/actions';\nimport { type ReceiptBook } from '../book-management/schema';\n\n\nconst paymentsFilePath = path.join(process.cwd(), 'src/app/finance/payment/payments-data.json');\nconst invoicesFilePath = path.join(process.cwd(), 'src/app/tenancy/customer/invoice/invoices-data.json');\nconst billsFilePath = path.join(process.cwd(), 'src/app/vendors/bill/bills-data.json');\nconst receiptBooksFilePath = path.join(process.cwd(), 'src/app/finance/book-management/receipt-books-data.json');\nconst tenancyContractsFilePath = path.join(process.cwd(), 'src/app/tenancy/contract/contracts-data.json');\nconst leaseContractsFilePath = path.join(process.cwd(), 'src/app/lease/contract/contracts-data.json');\n\n\nasync function readData(filePath: string) {\n    try {\n        await fs.access(filePath);\n        const data = await fs.readFile(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            return [];\n        }\n        throw error;\n    }\n}\n\nasync function writeData(filePath: string, data: any) {\n    await fs.writeFile(filePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\n\nasync function readPayments(): Promise<Payment[]> {\n    return await readData(paymentsFilePath);\n}\nasync function writePayments(data: Payment[]) {\n    await fs.writeFile(paymentsFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\nasync function readInvoices(): Promise<Invoice[]> {\n    return await readData(invoicesFilePath);\n}\nasync function writeInvoices(data: Invoice[]) {\n    await fs.writeFile(invoicesFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\nasync function readBills(): Promise<Bill[]> {\n    return await readData(billsFilePath);\n}\nasync function writeBills(data: Bill[]) {\n    await fs.writeFile(billsFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\nasync function applyPaymentToBills(billPayments: { billId: string; amount: number }[], vendorCode: string) {\n    try {\n        const allBills = await readBills();\n        let utilityAccountId: string | undefined;\n\n        for (const payment of billPayments) {\n            const index = allBills.findIndex(b => b.id === payment.billId);\n            if (index !== -1) {\n                allBills[index].amountPaid = (allBills[index].amountPaid || 0) + payment.amount;\n                const remainingBalance = allBills[index].total - allBills[index].amountPaid;\n                \n                if (remainingBalance <= 0.001) {\n                    allBills[index].status = 'Paid';\n                } else if (allBills[index].status === 'Draft' || allBills[index].status === 'Overdue') {\n                    allBills[index].status = 'Sent';\n                }\n                \n                // Carry over the utilityAccountId if it exists on the bill\n                if (allBills[index].utilityAccountId) {\n                    utilityAccountId = allBills[index].utilityAccountId;\n                }\n            }\n        }\n\n        await writeBills(allBills);\n        revalidatePath(`/vendors/add?code=${vendorCode}`);\n        return { success: true, utilityAccountId };\n    } catch (error) {\n         return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n\n\nexport async function getPayments(user: { email: string; role: string; name?: string; }) {\n    const allPayments = await readPayments();\n    \n    // Filter out cancelled payments from the main view\n    const activePayments = allPayments.filter(p => p.status !== 'Cancelled');\n    \n    if (user.role === 'Admin' || user.role === 'Super Admin') {\n        return activePayments.sort((a,b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n    }\n    \n    const userPayments = activePayments.filter(p => p.createdByUser === user.name);\n\n    return userPayments.sort((a,b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n}\n\nasync function updateReceiptBookUsage(receiptNo: string) {\n    try {\n        const books = await readData(receiptBooksFilePath) as ReceiptBook[];\n        const [bookNo] = receiptNo.split('-');\n        if (!bookNo) return;\n\n        const bookIndex = books.findIndex(b => b.bookNo === bookNo);\n        if (bookIndex !== -1) {\n            books[bookIndex].leafsUsed = (books[bookIndex].leafsUsed || 0) + 1;\n             if (books[bookIndex].leafsUsed >= books[bookIndex].noOfLeafs) {\n                books[bookIndex].status = 'Finished';\n            }\n            await writeData(receiptBooksFilePath, books);\n            revalidatePath('/finance/book-management');\n        }\n    } catch (error) {\n        console.error(`Failed to update receipt book for receipt #${receiptNo}`, error);\n    }\n}\n\n\nexport async function addPayment(data: z.infer<typeof paymentSchema>) {\n    const validation = paymentSchema.safeParse(data);\n    if (!validation.success) {\n        return { success: false, error: 'Invalid data format.' };\n    }\n    \n    const paymentData = validation.data;\n\n    try {\n        const allPayments = await readPayments();\n        \n        if (paymentData.referenceNo && paymentData.referenceType !== 'Other') {\n            const isDuplicate = allPayments.some(p => \n                p.referenceNo === paymentData.referenceNo &&\n                p.status !== 'Cancelled'\n            );\n            if (isDuplicate) {\n                return { success: false, error: `A payment for reference \"${paymentData.referenceNo}\" already exists.` };\n            }\n        }\n        \n        const workflowSettings = await getWorkflowSettings();\n        const initialStatus = workflowSettings.approvalProcessEnabled ? 'DRAFT' : 'POSTED';\n        const newId = paymentData.id || `PAY-${Date.now()}`;\n\n        const newPayment: Payment = {\n            ...paymentData,\n            id: newId,\n            currentStatus: initialStatus,\n        };\n        \n        if (newPayment.type === 'Receipt' && newPayment.invoiceAllocations && newPayment.invoiceAllocations.length > 0) {\n            await applyPaymentToInvoices(newPayment.invoiceAllocations, newPayment.partyName);\n        }\n\n        if (newPayment.type === 'Payment' && newPayment.billAllocations && newPayment.billAllocations.length > 0) {\n            const billResult = await applyPaymentToBills(newPayment.billAllocations, newPayment.partyName);\n            if (billResult.utilityAccountId) {\n                newPayment.utilityAccountId = billResult.utilityAccountId;\n            }\n        }\n        \n        // If it's a DRAFT, the approval history will be added upon submission.\n        if (initialStatus === 'POSTED') {\n            newPayment.approvalHistory = [{\n                action: 'Created & Auto-Posted',\n                actorId: paymentData.createdByUser || 'System',\n                actorRole: 'User',\n                timestamp: new Date().toISOString(),\n                comments: 'Directly recorded transaction.',\n            }];\n            await applyFinancialImpact(newPayment);\n        }\n        \n        if (newPayment.referenceType === 'Receipt Book' && newPayment.referenceNo) {\n            await updateReceiptBookUsage(newPayment.referenceNo);\n        }\n        \n        allPayments.push(newPayment);\n        await writePayments(allPayments);\n        \n        revalidateAllPaths(newPayment);\n        return { success: true, data: newPayment };\n\n    } catch (error) {\n        return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n\n\nexport async function cancelPayment(paymentId: string) {\n    try {\n        const allPayments = await readPayments();\n        const paymentIndex = allPayments.findIndex(p => p.id === paymentId);\n\n        if (paymentIndex === -1) {\n            return { success: false, error: 'Payment not found.' };\n        }\n        \n        const paymentToCancel = allPayments[paymentIndex];\n\n        if(paymentToCancel.status === 'Cancelled') {\n            return { success: false, error: 'Payment is already cancelled.'};\n        }\n        \n        if(paymentToCancel.currentStatus === 'POSTED') {\n           await reverseFinancialImpact(paymentToCancel);\n        }\n        \n        allPayments[paymentIndex].status = 'Cancelled';\n        await writePayments(allPayments);\n\n        revalidateAllPaths(paymentToCancel);\n        return { success: true };\n    } catch (error) {\n        return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n\nexport async function restorePayment(paymentId: string) {\n    try {\n        const allPayments = await readPayments();\n        const paymentIndex = allPayments.findIndex(p => p.id === paymentId);\n\n        if (paymentIndex === -1) {\n            return { success: false, error: 'Payment not found.' };\n        }\n        \n        const paymentToRestore = allPayments[paymentIndex];\n\n        if(paymentToRestore.status !== 'Cancelled') {\n            return { success: false, error: 'Payment is not cancelled.'};\n        }\n        \n        if(paymentToRestore.currentStatus === 'POSTED') {\n           await applyFinancialImpact(paymentToRestore);\n        }\n        \n        // Restore to a sensible previous state\n        paymentToRestore.status = paymentToRestore.type === 'Payment' ? 'Paid' : 'Received';\n        await writePayments(allPayments);\n\n        revalidateAllPaths(paymentToRestore);\n        return { success: true };\n    } catch (error) {\n        return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n\n// Keeping this function for hard deletes (e.g. of draft transactions) if needed later\nexport async function deletePayment(paymentId: string) {\n    try {\n        const allPayments = await readPayments();\n        const paymentToDelete = allPayments.find(p => p.id === paymentId);\n\n        if (!paymentToDelete) {\n            return { success: false, error: 'Payment not found.' };\n        }\n        \n        if(paymentToDelete.currentStatus === 'POSTED') {\n            await reverseFinancialImpact(paymentToDelete);\n        }\n        \n        const updatedPayments = allPayments.filter(p => p.id !== paymentId);\n        await writePayments(updatedPayments);\n\n       revalidateAllPaths(paymentToDelete);\n\n        return { success: true };\n    } catch (error) {\n        return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n\n\nfunction revalidateAllPaths(payment: Payment) {\n    revalidatePath('/finance/payment');\n    revalidatePath('/finance/banking');\n    revalidatePath('/finance/chart-of-accounts');\n    revalidatePath('/vendors/agents');\n    revalidatePath('/workflow');\n    revalidatePath(`/tenancy/customer/add?code=${payment.partyName}`);\n    revalidatePath(`/vendors/add?code=${payment.partyName}`);\n}\n\nexport async function getPartyNameLookups(): Promise<Record<string, string>> {\n    // This function can be moved to a central lookup file to avoid duplication\n    // For now, keeping it here to fix the immediate issue.\n    const tenants: {tenantData: any}[] = await readData(path.join(process.cwd(), 'src/app/tenancy/tenants/tenants-data.json'));\n    const landlords: {landlordData: any}[] = await readData(path.join(process.cwd(), 'src/app/landlord/landlords-data.json'));\n    const vendors: {vendorData: any}[] = await readData(path.join(process.cwd(), 'src/app/vendors/vendors-data.json'));\n    const agents: any[] = await readData(path.join(process.cwd(), 'src/app/vendors/agents/agents-data.json'));\n    const customers: {customerData: any}[] = await readData(path.join(process.cwd(), 'src/app/tenancy/customer/customers-data.json'));\n\n    const lookups: Record<string, string> = {};\n\n    tenants.forEach(t => {\n        if(t.tenantData.code) lookups[t.tenantData.code] = t.tenantData.name;\n    });\n    landlords.forEach(l => {\n        if(l.landlordData.code) lookups[l.landlordData.code] = l.landlordData.name;\n    });\n    vendors.forEach(v => {\n        if(v.vendorData.code) lookups[v.vendorData.code] = v.vendorData.name;\n    });\n     agents.forEach(a => {\n        if(a.code) lookups[a.code] = a.name;\n    });\n    customers.forEach(c => {\n        if(c.customerData.code) lookups[c.customerData.code] = c.customerData.name;\n    });\n\n    return lookups;\n}\n\n\nexport async function getSummary() {\n    const payments = await readPayments();\n    const now = new Date();\n    const startOfThisMonth = startOfMonth(now);\n    const endOfThisMonth = endOfMonth(now);\n\n    const summary = {\n        totalReceivedThisMonth: 0,\n        totalPaidThisMonth: 0,\n    };\n\n    for (const payment of payments) {\n        if(payment.currentStatus !== 'POSTED') continue; \n\n        const paymentDate = parseISO(payment.date);\n        if (isWithinInterval(paymentDate, { start: startOfThisMonth, end: endOfThisMonth })) {\n            if (payment.type === 'Receipt') {\n                summary.totalReceivedThisMonth += payment.amount;\n            } else if (payment.type === 'Payment') {\n                summary.totalPaidThisMonth += payment.amount;\n            }\n        }\n    }\n    \n    return summary;\n}\n\nexport async function getNextPaymentVoucherNumber() {\n    const payments = await readPayments();\n    const paymentVouchers = payments.filter(p => p.type === 'Payment');\n    if (paymentVouchers.length === 0) {\n        return 'PV-00001';\n    }\n    const lastVoucherNo = paymentVouchers.reduce((max, p) => {\n        const currentNum = parseInt(p.voucherNo.split('-')[1], 10);\n        return currentNum > max ? currentNum : max;\n    }, 0);\n    return `PV-${(lastVoucherNo + 1).toString().padStart(5, '0')}`;\n}\n\nexport async function getReferences(partyType: string, partyName: string, referenceType: string, paymentType: string, collectorName?: string) {\n    if (!partyType || !partyName || !referenceType) return [];\n    \n    const allPayments = await readPayments();\n    const paidRefs = new Set(allPayments.filter(p => p.status !== 'Cancelled').map(p => p.referenceNo));\n    \n    let references: { value: string, label: string, amount?: number, propertyCode?: string, unitCode?: string, roomCode?: string, partitionCode?: string, book?: any }[] = [];\n    \n    if (paymentType === 'Receipt') {\n        if (referenceType === 'Tenancy Contract') {\n            const contracts = await readData(tenancyContractsFilePath);\n            references = contracts\n                .filter((c: TenancyContract) => c.tenantCode === partyName)\n                .map((c: TenancyContract) => ({\n                    value: c.contractNo,\n                    label: `Contract: ${c.contractNo} (Property: ${c.property})`,\n                    amount: c.totalRent,\n                    propertyCode: c.property,\n                    unitCode: c.unitCode,\n                    roomCode: c.roomCode,\n                }));\n        } else if (referenceType === 'Invoice') {\n            const invoices = await readData(invoicesFilePath);\n            references = invoices\n                .filter((i: Invoice) => i.customerCode === partyName && i.status !== 'Paid' && i.status !== 'Cancelled')\n                .map((i: Invoice) => ({\n                    value: i.invoiceNo,\n                    label: `Invoice: ${i.invoiceNo} (Due: ${i.dueDate}, Bal: ${i.total - (i.amountPaid || 0)})`,\n                    amount: i.total - (i.amountPaid || 0),\n                    propertyCode: i.property,\n                    unitCode: i.unitCode,\n                    roomCode: i.roomCode,\n                }));\n        } else if (referenceType === 'Receipt Book') {\n            const books = await readData(receiptBooksFilePath);\n            books.forEach((book: ReceiptBook) => {\n                if(book.status === 'Active' && (!book.assignedTo || book.assignedTo === collectorName)) {\n                     for (let i = book.receiptStartNo; i <= book.receiptEndNo; i++) {\n                        const receiptNo = `${book.bookNo}-${i}`;\n                        if (!paidRefs.has(receiptNo)) {\n                            references.push({\n                                value: receiptNo,\n                                label: `Book: ${book.bookNo}, Receipt: ${i}`,\n                                book: book,\n                            });\n                        }\n                    }\n                }\n            });\n        }\n    } else { // Payment\n        if (referenceType === 'Lease Contract') {\n             const contracts = await readData(leaseContractsFilePath);\n             references = contracts\n                .filter((c: LeaseContract) => c.landlordCode === partyName)\n                .map((c: LeaseContract) => ({\n                    value: c.contractNo,\n                    label: `Lease: ${c.contractNo} (Property: ${c.property})`,\n                    amount: c.totalRent,\n                    propertyCode: c.property,\n                }));\n        } else if (referenceType === 'Bill') {\n            const bills = await readData(billsFilePath);\n            references = bills\n                .filter((b: Bill) => b.vendorCode === partyName && b.status !== 'Paid' && b.status !== 'Cancelled')\n                .map((b: Bill) => ({\n                    value: b.billNo,\n                    label: `Bill: ${b.billNo} (Due: ${b.dueDate}, Bal: ${b.total - (b.amountPaid || 0)})`,\n                    amount: b.total - (b.amountPaid || 0),\n                    propertyCode: b.property,\n                    unitCode: b.unitCode,\n                    roomCode: b.roomCode,\n                }));\n        }\n    }\n    \n    return references;\n}\n"],"names":[],"mappings":";;;;;;;IA+SsB,sBAAA,WAAA,GAAA,IAAA,+OAAA,EAAA,8CAAA,oOAAA,EAAA,KAAA,GAAA,0OAAA,EAAA","debugId":null}},
    {"offset": {"line": 568, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/finance/payment/actions.ts"],"sourcesContent":["\n\n'use server';\n\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { z } from 'zod';\nimport { revalidatePath } from 'next/cache';\nimport { paymentSchema, type Payment } from './schema';\nimport { type BankAccount } from '@/app/finance/banking/schema';\nimport { startOfMonth, endOfMonth, isWithinInterval, parseISO, isBefore } from 'date-fns';\nimport { applyPaymentToInvoices } from '@/app/tenancy/customer/invoice/actions';\nimport { type Contract as TenancyContract } from '@/app/tenancy/contract/schema';\nimport { type LeaseContract } from '@/app/lease/contract/schema';\nimport { type Invoice } from '@/app/tenancy/customer/invoice/schema';\nimport { type Bill } from '@/app/vendors/bill/schema';\nimport { type Cheque } from '../cheque-deposit/schema';\nimport { getWorkflowSettings } from '@/app/admin/workflow-settings/actions';\nimport { applyFinancialImpact, reverseFinancialImpact } from '@/app/workflow/actions';\nimport { type ReceiptBook } from '../book-management/schema';\n\n\nconst paymentsFilePath = path.join(process.cwd(), 'src/app/finance/payment/payments-data.json');\nconst invoicesFilePath = path.join(process.cwd(), 'src/app/tenancy/customer/invoice/invoices-data.json');\nconst billsFilePath = path.join(process.cwd(), 'src/app/vendors/bill/bills-data.json');\nconst receiptBooksFilePath = path.join(process.cwd(), 'src/app/finance/book-management/receipt-books-data.json');\nconst tenancyContractsFilePath = path.join(process.cwd(), 'src/app/tenancy/contract/contracts-data.json');\nconst leaseContractsFilePath = path.join(process.cwd(), 'src/app/lease/contract/contracts-data.json');\n\n\nasync function readData(filePath: string) {\n    try {\n        await fs.access(filePath);\n        const data = await fs.readFile(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            return [];\n        }\n        throw error;\n    }\n}\n\nasync function writeData(filePath: string, data: any) {\n    await fs.writeFile(filePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\n\nasync function readPayments(): Promise<Payment[]> {\n    return await readData(paymentsFilePath);\n}\nasync function writePayments(data: Payment[]) {\n    await fs.writeFile(paymentsFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\nasync function readInvoices(): Promise<Invoice[]> {\n    return await readData(invoicesFilePath);\n}\nasync function writeInvoices(data: Invoice[]) {\n    await fs.writeFile(invoicesFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\nasync function readBills(): Promise<Bill[]> {\n    return await readData(billsFilePath);\n}\nasync function writeBills(data: Bill[]) {\n    await fs.writeFile(billsFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\nasync function applyPaymentToBills(billPayments: { billId: string; amount: number }[], vendorCode: string) {\n    try {\n        const allBills = await readBills();\n        let utilityAccountId: string | undefined;\n\n        for (const payment of billPayments) {\n            const index = allBills.findIndex(b => b.id === payment.billId);\n            if (index !== -1) {\n                allBills[index].amountPaid = (allBills[index].amountPaid || 0) + payment.amount;\n                const remainingBalance = allBills[index].total - allBills[index].amountPaid;\n                \n                if (remainingBalance <= 0.001) {\n                    allBills[index].status = 'Paid';\n                } else if (allBills[index].status === 'Draft' || allBills[index].status === 'Overdue') {\n                    allBills[index].status = 'Sent';\n                }\n                \n                // Carry over the utilityAccountId if it exists on the bill\n                if (allBills[index].utilityAccountId) {\n                    utilityAccountId = allBills[index].utilityAccountId;\n                }\n            }\n        }\n\n        await writeBills(allBills);\n        revalidatePath(`/vendors/add?code=${vendorCode}`);\n        return { success: true, utilityAccountId };\n    } catch (error) {\n         return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n\n\nexport async function getPayments(user: { email: string; role: string; name?: string; }) {\n    const allPayments = await readPayments();\n    \n    // Filter out cancelled payments from the main view\n    const activePayments = allPayments.filter(p => p.status !== 'Cancelled');\n    \n    if (user.role === 'Admin' || user.role === 'Super Admin') {\n        return activePayments.sort((a,b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n    }\n    \n    const userPayments = activePayments.filter(p => p.createdByUser === user.name);\n\n    return userPayments.sort((a,b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n}\n\nasync function updateReceiptBookUsage(receiptNo: string) {\n    try {\n        const books = await readData(receiptBooksFilePath) as ReceiptBook[];\n        const [bookNo] = receiptNo.split('-');\n        if (!bookNo) return;\n\n        const bookIndex = books.findIndex(b => b.bookNo === bookNo);\n        if (bookIndex !== -1) {\n            books[bookIndex].leafsUsed = (books[bookIndex].leafsUsed || 0) + 1;\n             if (books[bookIndex].leafsUsed >= books[bookIndex].noOfLeafs) {\n                books[bookIndex].status = 'Finished';\n            }\n            await writeData(receiptBooksFilePath, books);\n            revalidatePath('/finance/book-management');\n        }\n    } catch (error) {\n        console.error(`Failed to update receipt book for receipt #${receiptNo}`, error);\n    }\n}\n\n\nexport async function addPayment(data: z.infer<typeof paymentSchema>) {\n    const validation = paymentSchema.safeParse(data);\n    if (!validation.success) {\n        return { success: false, error: 'Invalid data format.' };\n    }\n    \n    const paymentData = validation.data;\n\n    try {\n        const allPayments = await readPayments();\n        \n        if (paymentData.referenceNo && paymentData.referenceType !== 'Other') {\n            const isDuplicate = allPayments.some(p => \n                p.referenceNo === paymentData.referenceNo &&\n                p.status !== 'Cancelled'\n            );\n            if (isDuplicate) {\n                return { success: false, error: `A payment for reference \"${paymentData.referenceNo}\" already exists.` };\n            }\n        }\n        \n        const workflowSettings = await getWorkflowSettings();\n        const initialStatus = workflowSettings.approvalProcessEnabled ? 'DRAFT' : 'POSTED';\n        const newId = paymentData.id || `PAY-${Date.now()}`;\n\n        const newPayment: Payment = {\n            ...paymentData,\n            id: newId,\n            currentStatus: initialStatus,\n        };\n        \n        if (newPayment.type === 'Receipt' && newPayment.invoiceAllocations && newPayment.invoiceAllocations.length > 0) {\n            await applyPaymentToInvoices(newPayment.invoiceAllocations, newPayment.partyName);\n        }\n\n        if (newPayment.type === 'Payment' && newPayment.billAllocations && newPayment.billAllocations.length > 0) {\n            const billResult = await applyPaymentToBills(newPayment.billAllocations, newPayment.partyName);\n            if (billResult.utilityAccountId) {\n                newPayment.utilityAccountId = billResult.utilityAccountId;\n            }\n        }\n        \n        // If it's a DRAFT, the approval history will be added upon submission.\n        if (initialStatus === 'POSTED') {\n            newPayment.approvalHistory = [{\n                action: 'Created & Auto-Posted',\n                actorId: paymentData.createdByUser || 'System',\n                actorRole: 'User',\n                timestamp: new Date().toISOString(),\n                comments: 'Directly recorded transaction.',\n            }];\n            await applyFinancialImpact(newPayment);\n        }\n        \n        if (newPayment.referenceType === 'Receipt Book' && newPayment.referenceNo) {\n            await updateReceiptBookUsage(newPayment.referenceNo);\n        }\n        \n        allPayments.push(newPayment);\n        await writePayments(allPayments);\n        \n        revalidateAllPaths(newPayment);\n        return { success: true, data: newPayment };\n\n    } catch (error) {\n        return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n\n\nexport async function cancelPayment(paymentId: string) {\n    try {\n        const allPayments = await readPayments();\n        const paymentIndex = allPayments.findIndex(p => p.id === paymentId);\n\n        if (paymentIndex === -1) {\n            return { success: false, error: 'Payment not found.' };\n        }\n        \n        const paymentToCancel = allPayments[paymentIndex];\n\n        if(paymentToCancel.status === 'Cancelled') {\n            return { success: false, error: 'Payment is already cancelled.'};\n        }\n        \n        if(paymentToCancel.currentStatus === 'POSTED') {\n           await reverseFinancialImpact(paymentToCancel);\n        }\n        \n        allPayments[paymentIndex].status = 'Cancelled';\n        await writePayments(allPayments);\n\n        revalidateAllPaths(paymentToCancel);\n        return { success: true };\n    } catch (error) {\n        return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n\nexport async function restorePayment(paymentId: string) {\n    try {\n        const allPayments = await readPayments();\n        const paymentIndex = allPayments.findIndex(p => p.id === paymentId);\n\n        if (paymentIndex === -1) {\n            return { success: false, error: 'Payment not found.' };\n        }\n        \n        const paymentToRestore = allPayments[paymentIndex];\n\n        if(paymentToRestore.status !== 'Cancelled') {\n            return { success: false, error: 'Payment is not cancelled.'};\n        }\n        \n        if(paymentToRestore.currentStatus === 'POSTED') {\n           await applyFinancialImpact(paymentToRestore);\n        }\n        \n        // Restore to a sensible previous state\n        paymentToRestore.status = paymentToRestore.type === 'Payment' ? 'Paid' : 'Received';\n        await writePayments(allPayments);\n\n        revalidateAllPaths(paymentToRestore);\n        return { success: true };\n    } catch (error) {\n        return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n\n// Keeping this function for hard deletes (e.g. of draft transactions) if needed later\nexport async function deletePayment(paymentId: string) {\n    try {\n        const allPayments = await readPayments();\n        const paymentToDelete = allPayments.find(p => p.id === paymentId);\n\n        if (!paymentToDelete) {\n            return { success: false, error: 'Payment not found.' };\n        }\n        \n        if(paymentToDelete.currentStatus === 'POSTED') {\n            await reverseFinancialImpact(paymentToDelete);\n        }\n        \n        const updatedPayments = allPayments.filter(p => p.id !== paymentId);\n        await writePayments(updatedPayments);\n\n       revalidateAllPaths(paymentToDelete);\n\n        return { success: true };\n    } catch (error) {\n        return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n\n\nfunction revalidateAllPaths(payment: Payment) {\n    revalidatePath('/finance/payment');\n    revalidatePath('/finance/banking');\n    revalidatePath('/finance/chart-of-accounts');\n    revalidatePath('/vendors/agents');\n    revalidatePath('/workflow');\n    revalidatePath(`/tenancy/customer/add?code=${payment.partyName}`);\n    revalidatePath(`/vendors/add?code=${payment.partyName}`);\n}\n\nexport async function getPartyNameLookups(): Promise<Record<string, string>> {\n    // This function can be moved to a central lookup file to avoid duplication\n    // For now, keeping it here to fix the immediate issue.\n    const tenants: {tenantData: any}[] = await readData(path.join(process.cwd(), 'src/app/tenancy/tenants/tenants-data.json'));\n    const landlords: {landlordData: any}[] = await readData(path.join(process.cwd(), 'src/app/landlord/landlords-data.json'));\n    const vendors: {vendorData: any}[] = await readData(path.join(process.cwd(), 'src/app/vendors/vendors-data.json'));\n    const agents: any[] = await readData(path.join(process.cwd(), 'src/app/vendors/agents/agents-data.json'));\n    const customers: {customerData: any}[] = await readData(path.join(process.cwd(), 'src/app/tenancy/customer/customers-data.json'));\n\n    const lookups: Record<string, string> = {};\n\n    tenants.forEach(t => {\n        if(t.tenantData.code) lookups[t.tenantData.code] = t.tenantData.name;\n    });\n    landlords.forEach(l => {\n        if(l.landlordData.code) lookups[l.landlordData.code] = l.landlordData.name;\n    });\n    vendors.forEach(v => {\n        if(v.vendorData.code) lookups[v.vendorData.code] = v.vendorData.name;\n    });\n     agents.forEach(a => {\n        if(a.code) lookups[a.code] = a.name;\n    });\n    customers.forEach(c => {\n        if(c.customerData.code) lookups[c.customerData.code] = c.customerData.name;\n    });\n\n    return lookups;\n}\n\n\nexport async function getSummary() {\n    const payments = await readPayments();\n    const now = new Date();\n    const startOfThisMonth = startOfMonth(now);\n    const endOfThisMonth = endOfMonth(now);\n\n    const summary = {\n        totalReceivedThisMonth: 0,\n        totalPaidThisMonth: 0,\n    };\n\n    for (const payment of payments) {\n        if(payment.currentStatus !== 'POSTED') continue; \n\n        const paymentDate = parseISO(payment.date);\n        if (isWithinInterval(paymentDate, { start: startOfThisMonth, end: endOfThisMonth })) {\n            if (payment.type === 'Receipt') {\n                summary.totalReceivedThisMonth += payment.amount;\n            } else if (payment.type === 'Payment') {\n                summary.totalPaidThisMonth += payment.amount;\n            }\n        }\n    }\n    \n    return summary;\n}\n\nexport async function getNextPaymentVoucherNumber() {\n    const payments = await readPayments();\n    const paymentVouchers = payments.filter(p => p.type === 'Payment');\n    if (paymentVouchers.length === 0) {\n        return 'PV-00001';\n    }\n    const lastVoucherNo = paymentVouchers.reduce((max, p) => {\n        const currentNum = parseInt(p.voucherNo.split('-')[1], 10);\n        return currentNum > max ? currentNum : max;\n    }, 0);\n    return `PV-${(lastVoucherNo + 1).toString().padStart(5, '0')}`;\n}\n\nexport async function getReferences(partyType: string, partyName: string, referenceType: string, paymentType: string, collectorName?: string) {\n    if (!partyType || !partyName || !referenceType) return [];\n    \n    const allPayments = await readPayments();\n    const paidRefs = new Set(allPayments.filter(p => p.status !== 'Cancelled').map(p => p.referenceNo));\n    \n    let references: { value: string, label: string, amount?: number, propertyCode?: string, unitCode?: string, roomCode?: string, partitionCode?: string, book?: any }[] = [];\n    \n    if (paymentType === 'Receipt') {\n        if (referenceType === 'Tenancy Contract') {\n            const contracts = await readData(tenancyContractsFilePath);\n            references = contracts\n                .filter((c: TenancyContract) => c.tenantCode === partyName)\n                .map((c: TenancyContract) => ({\n                    value: c.contractNo,\n                    label: `Contract: ${c.contractNo} (Property: ${c.property})`,\n                    amount: c.totalRent,\n                    propertyCode: c.property,\n                    unitCode: c.unitCode,\n                    roomCode: c.roomCode,\n                }));\n        } else if (referenceType === 'Invoice') {\n            const invoices = await readData(invoicesFilePath);\n            references = invoices\n                .filter((i: Invoice) => i.customerCode === partyName && i.status !== 'Paid' && i.status !== 'Cancelled')\n                .map((i: Invoice) => ({\n                    value: i.invoiceNo,\n                    label: `Invoice: ${i.invoiceNo} (Due: ${i.dueDate}, Bal: ${i.total - (i.amountPaid || 0)})`,\n                    amount: i.total - (i.amountPaid || 0),\n                    propertyCode: i.property,\n                    unitCode: i.unitCode,\n                    roomCode: i.roomCode,\n                }));\n        } else if (referenceType === 'Receipt Book') {\n            const books = await readData(receiptBooksFilePath);\n            books.forEach((book: ReceiptBook) => {\n                if(book.status === 'Active' && (!book.assignedTo || book.assignedTo === collectorName)) {\n                     for (let i = book.receiptStartNo; i <= book.receiptEndNo; i++) {\n                        const receiptNo = `${book.bookNo}-${i}`;\n                        if (!paidRefs.has(receiptNo)) {\n                            references.push({\n                                value: receiptNo,\n                                label: `Book: ${book.bookNo}, Receipt: ${i}`,\n                                book: book,\n                            });\n                        }\n                    }\n                }\n            });\n        }\n    } else { // Payment\n        if (referenceType === 'Lease Contract') {\n             const contracts = await readData(leaseContractsFilePath);\n             references = contracts\n                .filter((c: LeaseContract) => c.landlordCode === partyName)\n                .map((c: LeaseContract) => ({\n                    value: c.contractNo,\n                    label: `Lease: ${c.contractNo} (Property: ${c.property})`,\n                    amount: c.totalRent,\n                    propertyCode: c.property,\n                }));\n        } else if (referenceType === 'Bill') {\n            const bills = await readData(billsFilePath);\n            references = bills\n                .filter((b: Bill) => b.vendorCode === partyName && b.status !== 'Paid' && b.status !== 'Cancelled')\n                .map((b: Bill) => ({\n                    value: b.billNo,\n                    label: `Bill: ${b.billNo} (Due: ${b.dueDate}, Bal: ${b.total - (b.amountPaid || 0)})`,\n                    amount: b.total - (b.amountPaid || 0),\n                    propertyCode: b.property,\n                    unitCode: b.unitCode,\n                    roomCode: b.roomCode,\n                }));\n        }\n    }\n    \n    return references;\n}\n"],"names":[],"mappings":";;;;;;;IA4QsB,gBAAA,WAAA,GAAA,IAAA,+OAAA,EAAA,8CAAA,oOAAA,EAAA,KAAA,GAAA,0OAAA,EAAA","debugId":null}},
    {"offset": {"line": 580, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/workflow/printable-report.tsx"],"sourcesContent":["\n'use client';\n\nimport React from 'react';\nimport { format } from 'date-fns';\nimport { type Payment } from '@/app/finance/payment/schema';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport { type Status } from './types';\nimport { Building2 } from 'lucide-react';\nimport { useCurrency } from '@/context/currency-context';\nimport { useCompanyProfile } from '@/context/company-profile-context';\n\ninterface PrintableReportProps {\n  transactions: Payment[];\n  filters: {\n    status: Status | 'ALL';\n    user: string;\n    from?: Date;\n    to?: Date;\n    voucherId?: string;\n  },\n  partyNameLookups: Record<string, string>;\n}\n\nexport const PrintableReport = React.forwardRef<HTMLDivElement, PrintableReportProps>(\n  ({ transactions, filters, partyNameLookups }, ref) => {\n    const { formatCurrency } = useCurrency();\n    const { profile } = useCompanyProfile();\n    const totalAmount = transactions.reduce((sum, t) => sum + t.amount, 0);\n\n    return (\n      <div ref={ref} className=\"p-8 bg-white text-black font-sans\">\n        <style type=\"text/css\" media=\"print\">\n          {`\n            @page { \n                size: A4; \n                margin: 1cm 0.25in;\n            }\n            body { -webkit-print-color-adjust: exact !important; color-adjust: exact !important; }\n            .printable-area { display: block; }\n            .page-break-before { page-break-before: always; }\n            .printable-table, .printable-table th, .printable-table td { border: 1px solid #e5e7eb !important; padding: 4px 6px; font-size: 9pt; }\n            .printable-table th { background-color: #f9fafb !important; }\n            .no-print { display: none !important; }\n            .print-only { display: block !important; }\n          `}\n        </style>\n        <div className=\"printable-area w-full\">\n            <div>\n                <header className=\"flex justify-between items-start pb-6 mb-6 border-b border-gray-300\">\n                    <div className=\"flex items-center gap-4\">\n                        <div className=\"p-3 bg-primary/10 text-primary rounded-lg\">\n                            {profile.logo ? <img src={profile.logo} alt=\"Company Logo\" className=\"h-8 w-8 object-contain\"/> : <Building2 className=\"h-8 w-8\" />}\n                        </div>\n                        <div>\n                            <h1 className=\"text-2xl font-bold text-gray-800\">{profile.name}</h1>\n                             <div className=\"text-center\">\n                              <h2 className=\"font-bold text-gray-800\" style={{ fontSize: '14px' }}>Daily Checkout Reports</h2>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"text-right text-xs\">\n                        <p><span className=\"font-semibold\">Report Date:</span> {format(new Date(), 'PP')}</p>\n                        {filters.user && <p><span className=\"font-semibold\">User:</span> {filters.user}</p>}\n                        {filters.voucherId && <p><span className=\"font-semibold\">Voucher ID:</span> {filters.voucherId}</p>}\n                        {filters.from && <p><span className=\"font-semibold\">From:</span> {format(filters.from, 'PP')}</p>}\n                        {filters.to && <p><span className=\"font-semibold\">To:</span> {format(filters.to, 'PP')}</p>}\n                    </div>\n                </header>\n                \n                <Table className=\"printable-table w-full\">\n                    <TableHeader>\n                        <TableRow className=\"bg-gray-100\">\n                            <TableHead className=\"border border-gray-300\">Date</TableHead>\n                            <TableHead className=\"border border-gray-300\">Transaction ID</TableHead>\n                            <TableHead className=\"border border-gray-300\">Type</TableHead>\n                            <TableHead className=\"border border-gray-300\">Party Name</TableHead>\n                            <TableHead className=\"border border-gray-300\">Property</TableHead>\n                            <TableHead className=\"border border-gray-300\">Unit</TableHead>\n                            <TableHead className=\"border border-gray-300\">Room</TableHead>\n                            <TableHead className=\"text-right border border-gray-300\">Amount</TableHead>\n                        </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                        {transactions.map(t => (\n                            <TableRow key={t.id}>\n                                <TableCell className=\"border border-gray-300\">{format(new Date(t.date), 'PP')}</TableCell>\n                                <TableCell className=\"font-mono text-xs border border-gray-300\">{t.id}</TableCell>\n                                <TableCell className=\"border border-gray-300\">{t.type}</TableCell>\n                                <TableCell className=\"border border-gray-300\">{partyNameLookups[t.partyName] || t.partyName}</TableCell>\n                                <TableCell className=\"border border-gray-300\">{t.property || '-'}</TableCell>\n                                <TableCell className=\"border border-gray-300\">{t.unitCode || '-'}</TableCell>\n                                <TableCell className=\"border border-gray-300\">{t.roomCode || '-'}</TableCell>\n                                <TableCell className=\"text-right font-medium border border-gray-300\">\n                                    {formatCurrency(t.amount)}\n                                </TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n\n                <div className=\"flex justify-end mt-[0.5in]\">\n                    <div className=\"w-full max-w-xs space-y-2\">\n                        <div className=\"flex justify-between border-t-2 border-gray-800 pt-2\">\n                            <span className=\"font-bold text-gray-800 text-base\">Total Amount:</span>\n                            <span className=\"font-bold text-gray-800 text-base\">{formatCurrency(totalAmount)}</span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <footer className=\"mt-16 pt-8 grid grid-cols-3 gap-8 text-center text-xs text-gray-600\">\n                <div className=\"border-t border-gray-400 pt-2\">\n                    <p className=\"font-semibold\">Prepared By</p>\n                </div>\n                <div className=\"border-t border-gray-400 pt-2\">\n                    <p className=\"font-semibold\">Checked By</p>\n                </div>\n                <div className=\"border-t border-gray-400 pt-2\">\n                    <p className=\"font-semibold\">Approved By</p>\n                </div>\n            </footer>\n        </div>\n      </div>\n    )\n});\n\nPrintableReport.displayName = 'PrintableReport';\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1089, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/input.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n"],"names":[],"mappings":";;;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,mNAAgB,CAC5B,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAO,EAAE;IAC9B,qBACE,8OAAC;QACC,MAAM;QACN,WAAW,IAAA,yHAAE,EACX,kYACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,MAAM,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 1117, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/workflow/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { z } from 'zod';\nimport { revalidatePath } from 'next/cache';\nimport { type Payment } from '@/app/finance/payment/schema';\nimport type { Role, Status } from './types';\nimport { type BankAccount } from '@/app/finance/banking/schema';\nimport { type Account } from '@/app/finance/chart-of-accounts/schema';\n\n\nconst paymentsFilePath = path.join(process.cwd(), 'src/app/finance/payment/payments-data.json');\nconst bankAccountsFilePath = path.join(process.cwd(), 'src/app/finance/banking/accounts-data.json');\nconst pettyCashFilePath = path.join(process.cwd(), 'src/app/finance/banking/petty-cash.json');\nconst accountsFilePath = path.join(process.cwd(), 'src/app/finance/chart-of-accounts/accounts.json');\nconst invoicesFilePath = path.join(process.cwd(), 'src/app/tenancy/customer/invoice/invoices-data.json');\nconst billsFilePath = path.join(process.cwd(), 'src/app/vendors/bill/bills-data.json');\n\n\nasync function readData(filePath: string): Promise<any[]> {\n    try {\n        await fs.access(filePath);\n        const data = await fs.readFile(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            return [];\n        }\n        throw error;\n    }\n}\n\nasync function writeData(filePath: string, data: any) {\n    await fs.writeFile(filePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\n\nasync function readPayments(): Promise<Payment[]> {\n    return await readData(paymentsFilePath);\n}\nasync function writePayments(data: Payment[]) {\n    await writeData(paymentsFilePath, data);\n}\n\nasync function readBankAccounts(): Promise<BankAccount[]> {\n    return await readData(bankAccountsFilePath);\n}\nasync function writeBankAccounts(data: BankAccount[]) {\n    await writeData(bankAccountsFilePath, data);\n}\n\nasync function readPettyCash(): Promise<{ balance: number }> {\n    const data = await readData(pettyCashFilePath);\n    if (!data || (Array.isArray(data) && data.length === 0)) {\n        return { balance: 0 };\n    }\n    return data as { balance: number };\n}\n\nasync function writePettyCash(data: { balance: number }) {\n    await fs.writeFile(pettyCashFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\n\nexport async function applyFinancialImpact(payment: Payment) {\n    const { type, amount, bankAccountId, paymentFrom, partyType, partyName, expenseAccountId } = payment;\n    const allAccounts: Account[] = await readData(accountsFilePath);\n    const accountsPayableIndex = allAccounts.findIndex(a => a.code === '2110'); // Accounts Payable\n    const ownersEquityAccountIndex = allAccounts.findIndex(a => a.code === '3110'); // Owner's Equity\n\n    // Update Cash/Bank balances\n    if (paymentFrom === 'Petty Cash') {\n        const pettyCash = await readPettyCash();\n        if (type === 'Payment') {\n            pettyCash.balance -= amount;\n        } else { // Receipt\n            pettyCash.balance += amount;\n        }\n        await writePettyCash(pettyCash);\n    } else if (bankAccountId) {\n        const allBankAccounts = await readBankAccounts();\n        const accountIndex = allBankAccounts.findIndex(acc => acc.id === bankAccountId);\n        if (accountIndex !== -1) {\n            if (type === 'Payment') {\n                allBankAccounts[accountIndex].balance -= amount;\n            } else { // Receipt\n                allBankAccounts[accountIndex].balance += amount;\n            }\n            await writeBankAccounts(allBankAccounts);\n        }\n    }\n    \n    // Update Chart of Accounts based on transaction type\n    if (partyName === 'Owner') {\n        if (ownersEquityAccountIndex !== -1) {\n            if (type === 'Payment') { // Withdrawal\n                allAccounts[ownersEquityAccountIndex].balance -= amount;\n            } else { // Contribution\n                allAccounts[ownersEquityAccountIndex].balance += amount;\n            }\n        }\n    } else if (type === 'Payment' && expenseAccountId) {\n        const expenseAccountIndex = allAccounts.findIndex(a => a.code === expenseAccountId);\n        if(expenseAccountIndex !== -1) {\n            allAccounts[expenseAccountIndex].balance += amount;\n        }\n    } else if (type === 'Receipt') {\n        // Assuming non-equity receipts are rental income for simplicity\n        const revenueAccountIndex = allAccounts.findIndex(a => a.code === '4110');\n        if (revenueAccountIndex !== -1) {\n            allAccounts[revenueAccountIndex].balance += amount;\n        }\n    }\n\n    // Update Accounts Payable for vendor transactions\n    if (partyType === 'Vendor') {\n        if (accountsPayableIndex !== -1) {\n             if (type === 'Payment') {\n                allAccounts[accountsPayableIndex].balance -= amount;\n            } else { // Receipt from a vendor (refund)\n                allAccounts[accountsPayableIndex].balance -= amount;\n            }\n        }\n    }\n    \n     await writeData(accountsFilePath, allAccounts);\n}\n\n\ntype WorkflowAction = 'SUBMIT' | 'APPROVE' | 'REJECT' | 'ADD_COMMENT';\n\nconst workflowActionSchema = z.object({\n    transactionId: z.string(),\n    actorId: z.string(),\n    actorRole: z.string(),\n    comment: z.string().optional(),\n});\n\n\nconst performStateTransition = (transaction: Payment, action: WorkflowAction, currentUserRole: Role): Status => {\n    let newStatus: Status = transaction.currentStatus || 'DRAFT';\n\n    switch (action) {\n        case 'SUBMIT':\n            if (transaction.currentStatus === 'DRAFT' || transaction.currentStatus === 'REJECTED') {\n                newStatus = 'PENDING_ADMIN_APPROVAL';\n            }\n            break;\n        case 'APPROVE':\n            if (transaction.currentStatus === 'PENDING_ADMIN_APPROVAL' && currentUserRole === 'Admin') {\n                newStatus = 'PENDING_SUPER_ADMIN_APPROVAL';\n            } else if (transaction.currentStatus === 'PENDING_SUPER_ADMIN_APPROVAL' && currentUserRole === 'Super Admin') {\n                newStatus = 'POSTED';\n            }\n            break;\n        case 'REJECT':\n            if (transaction.currentStatus === 'PENDING_ADMIN_APPROVAL' && currentUserRole === 'Admin') {\n                newStatus = 'REJECTED';\n            } else if (transaction.currentStatus === 'PENDING_SUPER_ADMIN_APPROVAL' && currentUserRole === 'Super Admin') {\n                newStatus = 'REJECTED';\n            }\n            break;\n        default:\n            break;\n    }\n    return newStatus;\n};\n\nconst getHistoryActionText = (action: WorkflowAction, newStatus: Status, previousStatus: Status, role: Role): string => {\n     switch (action) {\n        case 'SUBMIT': return 'Submitted for Approval';\n        case 'APPROVE':\n            if (newStatus === 'POSTED') return 'Final Approval & Posted';\n            return `Approved by ${role}`;\n        case 'REJECT': return `Rejected by ${role}`;\n        case 'ADD_COMMENT': return 'Comment Added';\n        default: return 'Action Performed';\n    }\n}\n\n\nasync function updateTransactionWorkflow(\n    transactionId: string,\n    action: WorkflowAction,\n    actorId: string,\n    actorRole: Role,\n    comment?: string\n) {\n    try {\n        const allPayments = await readPayments();\n        const transactionIndex = allPayments.findIndex(t => t.id === transactionId);\n\n        if (transactionIndex === -1) {\n            return { success: false, error: 'Transaction not found.' };\n        }\n\n        const transaction = allPayments[transactionIndex];\n        const previousStatus = transaction.currentStatus || 'DRAFT';\n        const newStatus = performStateTransition(transaction, action, actorRole);\n        const historyActionText = getHistoryActionText(action, newStatus, previousStatus, actorRole);\n\n        const newHistoryEntry = {\n            action: historyActionText,\n            actorId: actorId,\n            actorRole: actorRole,\n            timestamp: new Date().toISOString(),\n            comments: comment || '',\n        };\n        \n        allPayments[transactionIndex] = {\n            ...transaction,\n            currentStatus: newStatus,\n            approvalHistory: [...(transaction.approvalHistory || []), newHistoryEntry],\n        };\n        \n        if (newStatus === 'POSTED' && previousStatus !== 'POSTED') {\n            await applyFinancialImpact(allPayments[transactionIndex]);\n        }\n\n\n        await writePayments(allPayments);\n        revalidatePath('/workflow');\n        revalidatePath('/finance/banking');\n        revalidatePath('/finance/chart-of-accounts');\n        return { success: true };\n\n    } catch (error) {\n        return { success: false, error: (error as Error).message };\n    }\n}\n\n\nexport async function submitTransaction(params: z.infer<typeof workflowActionSchema>) {\n    const validation = workflowActionSchema.safeParse(params);\n    if (!validation.success) return { success: false, error: \"Invalid input\" };\n    const { transactionId, actorId, actorRole, comment } = validation.data;\n    return await updateTransactionWorkflow(transactionId, 'SUBMIT', actorId, actorRole as Role, comment);\n}\n\nexport async function approveTransaction(params: z.infer<typeof workflowActionSchema>) {\n     const validation = workflowActionSchema.safeParse(params);\n    if (!validation.success) return { success: false, error: \"Invalid input\" };\n    const { transactionId, actorId, actorRole, comment } = validation.data;\n    return await updateTransactionWorkflow(transactionId, 'APPROVE', actorId, actorRole as Role, comment);\n}\n\nexport async function rejectTransaction(params: z.infer<typeof workflowActionSchema>) {\n     const validation = workflowActionSchema.safeParse(params);\n    if (!validation.success) return { success: false, error: \"Invalid input\" };\n    const { transactionId, actorId, actorRole, comment } = validation.data;\n    return await updateTransactionWorkflow(transactionId, 'REJECT', actorId, actorRole as Role, comment);\n}\n\nexport async function addCommentToTransaction(params: z.infer<typeof workflowActionSchema>) {\n    const validation = workflowActionSchema.safeParse(params);\n    if (!validation.success) return { success: false, error: \"Invalid input\" };\n    const { transactionId, actorId, actorRole, comment } = validation.data;\n    return await updateTransactionWorkflow(transactionId, 'ADD_COMMENT', actorId as Role, actorRole as Role, comment);\n}\n\nexport async function reverseFinancialImpact(payment: Payment) {\n    if (payment.currentStatus !== 'POSTED') return; \n\n    if (payment.paymentFrom === 'Petty Cash') {\n        const pettyCash = await readPettyCash();\n        if (payment.type === 'Payment') {\n            pettyCash.balance += payment.amount;\n        } else {\n            pettyCash.balance -= payment.amount;\n        }\n        await writePettyCash(pettyCash);\n    } else if (payment.bankAccountId) {\n        const allBankAccounts = await readBankAccounts();\n        const accountIndex = allBankAccounts.findIndex(acc => acc.id === payment.bankAccountId);\n        if (accountIndex !== -1) {\n            if (payment.type === 'Payment') {\n                allBankAccounts[accountIndex].balance += payment.amount;\n            } else {\n                allBankAccounts[accountIndex].balance -= payment.amount;\n            }\n            await writeBankAccounts(allBankAccounts);\n        }\n    }\n\n    const allAccounts: Account[] = await readData(accountsFilePath);\n    const { type, amount, expenseAccountId, partyType, partyName } = payment;\n    \n    if (partyName === 'Owner') {\n        const ownersEquityAccountIndex = allAccounts.findIndex(a => a.code === '3110');\n        if (ownersEquityAccountIndex !== -1) {\n            if (type === 'Payment') { // Withdrawal\n                allAccounts[ownersEquityAccountIndex].balance += amount;\n            } else { // Contribution\n                allAccounts[ownersEquityAccountIndex].balance -= amount;\n            }\n        }\n    } else if (type === 'Payment' && expenseAccountId) {\n        const expenseAccountIndex = allAccounts.findIndex(a => a.code === expenseAccountId);\n        if(expenseAccountIndex !== -1) {\n            allAccounts[expenseAccountIndex].balance -= amount;\n        }\n    } else if (type === 'Receipt') {\n        const revenueAccountIndex = allAccounts.findIndex(a => a.code === '4110');\n        if (revenueAccountIndex !== -1) {\n            allAccounts[revenueAccountIndex].balance -= amount;\n        }\n    }\n\n    if (partyType === 'Vendor') {\n        const accountsPayableIndex = allAccounts.findIndex(a => a.code === '2110');\n        if (accountsPayableIndex !== -1) {\n             if (type === 'Payment') {\n                allAccounts[accountsPayableIndex].balance += amount;\n            } else { // Refund from vendor\n                allAccounts[accountsPayableIndex].balance += amount;\n            }\n        }\n    }\n\n    await writeData(accountsFilePath, allAccounts);\n}"],"names":[],"mappings":";;;;;;;IAiPsB,qBAAA,WAAA,GAAA,IAAA,+OAAA,EAAA,8CAAA,oOAAA,EAAA,KAAA,GAAA,0OAAA,EAAA","debugId":null}},
    {"offset": {"line": 1129, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/workflow/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { z } from 'zod';\nimport { revalidatePath } from 'next/cache';\nimport { type Payment } from '@/app/finance/payment/schema';\nimport type { Role, Status } from './types';\nimport { type BankAccount } from '@/app/finance/banking/schema';\nimport { type Account } from '@/app/finance/chart-of-accounts/schema';\n\n\nconst paymentsFilePath = path.join(process.cwd(), 'src/app/finance/payment/payments-data.json');\nconst bankAccountsFilePath = path.join(process.cwd(), 'src/app/finance/banking/accounts-data.json');\nconst pettyCashFilePath = path.join(process.cwd(), 'src/app/finance/banking/petty-cash.json');\nconst accountsFilePath = path.join(process.cwd(), 'src/app/finance/chart-of-accounts/accounts.json');\nconst invoicesFilePath = path.join(process.cwd(), 'src/app/tenancy/customer/invoice/invoices-data.json');\nconst billsFilePath = path.join(process.cwd(), 'src/app/vendors/bill/bills-data.json');\n\n\nasync function readData(filePath: string): Promise<any[]> {\n    try {\n        await fs.access(filePath);\n        const data = await fs.readFile(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            return [];\n        }\n        throw error;\n    }\n}\n\nasync function writeData(filePath: string, data: any) {\n    await fs.writeFile(filePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\n\nasync function readPayments(): Promise<Payment[]> {\n    return await readData(paymentsFilePath);\n}\nasync function writePayments(data: Payment[]) {\n    await writeData(paymentsFilePath, data);\n}\n\nasync function readBankAccounts(): Promise<BankAccount[]> {\n    return await readData(bankAccountsFilePath);\n}\nasync function writeBankAccounts(data: BankAccount[]) {\n    await writeData(bankAccountsFilePath, data);\n}\n\nasync function readPettyCash(): Promise<{ balance: number }> {\n    const data = await readData(pettyCashFilePath);\n    if (!data || (Array.isArray(data) && data.length === 0)) {\n        return { balance: 0 };\n    }\n    return data as { balance: number };\n}\n\nasync function writePettyCash(data: { balance: number }) {\n    await fs.writeFile(pettyCashFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\n\nexport async function applyFinancialImpact(payment: Payment) {\n    const { type, amount, bankAccountId, paymentFrom, partyType, partyName, expenseAccountId } = payment;\n    const allAccounts: Account[] = await readData(accountsFilePath);\n    const accountsPayableIndex = allAccounts.findIndex(a => a.code === '2110'); // Accounts Payable\n    const ownersEquityAccountIndex = allAccounts.findIndex(a => a.code === '3110'); // Owner's Equity\n\n    // Update Cash/Bank balances\n    if (paymentFrom === 'Petty Cash') {\n        const pettyCash = await readPettyCash();\n        if (type === 'Payment') {\n            pettyCash.balance -= amount;\n        } else { // Receipt\n            pettyCash.balance += amount;\n        }\n        await writePettyCash(pettyCash);\n    } else if (bankAccountId) {\n        const allBankAccounts = await readBankAccounts();\n        const accountIndex = allBankAccounts.findIndex(acc => acc.id === bankAccountId);\n        if (accountIndex !== -1) {\n            if (type === 'Payment') {\n                allBankAccounts[accountIndex].balance -= amount;\n            } else { // Receipt\n                allBankAccounts[accountIndex].balance += amount;\n            }\n            await writeBankAccounts(allBankAccounts);\n        }\n    }\n    \n    // Update Chart of Accounts based on transaction type\n    if (partyName === 'Owner') {\n        if (ownersEquityAccountIndex !== -1) {\n            if (type === 'Payment') { // Withdrawal\n                allAccounts[ownersEquityAccountIndex].balance -= amount;\n            } else { // Contribution\n                allAccounts[ownersEquityAccountIndex].balance += amount;\n            }\n        }\n    } else if (type === 'Payment' && expenseAccountId) {\n        const expenseAccountIndex = allAccounts.findIndex(a => a.code === expenseAccountId);\n        if(expenseAccountIndex !== -1) {\n            allAccounts[expenseAccountIndex].balance += amount;\n        }\n    } else if (type === 'Receipt') {\n        // Assuming non-equity receipts are rental income for simplicity\n        const revenueAccountIndex = allAccounts.findIndex(a => a.code === '4110');\n        if (revenueAccountIndex !== -1) {\n            allAccounts[revenueAccountIndex].balance += amount;\n        }\n    }\n\n    // Update Accounts Payable for vendor transactions\n    if (partyType === 'Vendor') {\n        if (accountsPayableIndex !== -1) {\n             if (type === 'Payment') {\n                allAccounts[accountsPayableIndex].balance -= amount;\n            } else { // Receipt from a vendor (refund)\n                allAccounts[accountsPayableIndex].balance -= amount;\n            }\n        }\n    }\n    \n     await writeData(accountsFilePath, allAccounts);\n}\n\n\ntype WorkflowAction = 'SUBMIT' | 'APPROVE' | 'REJECT' | 'ADD_COMMENT';\n\nconst workflowActionSchema = z.object({\n    transactionId: z.string(),\n    actorId: z.string(),\n    actorRole: z.string(),\n    comment: z.string().optional(),\n});\n\n\nconst performStateTransition = (transaction: Payment, action: WorkflowAction, currentUserRole: Role): Status => {\n    let newStatus: Status = transaction.currentStatus || 'DRAFT';\n\n    switch (action) {\n        case 'SUBMIT':\n            if (transaction.currentStatus === 'DRAFT' || transaction.currentStatus === 'REJECTED') {\n                newStatus = 'PENDING_ADMIN_APPROVAL';\n            }\n            break;\n        case 'APPROVE':\n            if (transaction.currentStatus === 'PENDING_ADMIN_APPROVAL' && currentUserRole === 'Admin') {\n                newStatus = 'PENDING_SUPER_ADMIN_APPROVAL';\n            } else if (transaction.currentStatus === 'PENDING_SUPER_ADMIN_APPROVAL' && currentUserRole === 'Super Admin') {\n                newStatus = 'POSTED';\n            }\n            break;\n        case 'REJECT':\n            if (transaction.currentStatus === 'PENDING_ADMIN_APPROVAL' && currentUserRole === 'Admin') {\n                newStatus = 'REJECTED';\n            } else if (transaction.currentStatus === 'PENDING_SUPER_ADMIN_APPROVAL' && currentUserRole === 'Super Admin') {\n                newStatus = 'REJECTED';\n            }\n            break;\n        default:\n            break;\n    }\n    return newStatus;\n};\n\nconst getHistoryActionText = (action: WorkflowAction, newStatus: Status, previousStatus: Status, role: Role): string => {\n     switch (action) {\n        case 'SUBMIT': return 'Submitted for Approval';\n        case 'APPROVE':\n            if (newStatus === 'POSTED') return 'Final Approval & Posted';\n            return `Approved by ${role}`;\n        case 'REJECT': return `Rejected by ${role}`;\n        case 'ADD_COMMENT': return 'Comment Added';\n        default: return 'Action Performed';\n    }\n}\n\n\nasync function updateTransactionWorkflow(\n    transactionId: string,\n    action: WorkflowAction,\n    actorId: string,\n    actorRole: Role,\n    comment?: string\n) {\n    try {\n        const allPayments = await readPayments();\n        const transactionIndex = allPayments.findIndex(t => t.id === transactionId);\n\n        if (transactionIndex === -1) {\n            return { success: false, error: 'Transaction not found.' };\n        }\n\n        const transaction = allPayments[transactionIndex];\n        const previousStatus = transaction.currentStatus || 'DRAFT';\n        const newStatus = performStateTransition(transaction, action, actorRole);\n        const historyActionText = getHistoryActionText(action, newStatus, previousStatus, actorRole);\n\n        const newHistoryEntry = {\n            action: historyActionText,\n            actorId: actorId,\n            actorRole: actorRole,\n            timestamp: new Date().toISOString(),\n            comments: comment || '',\n        };\n        \n        allPayments[transactionIndex] = {\n            ...transaction,\n            currentStatus: newStatus,\n            approvalHistory: [...(transaction.approvalHistory || []), newHistoryEntry],\n        };\n        \n        if (newStatus === 'POSTED' && previousStatus !== 'POSTED') {\n            await applyFinancialImpact(allPayments[transactionIndex]);\n        }\n\n\n        await writePayments(allPayments);\n        revalidatePath('/workflow');\n        revalidatePath('/finance/banking');\n        revalidatePath('/finance/chart-of-accounts');\n        return { success: true };\n\n    } catch (error) {\n        return { success: false, error: (error as Error).message };\n    }\n}\n\n\nexport async function submitTransaction(params: z.infer<typeof workflowActionSchema>) {\n    const validation = workflowActionSchema.safeParse(params);\n    if (!validation.success) return { success: false, error: \"Invalid input\" };\n    const { transactionId, actorId, actorRole, comment } = validation.data;\n    return await updateTransactionWorkflow(transactionId, 'SUBMIT', actorId, actorRole as Role, comment);\n}\n\nexport async function approveTransaction(params: z.infer<typeof workflowActionSchema>) {\n     const validation = workflowActionSchema.safeParse(params);\n    if (!validation.success) return { success: false, error: \"Invalid input\" };\n    const { transactionId, actorId, actorRole, comment } = validation.data;\n    return await updateTransactionWorkflow(transactionId, 'APPROVE', actorId, actorRole as Role, comment);\n}\n\nexport async function rejectTransaction(params: z.infer<typeof workflowActionSchema>) {\n     const validation = workflowActionSchema.safeParse(params);\n    if (!validation.success) return { success: false, error: \"Invalid input\" };\n    const { transactionId, actorId, actorRole, comment } = validation.data;\n    return await updateTransactionWorkflow(transactionId, 'REJECT', actorId, actorRole as Role, comment);\n}\n\nexport async function addCommentToTransaction(params: z.infer<typeof workflowActionSchema>) {\n    const validation = workflowActionSchema.safeParse(params);\n    if (!validation.success) return { success: false, error: \"Invalid input\" };\n    const { transactionId, actorId, actorRole, comment } = validation.data;\n    return await updateTransactionWorkflow(transactionId, 'ADD_COMMENT', actorId as Role, actorRole as Role, comment);\n}\n\nexport async function reverseFinancialImpact(payment: Payment) {\n    if (payment.currentStatus !== 'POSTED') return; \n\n    if (payment.paymentFrom === 'Petty Cash') {\n        const pettyCash = await readPettyCash();\n        if (payment.type === 'Payment') {\n            pettyCash.balance += payment.amount;\n        } else {\n            pettyCash.balance -= payment.amount;\n        }\n        await writePettyCash(pettyCash);\n    } else if (payment.bankAccountId) {\n        const allBankAccounts = await readBankAccounts();\n        const accountIndex = allBankAccounts.findIndex(acc => acc.id === payment.bankAccountId);\n        if (accountIndex !== -1) {\n            if (payment.type === 'Payment') {\n                allBankAccounts[accountIndex].balance += payment.amount;\n            } else {\n                allBankAccounts[accountIndex].balance -= payment.amount;\n            }\n            await writeBankAccounts(allBankAccounts);\n        }\n    }\n\n    const allAccounts: Account[] = await readData(accountsFilePath);\n    const { type, amount, expenseAccountId, partyType, partyName } = payment;\n    \n    if (partyName === 'Owner') {\n        const ownersEquityAccountIndex = allAccounts.findIndex(a => a.code === '3110');\n        if (ownersEquityAccountIndex !== -1) {\n            if (type === 'Payment') { // Withdrawal\n                allAccounts[ownersEquityAccountIndex].balance += amount;\n            } else { // Contribution\n                allAccounts[ownersEquityAccountIndex].balance -= amount;\n            }\n        }\n    } else if (type === 'Payment' && expenseAccountId) {\n        const expenseAccountIndex = allAccounts.findIndex(a => a.code === expenseAccountId);\n        if(expenseAccountIndex !== -1) {\n            allAccounts[expenseAccountIndex].balance -= amount;\n        }\n    } else if (type === 'Receipt') {\n        const revenueAccountIndex = allAccounts.findIndex(a => a.code === '4110');\n        if (revenueAccountIndex !== -1) {\n            allAccounts[revenueAccountIndex].balance -= amount;\n        }\n    }\n\n    if (partyType === 'Vendor') {\n        const accountsPayableIndex = allAccounts.findIndex(a => a.code === '2110');\n        if (accountsPayableIndex !== -1) {\n             if (type === 'Payment') {\n                allAccounts[accountsPayableIndex].balance += amount;\n            } else { // Refund from vendor\n                allAccounts[accountsPayableIndex].balance += amount;\n            }\n        }\n    }\n\n    await writeData(accountsFilePath, allAccounts);\n}"],"names":[],"mappings":";;;;;;;IAwPsB,oBAAA,WAAA,GAAA,IAAA,+OAAA,EAAA,8CAAA,oOAAA,EAAA,KAAA,GAAA,0OAAA,EAAA","debugId":null}},
    {"offset": {"line": 1141, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/workflow/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { z } from 'zod';\nimport { revalidatePath } from 'next/cache';\nimport { type Payment } from '@/app/finance/payment/schema';\nimport type { Role, Status } from './types';\nimport { type BankAccount } from '@/app/finance/banking/schema';\nimport { type Account } from '@/app/finance/chart-of-accounts/schema';\n\n\nconst paymentsFilePath = path.join(process.cwd(), 'src/app/finance/payment/payments-data.json');\nconst bankAccountsFilePath = path.join(process.cwd(), 'src/app/finance/banking/accounts-data.json');\nconst pettyCashFilePath = path.join(process.cwd(), 'src/app/finance/banking/petty-cash.json');\nconst accountsFilePath = path.join(process.cwd(), 'src/app/finance/chart-of-accounts/accounts.json');\nconst invoicesFilePath = path.join(process.cwd(), 'src/app/tenancy/customer/invoice/invoices-data.json');\nconst billsFilePath = path.join(process.cwd(), 'src/app/vendors/bill/bills-data.json');\n\n\nasync function readData(filePath: string): Promise<any[]> {\n    try {\n        await fs.access(filePath);\n        const data = await fs.readFile(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            return [];\n        }\n        throw error;\n    }\n}\n\nasync function writeData(filePath: string, data: any) {\n    await fs.writeFile(filePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\n\nasync function readPayments(): Promise<Payment[]> {\n    return await readData(paymentsFilePath);\n}\nasync function writePayments(data: Payment[]) {\n    await writeData(paymentsFilePath, data);\n}\n\nasync function readBankAccounts(): Promise<BankAccount[]> {\n    return await readData(bankAccountsFilePath);\n}\nasync function writeBankAccounts(data: BankAccount[]) {\n    await writeData(bankAccountsFilePath, data);\n}\n\nasync function readPettyCash(): Promise<{ balance: number }> {\n    const data = await readData(pettyCashFilePath);\n    if (!data || (Array.isArray(data) && data.length === 0)) {\n        return { balance: 0 };\n    }\n    return data as { balance: number };\n}\n\nasync function writePettyCash(data: { balance: number }) {\n    await fs.writeFile(pettyCashFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\n\nexport async function applyFinancialImpact(payment: Payment) {\n    const { type, amount, bankAccountId, paymentFrom, partyType, partyName, expenseAccountId } = payment;\n    const allAccounts: Account[] = await readData(accountsFilePath);\n    const accountsPayableIndex = allAccounts.findIndex(a => a.code === '2110'); // Accounts Payable\n    const ownersEquityAccountIndex = allAccounts.findIndex(a => a.code === '3110'); // Owner's Equity\n\n    // Update Cash/Bank balances\n    if (paymentFrom === 'Petty Cash') {\n        const pettyCash = await readPettyCash();\n        if (type === 'Payment') {\n            pettyCash.balance -= amount;\n        } else { // Receipt\n            pettyCash.balance += amount;\n        }\n        await writePettyCash(pettyCash);\n    } else if (bankAccountId) {\n        const allBankAccounts = await readBankAccounts();\n        const accountIndex = allBankAccounts.findIndex(acc => acc.id === bankAccountId);\n        if (accountIndex !== -1) {\n            if (type === 'Payment') {\n                allBankAccounts[accountIndex].balance -= amount;\n            } else { // Receipt\n                allBankAccounts[accountIndex].balance += amount;\n            }\n            await writeBankAccounts(allBankAccounts);\n        }\n    }\n    \n    // Update Chart of Accounts based on transaction type\n    if (partyName === 'Owner') {\n        if (ownersEquityAccountIndex !== -1) {\n            if (type === 'Payment') { // Withdrawal\n                allAccounts[ownersEquityAccountIndex].balance -= amount;\n            } else { // Contribution\n                allAccounts[ownersEquityAccountIndex].balance += amount;\n            }\n        }\n    } else if (type === 'Payment' && expenseAccountId) {\n        const expenseAccountIndex = allAccounts.findIndex(a => a.code === expenseAccountId);\n        if(expenseAccountIndex !== -1) {\n            allAccounts[expenseAccountIndex].balance += amount;\n        }\n    } else if (type === 'Receipt') {\n        // Assuming non-equity receipts are rental income for simplicity\n        const revenueAccountIndex = allAccounts.findIndex(a => a.code === '4110');\n        if (revenueAccountIndex !== -1) {\n            allAccounts[revenueAccountIndex].balance += amount;\n        }\n    }\n\n    // Update Accounts Payable for vendor transactions\n    if (partyType === 'Vendor') {\n        if (accountsPayableIndex !== -1) {\n             if (type === 'Payment') {\n                allAccounts[accountsPayableIndex].balance -= amount;\n            } else { // Receipt from a vendor (refund)\n                allAccounts[accountsPayableIndex].balance -= amount;\n            }\n        }\n    }\n    \n     await writeData(accountsFilePath, allAccounts);\n}\n\n\ntype WorkflowAction = 'SUBMIT' | 'APPROVE' | 'REJECT' | 'ADD_COMMENT';\n\nconst workflowActionSchema = z.object({\n    transactionId: z.string(),\n    actorId: z.string(),\n    actorRole: z.string(),\n    comment: z.string().optional(),\n});\n\n\nconst performStateTransition = (transaction: Payment, action: WorkflowAction, currentUserRole: Role): Status => {\n    let newStatus: Status = transaction.currentStatus || 'DRAFT';\n\n    switch (action) {\n        case 'SUBMIT':\n            if (transaction.currentStatus === 'DRAFT' || transaction.currentStatus === 'REJECTED') {\n                newStatus = 'PENDING_ADMIN_APPROVAL';\n            }\n            break;\n        case 'APPROVE':\n            if (transaction.currentStatus === 'PENDING_ADMIN_APPROVAL' && currentUserRole === 'Admin') {\n                newStatus = 'PENDING_SUPER_ADMIN_APPROVAL';\n            } else if (transaction.currentStatus === 'PENDING_SUPER_ADMIN_APPROVAL' && currentUserRole === 'Super Admin') {\n                newStatus = 'POSTED';\n            }\n            break;\n        case 'REJECT':\n            if (transaction.currentStatus === 'PENDING_ADMIN_APPROVAL' && currentUserRole === 'Admin') {\n                newStatus = 'REJECTED';\n            } else if (transaction.currentStatus === 'PENDING_SUPER_ADMIN_APPROVAL' && currentUserRole === 'Super Admin') {\n                newStatus = 'REJECTED';\n            }\n            break;\n        default:\n            break;\n    }\n    return newStatus;\n};\n\nconst getHistoryActionText = (action: WorkflowAction, newStatus: Status, previousStatus: Status, role: Role): string => {\n     switch (action) {\n        case 'SUBMIT': return 'Submitted for Approval';\n        case 'APPROVE':\n            if (newStatus === 'POSTED') return 'Final Approval & Posted';\n            return `Approved by ${role}`;\n        case 'REJECT': return `Rejected by ${role}`;\n        case 'ADD_COMMENT': return 'Comment Added';\n        default: return 'Action Performed';\n    }\n}\n\n\nasync function updateTransactionWorkflow(\n    transactionId: string,\n    action: WorkflowAction,\n    actorId: string,\n    actorRole: Role,\n    comment?: string\n) {\n    try {\n        const allPayments = await readPayments();\n        const transactionIndex = allPayments.findIndex(t => t.id === transactionId);\n\n        if (transactionIndex === -1) {\n            return { success: false, error: 'Transaction not found.' };\n        }\n\n        const transaction = allPayments[transactionIndex];\n        const previousStatus = transaction.currentStatus || 'DRAFT';\n        const newStatus = performStateTransition(transaction, action, actorRole);\n        const historyActionText = getHistoryActionText(action, newStatus, previousStatus, actorRole);\n\n        const newHistoryEntry = {\n            action: historyActionText,\n            actorId: actorId,\n            actorRole: actorRole,\n            timestamp: new Date().toISOString(),\n            comments: comment || '',\n        };\n        \n        allPayments[transactionIndex] = {\n            ...transaction,\n            currentStatus: newStatus,\n            approvalHistory: [...(transaction.approvalHistory || []), newHistoryEntry],\n        };\n        \n        if (newStatus === 'POSTED' && previousStatus !== 'POSTED') {\n            await applyFinancialImpact(allPayments[transactionIndex]);\n        }\n\n\n        await writePayments(allPayments);\n        revalidatePath('/workflow');\n        revalidatePath('/finance/banking');\n        revalidatePath('/finance/chart-of-accounts');\n        return { success: true };\n\n    } catch (error) {\n        return { success: false, error: (error as Error).message };\n    }\n}\n\n\nexport async function submitTransaction(params: z.infer<typeof workflowActionSchema>) {\n    const validation = workflowActionSchema.safeParse(params);\n    if (!validation.success) return { success: false, error: \"Invalid input\" };\n    const { transactionId, actorId, actorRole, comment } = validation.data;\n    return await updateTransactionWorkflow(transactionId, 'SUBMIT', actorId, actorRole as Role, comment);\n}\n\nexport async function approveTransaction(params: z.infer<typeof workflowActionSchema>) {\n     const validation = workflowActionSchema.safeParse(params);\n    if (!validation.success) return { success: false, error: \"Invalid input\" };\n    const { transactionId, actorId, actorRole, comment } = validation.data;\n    return await updateTransactionWorkflow(transactionId, 'APPROVE', actorId, actorRole as Role, comment);\n}\n\nexport async function rejectTransaction(params: z.infer<typeof workflowActionSchema>) {\n     const validation = workflowActionSchema.safeParse(params);\n    if (!validation.success) return { success: false, error: \"Invalid input\" };\n    const { transactionId, actorId, actorRole, comment } = validation.data;\n    return await updateTransactionWorkflow(transactionId, 'REJECT', actorId, actorRole as Role, comment);\n}\n\nexport async function addCommentToTransaction(params: z.infer<typeof workflowActionSchema>) {\n    const validation = workflowActionSchema.safeParse(params);\n    if (!validation.success) return { success: false, error: \"Invalid input\" };\n    const { transactionId, actorId, actorRole, comment } = validation.data;\n    return await updateTransactionWorkflow(transactionId, 'ADD_COMMENT', actorId as Role, actorRole as Role, comment);\n}\n\nexport async function reverseFinancialImpact(payment: Payment) {\n    if (payment.currentStatus !== 'POSTED') return; \n\n    if (payment.paymentFrom === 'Petty Cash') {\n        const pettyCash = await readPettyCash();\n        if (payment.type === 'Payment') {\n            pettyCash.balance += payment.amount;\n        } else {\n            pettyCash.balance -= payment.amount;\n        }\n        await writePettyCash(pettyCash);\n    } else if (payment.bankAccountId) {\n        const allBankAccounts = await readBankAccounts();\n        const accountIndex = allBankAccounts.findIndex(acc => acc.id === payment.bankAccountId);\n        if (accountIndex !== -1) {\n            if (payment.type === 'Payment') {\n                allBankAccounts[accountIndex].balance += payment.amount;\n            } else {\n                allBankAccounts[accountIndex].balance -= payment.amount;\n            }\n            await writeBankAccounts(allBankAccounts);\n        }\n    }\n\n    const allAccounts: Account[] = await readData(accountsFilePath);\n    const { type, amount, expenseAccountId, partyType, partyName } = payment;\n    \n    if (partyName === 'Owner') {\n        const ownersEquityAccountIndex = allAccounts.findIndex(a => a.code === '3110');\n        if (ownersEquityAccountIndex !== -1) {\n            if (type === 'Payment') { // Withdrawal\n                allAccounts[ownersEquityAccountIndex].balance += amount;\n            } else { // Contribution\n                allAccounts[ownersEquityAccountIndex].balance -= amount;\n            }\n        }\n    } else if (type === 'Payment' && expenseAccountId) {\n        const expenseAccountIndex = allAccounts.findIndex(a => a.code === expenseAccountId);\n        if(expenseAccountIndex !== -1) {\n            allAccounts[expenseAccountIndex].balance -= amount;\n        }\n    } else if (type === 'Receipt') {\n        const revenueAccountIndex = allAccounts.findIndex(a => a.code === '4110');\n        if (revenueAccountIndex !== -1) {\n            allAccounts[revenueAccountIndex].balance -= amount;\n        }\n    }\n\n    if (partyType === 'Vendor') {\n        const accountsPayableIndex = allAccounts.findIndex(a => a.code === '2110');\n        if (accountsPayableIndex !== -1) {\n             if (type === 'Payment') {\n                allAccounts[accountsPayableIndex].balance += amount;\n            } else { // Refund from vendor\n                allAccounts[accountsPayableIndex].balance += amount;\n            }\n        }\n    }\n\n    await writeData(accountsFilePath, allAccounts);\n}"],"names":[],"mappings":";;;;;;;IA0OsB,oBAAA,WAAA,GAAA,IAAA,+OAAA,EAAA,8CAAA,oOAAA,EAAA,KAAA,GAAA,0OAAA,EAAA","debugId":null}},
    {"offset": {"line": 1153, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/workflow/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { z } from 'zod';\nimport { revalidatePath } from 'next/cache';\nimport { type Payment } from '@/app/finance/payment/schema';\nimport type { Role, Status } from './types';\nimport { type BankAccount } from '@/app/finance/banking/schema';\nimport { type Account } from '@/app/finance/chart-of-accounts/schema';\n\n\nconst paymentsFilePath = path.join(process.cwd(), 'src/app/finance/payment/payments-data.json');\nconst bankAccountsFilePath = path.join(process.cwd(), 'src/app/finance/banking/accounts-data.json');\nconst pettyCashFilePath = path.join(process.cwd(), 'src/app/finance/banking/petty-cash.json');\nconst accountsFilePath = path.join(process.cwd(), 'src/app/finance/chart-of-accounts/accounts.json');\nconst invoicesFilePath = path.join(process.cwd(), 'src/app/tenancy/customer/invoice/invoices-data.json');\nconst billsFilePath = path.join(process.cwd(), 'src/app/vendors/bill/bills-data.json');\n\n\nasync function readData(filePath: string): Promise<any[]> {\n    try {\n        await fs.access(filePath);\n        const data = await fs.readFile(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            return [];\n        }\n        throw error;\n    }\n}\n\nasync function writeData(filePath: string, data: any) {\n    await fs.writeFile(filePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\n\nasync function readPayments(): Promise<Payment[]> {\n    return await readData(paymentsFilePath);\n}\nasync function writePayments(data: Payment[]) {\n    await writeData(paymentsFilePath, data);\n}\n\nasync function readBankAccounts(): Promise<BankAccount[]> {\n    return await readData(bankAccountsFilePath);\n}\nasync function writeBankAccounts(data: BankAccount[]) {\n    await writeData(bankAccountsFilePath, data);\n}\n\nasync function readPettyCash(): Promise<{ balance: number }> {\n    const data = await readData(pettyCashFilePath);\n    if (!data || (Array.isArray(data) && data.length === 0)) {\n        return { balance: 0 };\n    }\n    return data as { balance: number };\n}\n\nasync function writePettyCash(data: { balance: number }) {\n    await fs.writeFile(pettyCashFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\n\nexport async function applyFinancialImpact(payment: Payment) {\n    const { type, amount, bankAccountId, paymentFrom, partyType, partyName, expenseAccountId } = payment;\n    const allAccounts: Account[] = await readData(accountsFilePath);\n    const accountsPayableIndex = allAccounts.findIndex(a => a.code === '2110'); // Accounts Payable\n    const ownersEquityAccountIndex = allAccounts.findIndex(a => a.code === '3110'); // Owner's Equity\n\n    // Update Cash/Bank balances\n    if (paymentFrom === 'Petty Cash') {\n        const pettyCash = await readPettyCash();\n        if (type === 'Payment') {\n            pettyCash.balance -= amount;\n        } else { // Receipt\n            pettyCash.balance += amount;\n        }\n        await writePettyCash(pettyCash);\n    } else if (bankAccountId) {\n        const allBankAccounts = await readBankAccounts();\n        const accountIndex = allBankAccounts.findIndex(acc => acc.id === bankAccountId);\n        if (accountIndex !== -1) {\n            if (type === 'Payment') {\n                allBankAccounts[accountIndex].balance -= amount;\n            } else { // Receipt\n                allBankAccounts[accountIndex].balance += amount;\n            }\n            await writeBankAccounts(allBankAccounts);\n        }\n    }\n    \n    // Update Chart of Accounts based on transaction type\n    if (partyName === 'Owner') {\n        if (ownersEquityAccountIndex !== -1) {\n            if (type === 'Payment') { // Withdrawal\n                allAccounts[ownersEquityAccountIndex].balance -= amount;\n            } else { // Contribution\n                allAccounts[ownersEquityAccountIndex].balance += amount;\n            }\n        }\n    } else if (type === 'Payment' && expenseAccountId) {\n        const expenseAccountIndex = allAccounts.findIndex(a => a.code === expenseAccountId);\n        if(expenseAccountIndex !== -1) {\n            allAccounts[expenseAccountIndex].balance += amount;\n        }\n    } else if (type === 'Receipt') {\n        // Assuming non-equity receipts are rental income for simplicity\n        const revenueAccountIndex = allAccounts.findIndex(a => a.code === '4110');\n        if (revenueAccountIndex !== -1) {\n            allAccounts[revenueAccountIndex].balance += amount;\n        }\n    }\n\n    // Update Accounts Payable for vendor transactions\n    if (partyType === 'Vendor') {\n        if (accountsPayableIndex !== -1) {\n             if (type === 'Payment') {\n                allAccounts[accountsPayableIndex].balance -= amount;\n            } else { // Receipt from a vendor (refund)\n                allAccounts[accountsPayableIndex].balance -= amount;\n            }\n        }\n    }\n    \n     await writeData(accountsFilePath, allAccounts);\n}\n\n\ntype WorkflowAction = 'SUBMIT' | 'APPROVE' | 'REJECT' | 'ADD_COMMENT';\n\nconst workflowActionSchema = z.object({\n    transactionId: z.string(),\n    actorId: z.string(),\n    actorRole: z.string(),\n    comment: z.string().optional(),\n});\n\n\nconst performStateTransition = (transaction: Payment, action: WorkflowAction, currentUserRole: Role): Status => {\n    let newStatus: Status = transaction.currentStatus || 'DRAFT';\n\n    switch (action) {\n        case 'SUBMIT':\n            if (transaction.currentStatus === 'DRAFT' || transaction.currentStatus === 'REJECTED') {\n                newStatus = 'PENDING_ADMIN_APPROVAL';\n            }\n            break;\n        case 'APPROVE':\n            if (transaction.currentStatus === 'PENDING_ADMIN_APPROVAL' && currentUserRole === 'Admin') {\n                newStatus = 'PENDING_SUPER_ADMIN_APPROVAL';\n            } else if (transaction.currentStatus === 'PENDING_SUPER_ADMIN_APPROVAL' && currentUserRole === 'Super Admin') {\n                newStatus = 'POSTED';\n            }\n            break;\n        case 'REJECT':\n            if (transaction.currentStatus === 'PENDING_ADMIN_APPROVAL' && currentUserRole === 'Admin') {\n                newStatus = 'REJECTED';\n            } else if (transaction.currentStatus === 'PENDING_SUPER_ADMIN_APPROVAL' && currentUserRole === 'Super Admin') {\n                newStatus = 'REJECTED';\n            }\n            break;\n        default:\n            break;\n    }\n    return newStatus;\n};\n\nconst getHistoryActionText = (action: WorkflowAction, newStatus: Status, previousStatus: Status, role: Role): string => {\n     switch (action) {\n        case 'SUBMIT': return 'Submitted for Approval';\n        case 'APPROVE':\n            if (newStatus === 'POSTED') return 'Final Approval & Posted';\n            return `Approved by ${role}`;\n        case 'REJECT': return `Rejected by ${role}`;\n        case 'ADD_COMMENT': return 'Comment Added';\n        default: return 'Action Performed';\n    }\n}\n\n\nasync function updateTransactionWorkflow(\n    transactionId: string,\n    action: WorkflowAction,\n    actorId: string,\n    actorRole: Role,\n    comment?: string\n) {\n    try {\n        const allPayments = await readPayments();\n        const transactionIndex = allPayments.findIndex(t => t.id === transactionId);\n\n        if (transactionIndex === -1) {\n            return { success: false, error: 'Transaction not found.' };\n        }\n\n        const transaction = allPayments[transactionIndex];\n        const previousStatus = transaction.currentStatus || 'DRAFT';\n        const newStatus = performStateTransition(transaction, action, actorRole);\n        const historyActionText = getHistoryActionText(action, newStatus, previousStatus, actorRole);\n\n        const newHistoryEntry = {\n            action: historyActionText,\n            actorId: actorId,\n            actorRole: actorRole,\n            timestamp: new Date().toISOString(),\n            comments: comment || '',\n        };\n        \n        allPayments[transactionIndex] = {\n            ...transaction,\n            currentStatus: newStatus,\n            approvalHistory: [...(transaction.approvalHistory || []), newHistoryEntry],\n        };\n        \n        if (newStatus === 'POSTED' && previousStatus !== 'POSTED') {\n            await applyFinancialImpact(allPayments[transactionIndex]);\n        }\n\n\n        await writePayments(allPayments);\n        revalidatePath('/workflow');\n        revalidatePath('/finance/banking');\n        revalidatePath('/finance/chart-of-accounts');\n        return { success: true };\n\n    } catch (error) {\n        return { success: false, error: (error as Error).message };\n    }\n}\n\n\nexport async function submitTransaction(params: z.infer<typeof workflowActionSchema>) {\n    const validation = workflowActionSchema.safeParse(params);\n    if (!validation.success) return { success: false, error: \"Invalid input\" };\n    const { transactionId, actorId, actorRole, comment } = validation.data;\n    return await updateTransactionWorkflow(transactionId, 'SUBMIT', actorId, actorRole as Role, comment);\n}\n\nexport async function approveTransaction(params: z.infer<typeof workflowActionSchema>) {\n     const validation = workflowActionSchema.safeParse(params);\n    if (!validation.success) return { success: false, error: \"Invalid input\" };\n    const { transactionId, actorId, actorRole, comment } = validation.data;\n    return await updateTransactionWorkflow(transactionId, 'APPROVE', actorId, actorRole as Role, comment);\n}\n\nexport async function rejectTransaction(params: z.infer<typeof workflowActionSchema>) {\n     const validation = workflowActionSchema.safeParse(params);\n    if (!validation.success) return { success: false, error: \"Invalid input\" };\n    const { transactionId, actorId, actorRole, comment } = validation.data;\n    return await updateTransactionWorkflow(transactionId, 'REJECT', actorId, actorRole as Role, comment);\n}\n\nexport async function addCommentToTransaction(params: z.infer<typeof workflowActionSchema>) {\n    const validation = workflowActionSchema.safeParse(params);\n    if (!validation.success) return { success: false, error: \"Invalid input\" };\n    const { transactionId, actorId, actorRole, comment } = validation.data;\n    return await updateTransactionWorkflow(transactionId, 'ADD_COMMENT', actorId as Role, actorRole as Role, comment);\n}\n\nexport async function reverseFinancialImpact(payment: Payment) {\n    if (payment.currentStatus !== 'POSTED') return; \n\n    if (payment.paymentFrom === 'Petty Cash') {\n        const pettyCash = await readPettyCash();\n        if (payment.type === 'Payment') {\n            pettyCash.balance += payment.amount;\n        } else {\n            pettyCash.balance -= payment.amount;\n        }\n        await writePettyCash(pettyCash);\n    } else if (payment.bankAccountId) {\n        const allBankAccounts = await readBankAccounts();\n        const accountIndex = allBankAccounts.findIndex(acc => acc.id === payment.bankAccountId);\n        if (accountIndex !== -1) {\n            if (payment.type === 'Payment') {\n                allBankAccounts[accountIndex].balance += payment.amount;\n            } else {\n                allBankAccounts[accountIndex].balance -= payment.amount;\n            }\n            await writeBankAccounts(allBankAccounts);\n        }\n    }\n\n    const allAccounts: Account[] = await readData(accountsFilePath);\n    const { type, amount, expenseAccountId, partyType, partyName } = payment;\n    \n    if (partyName === 'Owner') {\n        const ownersEquityAccountIndex = allAccounts.findIndex(a => a.code === '3110');\n        if (ownersEquityAccountIndex !== -1) {\n            if (type === 'Payment') { // Withdrawal\n                allAccounts[ownersEquityAccountIndex].balance += amount;\n            } else { // Contribution\n                allAccounts[ownersEquityAccountIndex].balance -= amount;\n            }\n        }\n    } else if (type === 'Payment' && expenseAccountId) {\n        const expenseAccountIndex = allAccounts.findIndex(a => a.code === expenseAccountId);\n        if(expenseAccountIndex !== -1) {\n            allAccounts[expenseAccountIndex].balance -= amount;\n        }\n    } else if (type === 'Receipt') {\n        const revenueAccountIndex = allAccounts.findIndex(a => a.code === '4110');\n        if (revenueAccountIndex !== -1) {\n            allAccounts[revenueAccountIndex].balance -= amount;\n        }\n    }\n\n    if (partyType === 'Vendor') {\n        const accountsPayableIndex = allAccounts.findIndex(a => a.code === '2110');\n        if (accountsPayableIndex !== -1) {\n             if (type === 'Payment') {\n                allAccounts[accountsPayableIndex].balance += amount;\n            } else { // Refund from vendor\n                allAccounts[accountsPayableIndex].balance += amount;\n            }\n        }\n    }\n\n    await writeData(accountsFilePath, allAccounts);\n}"],"names":[],"mappings":";;;;;;;IA+PsB,0BAAA,WAAA,GAAA,IAAA,+OAAA,EAAA,8CAAA,oOAAA,EAAA,KAAA,GAAA,0OAAA,EAAA","debugId":null}},
    {"offset": {"line": 1165, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/workflow/page.tsx"],"sourcesContent":["\n'use client';\n\nimport { useState, useMemo, useEffect, useRef } from 'react';\nimport * as React from 'react';\nimport {\n  File,\n  User,\n  Shield,\n  UserCheck,\n  MoreVertical,\n  Check,\n  X,\n  History,\n  Send,\n  Calendar as CalendarIcon,\n  DollarSign,\n  Info,\n  FileText,\n  FileSpreadsheet,\n  MessageSquare,\n  PlusCircle,\n  Loader2,\n  Printer,\n  Columns,\n  Trash2,\n} from 'lucide-react';\nimport jsPDF from 'jspdf';\nimport 'jspdf-autotable';\nimport * as XLSX from 'xlsx';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n  DropdownMenuCheckboxItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n} from '@/components/ui/dropdown-menu';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n  DialogDescription,\n  DialogFooter,\n  DialogClose,\n} from '@/components/ui/dialog';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from '@/components/ui/alert-dialog';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport { type Role, type Status } from './types';\nimport { format, isAfter, isBefore, parseISO } from 'date-fns';\nimport { type UserRole } from '@/app/admin/user-roles/schema';\nimport { useRouter } from 'next/navigation';\nimport { getPayments, getPartyNameLookups, deletePayment } from '@/app/finance/payment/actions';\nimport { type Payment, type ApprovalHistory } from '@/app/finance/payment/schema';\nimport { cn } from '@/lib/utils';\nimport { PrintableReport } from './printable-report';\nimport { Input } from '@/components/ui/input';\nimport { useToast } from '@/hooks/use-toast';\nimport { approveTransaction, rejectTransaction, submitTransaction, addCommentToTransaction } from './actions';\nimport { useCurrency } from '@/context/currency-context';\n\n\n// Extend jsPDF type to include autoTable from the plugin\ndeclare module 'jspdf' {\n    interface jsPDF {\n      autoTable: (options: any) => jsPDF;\n    }\n}\n\n\nconst statusConfig: {\n  [key in Status]: {\n    label: string;\n    color:\n      | 'default'\n      | 'secondary'\n      | 'destructive'\n      | 'outline';\n    icon: React.ReactNode;\n  };\n} = {\n  DRAFT: { label: 'Draft', color: 'secondary', icon: <File className=\"h-4 w-4\" /> },\n  PENDING_ADMIN_APPROVAL: {\n    label: 'Pending Admin Approval',\n    color: 'default',\n    icon: <History className=\"h-4 w-4\" />,\n  },\n  PENDING_SUPER_ADMIN_APPROVAL: {\n    label: 'Pending Super Admin Approval',\n    color: 'default',\n    icon: <History className=\"h-4 w-4\" />,\n  },\n  POSTED: { label: 'Posted', color: 'outline', icon: <Check className=\"h-4 w-4\" /> },\n  REJECTED: { label: 'Rejected', color: 'destructive', icon: <X className=\"h-4 w-4\" /> },\n};\n\nconst roleIcons: { [key in Role]: React.ReactNode } = {\n  USER: <User className=\"h-5 w-5\" />,\n  ADMIN: <Shield className=\"h-5 w-5\" />,\n  SUPER_ADMIN: <UserCheck className=\"h-5 w-5\" />,\n  User: <User className=\"h-5 w-5\" />,\n  Admin: <Shield className=\"h-5 w-5\" />,\n  'Super Admin': <UserCheck className=\"h-5 w-5\" />,\n  'Property Manager': <User className=\"h-5 w-5\" />,\n  Accountant: <User className=\"h-5 w-5\" />,\n  Developer: <User className=\"h-5 w-5\" />,\n};\n\nconst ApprovalHistoryDialog = ({ history, transactionId }: { history: ApprovalHistory[], transactionId: string }) => {\n  return (\n    <DialogContent className=\"max-w-2xl\">\n      <DialogHeader>\n        <DialogTitle>Approval History for: {transactionId}</DialogTitle>\n      </DialogHeader>\n      <div className=\"mt-4 max-h-[60vh] overflow-y-auto\">\n        <ul className=\"space-y-4\">\n          {history.map((item, index) => (\n            <li key={index} className=\"flex gap-4\">\n              <div className=\"flex flex-col items-center\">\n                <div className=\"flex h-8 w-8 items-center justify-center rounded-full bg-primary text-primary-foreground\">\n                  {roleIcons[item.actorRole as Role]}\n                </div>\n                {index < history.length - 1 && (\n                  <div className=\"w-px flex-grow bg-border\" />\n                )}\n              </div>\n              <div className=\"flex-1 pb-4\">\n                <p className=\"font-semibold\">{item.action}</p>\n                <p className=\"text-sm text-muted-foreground\">\n                  by {item.actorId} ({item.actorRole})\n                </p>\n                <p className=\"text-xs text-muted-foreground\">\n                   {format(new Date(item.timestamp), \"PPP p\")}\n                </p>\n                {item.comments && (\n                  <div className=\"mt-2 rounded-md border bg-muted p-2 text-sm flex gap-2\">\n                    <MessageSquare className=\"h-4 w-4 mt-0.5 text-muted-foreground\" />\n                    <p className=\"flex-1 italic\">\"{item.comments}\"</p>\n                  </div>\n                )}\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </DialogContent>\n  );\n};\n\nconst TransactionDetailsDialog = ({ transaction }: { transaction: Payment }) => {\n    const statusInfo = transaction.currentStatus ? statusConfig[transaction.currentStatus] : statusConfig.DRAFT;\n    const { formatCurrency } = useCurrency();\n    return (\n        <DialogContent className=\"max-w-lg\">\n            <DialogHeader>\n                <DialogTitle>Transaction Details</DialogTitle>\n                <DialogDescription>\n                    Complete details for transaction ID: {transaction.id}\n                </DialogDescription>\n            </DialogHeader>\n            <div className=\"grid gap-4 py-4\">\n                <div className=\"flex items-center gap-4 p-4 rounded-lg bg-muted/50\">\n                    <div className=\"flex h-10 w-10 items-center justify-center rounded-full bg-primary text-primary-foreground\">\n                       <DollarSign className=\"h-5 w-5\" />\n                    </div>\n                    <div>\n                        <p className=\"text-sm text-muted-foreground\">Amount</p>\n                        <p className=\"text-2xl font-bold\">{formatCurrency(transaction.amount)}</p>\n                    </div>\n                     <div className=\"ml-auto flex items-center gap-2 text-sm font-medium\">\n                       {statusInfo.icon}\n                       {statusInfo.label}\n                    </div>\n                </div>\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                    <div className=\"flex items-center gap-2\">\n                        <Info className=\"h-4 w-4 text-muted-foreground\" />\n                        <span className=\"font-medium\">Type:</span>\n                        <span>{transaction.type}</span>\n                    </div>\n                     <div className=\"flex items-center gap-2\">\n                        <User className=\"h-4 w-4 text-muted-foreground\" />\n                        <span className=\"font-medium\">Created By:</span>\n                        <span>{transaction.createdByUser}</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                        <CalendarIcon className=\"h-4 w-4 text-muted-foreground\" />\n                        <span className=\"font-medium\">Date Created:</span>\n                        <span>{format(new Date(transaction.date), 'PP')}</span>\n                    </div>\n                </div>\n            </div>\n        </DialogContent>\n    );\n};\n\ntype ActionDialogProps = {\n  isOpen: boolean;\n  setIsOpen: (open: boolean) => void;\n  onConfirm: (comment: string) => void;\n  actionType: 'SUBMIT' | 'APPROVE' | 'REJECT' | 'ADD_COMMENT';\n  isProcessing: boolean;\n}\n\nconst ActionDialog = ({ isOpen, setIsOpen, onConfirm, actionType, isProcessing }: ActionDialogProps) => {\n    const [comment, setComment] = useState('');\n\n    const titleMap = {\n        SUBMIT: 'Submit Transaction',\n        APPROVE: 'Approve Transaction',\n        REJECT: 'Reject Transaction',\n        ADD_COMMENT: 'Add a Comment'\n    }\n\n    const descriptionMap = {\n        SUBMIT: 'Please provide a comment for submitting this transaction.',\n        APPROVE: 'Please provide a comment for approving this transaction.',\n        REJECT: 'Please provide the reason for rejecting this transaction.',\n        ADD_COMMENT: 'Please enter your comment below. It will be added to the transaction history.'\n    }\n\n    const handleConfirm = () => {\n        onConfirm(comment);\n        setComment('');\n    }\n\n    return (\n        <Dialog open={isOpen} onOpenChange={setIsOpen}>\n            <DialogContent>\n                <DialogHeader>\n                    <DialogTitle>{titleMap[actionType]}</DialogTitle>\n                     <DialogDescription>{descriptionMap[actionType]}</DialogDescription>\n                </DialogHeader>\n                <div className=\"py-4\">\n                    <Label htmlFor=\"comment\">Comment</Label>\n                    <Textarea \n                        id=\"comment\" \n                        value={comment} \n                        onChange={(e) => setComment(e.target.value)} \n                        placeholder=\"Add your comment here...\"\n                    />\n                </div>\n                <DialogFooter>\n                    <DialogClose asChild>\n                        <Button variant=\"outline\" disabled={isProcessing}>Cancel</Button>\n                    </DialogClose>\n                    <Button onClick={handleConfirm} disabled={isProcessing}>\n                        {isProcessing && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\"/>}\n                        {actionType === 'REJECT' ? 'Confirm Rejection' : 'Confirm'}\n                    </Button>\n                </DialogFooter>\n            </DialogContent>\n        </Dialog>\n    )\n}\n\nconst defaultColumnVisibility = {\n    'id': true,\n    'type': true,\n    'partyName': true,\n    'property': true,\n    'unitCode': true,\n    'roomCode': false,\n    'referenceNo': true,\n    'amount': true,\n    'createdByUser': false,\n    'date': true,\n    'currentStatus': true,\n};\n\ntype ColumnId = keyof typeof defaultColumnVisibility;\n\nexport default function WorkflowPage() {\n  const [transactions, setTransactions] = useState<Payment[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isActionProcessing, setIsActionProcessing] = useState(false);\n  const [currentUser, setCurrentUser] = useState<{ email: string, name: string, role: UserRole['role'] } | null>(null);\n\n  const [statusFilter, setStatusFilter] = useState<Status | 'ALL'>('ALL');\n  const [userFilter, setUserFilter] = useState<string>('');\n  const [dateFilter, setDateFilter] = useState<{ from?: Date; to?: Date }>({});\n  const [partyNameLookups, setPartyNameLookups] = useState<Record<string, string>>({});\n  const [columnVisibility, setColumnVisibility] = useState<Record<ColumnId, boolean>>(defaultColumnVisibility);\n\n  const router = useRouter();\n  const printableRef = useRef<HTMLDivElement>(null);\n  const { toast } = useToast();\n  const { formatCurrency } = useCurrency();\n\n  const [isActionDialogOpen, setIsActionDialogOpen] = useState(false);\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n  const [selectedTransactionForDelete, setSelectedTransactionForDelete] = useState<Payment | null>(null);\n\n  const [currentActionInfo, setCurrentActionInfo] = useState<{\n    transactionId: string;\n    action: 'SUBMIT' | 'APPROVE' | 'REJECT' | 'ADD_COMMENT';\n  } | null>(null);\n\n  const fetchData = React.useCallback(async (user: { email: string, name: string, role: UserRole['role'] }) => {\n    setIsLoading(true);\n    const [payments, lookups] = await Promise.all([\n        getPayments(user),\n        getPartyNameLookups()\n    ]);\n    setTransactions(payments);\n    setPartyNameLookups(lookups);\n    setIsLoading(false);\n  }, []);\n\n  useEffect(() => {\n    const storedProfile = sessionStorage.getItem('userProfile');\n    if (storedProfile) {\n      const profile = JSON.parse(storedProfile);\n      setCurrentUser(profile);\n      fetchData(profile);\n    } else {\n      router.push('/login');\n    }\n  }, [router, fetchData]);\n\n\n  const handleAction = async (\n    transactionId: string,\n    action: 'SUBMIT' | 'APPROVE' | 'REJECT' | 'ADD_COMMENT',\n    comment: string\n  ) => {\n    if (!currentUser) return;\n    setIsActionProcessing(true);\n    let result;\n\n    const params = {\n      transactionId,\n      actorId: currentUser.email,\n      actorRole: currentUser.role,\n      comment\n    };\n\n    switch (action) {\n      case 'SUBMIT':\n        result = await submitTransaction(params);\n        break;\n      case 'APPROVE':\n        result = await approveTransaction(params);\n        break;\n      case 'REJECT':\n        result = await rejectTransaction(params);\n        break;\n      case 'ADD_COMMENT':\n        result = await addCommentToTransaction(params);\n        break;\n    }\n\n    if (result.success) {\n      toast({ title: 'Success', description: `Action \"${action}\" performed successfully.` });\n      await fetchData(currentUser); // Re-fetch data to get the latest state from server\n    } else {\n      toast({ variant: 'destructive', title: 'Error', description: result.error });\n    }\n    setIsActionProcessing(false);\n    setIsActionDialogOpen(false);\n  };\n  \n  const openActionDialog = (transactionId: string, action: 'SUBMIT' | 'APPROVE' | 'REJECT' | 'ADD_COMMENT') => {\n    setCurrentActionInfo({ transactionId, action });\n    setIsActionDialogOpen(true);\n  }\n\n  const confirmAction = (comment: string) => {\n    if (currentActionInfo) {\n      handleAction(currentActionInfo.transactionId, currentActionInfo.action, comment);\n    }\n  }\n\n  const handleDelete = async () => {\n    if (!selectedTransactionForDelete) return;\n    setIsActionProcessing(true);\n    const result = await deletePayment(selectedTransactionForDelete.id!);\n    if (result.success) {\n        toast({ title: \"Success\", description: \"Transaction deleted successfully.\" });\n        await fetchData(currentUser!);\n    } else {\n        toast({ variant: \"destructive\", title: \"Error\", description: result.error });\n    }\n    setIsActionProcessing(false);\n    setIsDeleteDialogOpen(false);\n    setSelectedTransactionForDelete(null);\n  };\n\n\n  const filteredTransactions = useMemo(() => {\n    return transactions.filter(t => {\n        if (statusFilter !== 'ALL' && t.currentStatus !== statusFilter) return false;\n        if (userFilter && t.createdByUser?.toLowerCase() !== userFilter.toLowerCase()) return false;\n        if (dateFilter.from && isBefore(parseISO(t.date), dateFilter.from)) return false;\n        if (dateFilter.to && isAfter(parseISO(t.date), dateFilter.to)) return false;\n        return true;\n    });\n  }, [transactions, statusFilter, userFilter, dateFilter]);\n  \n  const uniqueUsers = useMemo(() => {\n    const users = new Set(transactions.map(t => t.createdByUser).filter(Boolean));\n    return Array.from(users) as string[];\n  }, [transactions]);\n\n\n  const getActionButtons = (transaction: Payment) => {\n    if (!currentUser) return null;\n    const canSubmitRoles: Role[] = ['User', 'Property Manager', 'Accountant', 'Admin', 'Super Admin', 'Developer'];\n\n    if (canSubmitRoles.includes(currentUser.role) && (transaction.currentStatus === 'DRAFT' || transaction.currentStatus === 'REJECTED')) {\n      return (\n        <Button size=\"sm\" onClick={() => openActionDialog(transaction.id!, 'SUBMIT')}>\n          <Send className=\"mr-2 h-4 w-4\" /> Submit\n        </Button>\n      );\n    }\n    \n    if (currentUser.role === 'Admin' && transaction.currentStatus === 'PENDING_ADMIN_APPROVAL') {\n      return (\n        <div className=\"flex gap-2\">\n          <Button size=\"sm\" variant=\"outline\" onClick={() => openActionDialog(transaction.id!, 'APPROVE')}>\n            <Check className=\"mr-2 h-4 w-4\" /> Approve\n          </Button>\n          <Button size=\"sm\" variant=\"destructive\" onClick={() => openActionDialog(transaction.id!, 'REJECT')}>\n            <X className=\"mr-2 h-4 w-4\" /> Reject\n          </Button>\n        </div>\n      );\n    }\n    \n    if (currentUser.role === 'Super Admin' && transaction.currentStatus === 'PENDING_SUPER_ADMIN_APPROVAL') {\n      return (\n        <div className=\"flex gap-2\">\n          <Button size=\"sm\" variant=\"outline\" onClick={() => openActionDialog(transaction.id!, 'APPROVE')}>\n            <Check className=\"mr-2 h-4 w-4\" /> Approve & Post\n          </Button>\n          <Button size=\"sm\" variant=\"destructive\" onClick={() => openActionDialog(transaction.id!, 'REJECT')}>\n            <X className=\"mr-2 h-4 w-4\" /> Reject\n          </Button>\n        </div>\n      );\n    }\n    \n    return null;\n  };\n\n  const handleExportPDF = () => {\n    const doc = new jsPDF();\n    doc.text(\"Document Approval Report\", 14, 16);\n    \n    const head = [['Transaction ID', 'Type', 'Amount', 'Created By', 'Submission Date', 'Status']];\n    const body = filteredTransactions.map(t => [\n        t.id!,\n        t.type,\n        `$${t.amount.toLocaleString()}`,\n        t.createdByUser || 'N/A',\n        format(new Date(t.date), 'PP'),\n        t.currentStatus ? statusConfig[t.currentStatus].label : 'Unknown'\n    ]);\n    \n    (doc as any).autoTable({\n        head: head,\n        body: body,\n        startY: 20,\n    });\n    \n    doc.save('document-flow-report.pdf');\n  };\n\n  const handleExportExcel = () => {\n    const dataToExport = filteredTransactions.map(t => ({\n        'Transaction ID': t.id,\n        'Type': t.type,\n        'Amount': t.amount,\n        'Created By': t.createdByUser,\n        'Submission Date': format(new Date(t.date), 'PP'),\n        'Status': t.currentStatus ? statusConfig[t.currentStatus].label : 'Unknown'\n    }));\n\n    const ws = XLSX.utils.json_to_sheet(dataToExport);\n    const wb = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(wb, ws, \"Document Flow\");\n    XLSX.writeFile(wb, \"document-flow-report.xlsx\");\n  };\n\n  const handlePrint = () => {\n    const printContent = printableRef.current?.innerHTML;\n    if (printContent) {\n        const printWindow = window.open('', '_blank');\n        if (printWindow) {\n            printWindow.document.write('<html><head><title>Print Report</title>');\n            printWindow.document.write('<style>@import url(\"https://rsms.me/inter/inter.css\");</style>');\n            printWindow.document.write(`<link rel=\"stylesheet\" href=\"${window.location.origin}/globals.css\" type=\"text/css\" />`); // Not ideal but might work\n            printWindow.document.write('<style>body { -webkit-print-color-adjust: exact !important; color-adjust: exact !important; } @page { size: A4; margin: 1cm; }</style>');\n            printWindow.document.write('</head><body class=\"bg-white\">');\n            printWindow.document.write(printContent.innerHTML);\n            printWindow.document.write('</body></html>');\n            printWindow.document.close();\n             setTimeout(() => printWindow.print(), 1000);\n        }\n    }\n  }\n  \n  const toggleColumnVisibility = (columnId: ColumnId) => {\n    setColumnVisibility(prev => ({ ...prev, [columnId]: !prev[columnId] }));\n  };\n\n  return (\n    <div className=\"w-full\">\n     {currentActionInfo && (\n        <ActionDialog \n            isOpen={isActionDialogOpen}\n            setIsOpen={setIsActionDialogOpen}\n            actionType={currentActionInfo.action}\n            onConfirm={confirmAction}\n            isProcessing={isActionProcessing}\n        />\n     )}\n     <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>\n        <AlertDialogContent>\n            <AlertDialogHeader>\n                <AlertDialogTitle>Are you sure?</AlertDialogTitle>\n                <AlertDialogDescription>This action cannot be undone. This will permanently delete transaction {selectedTransactionForDelete?.id}.</AlertDialogDescription>\n            </AlertDialogHeader>\n            <AlertDialogFooter>\n                <AlertDialogCancel>Cancel</AlertDialogCancel>\n                <AlertDialogAction onClick={handleDelete} disabled={isActionProcessing}>\n                    {isActionProcessing ? 'Deleting...' : 'Delete'}\n                </AlertDialogAction>\n            </AlertDialogFooter>\n        </AlertDialogContent>\n     </AlertDialog>\n      <Card>\n        <CardHeader>\n            <div className=\"flex justify-between items-start\">\n                <div>\n                    <CardTitle className=\"font-headline text-2xl\">\n                        Financial Approval Workflow\n                    </CardTitle>\n                    <CardDescription>\n                        Manage and track financial transactions through the approval\n                        workflow.\n                    </CardDescription>\n                </div>\n                 <div className=\"flex items-center gap-2\">\n                    <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                            <Button variant=\"outline\" size=\"sm\"><Columns className=\"mr-2 h-4 w-4\" /> View</Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent>\n                            <DropdownMenuLabel>Toggle Columns</DropdownMenuLabel>\n                            <DropdownMenuSeparator />\n                            {Object.entries(columnVisibility).map(([key, value]) => (\n                                <DropdownMenuCheckboxItem\n                                    key={key}\n                                    checked={value}\n                                    onCheckedChange={() => toggleColumnVisibility(key as ColumnId)}\n                                >\n                                    {key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}\n                                </DropdownMenuCheckboxItem>\n                            ))}\n                        </DropdownMenuContent>\n                    </DropdownMenu>\n                    <Button variant=\"outline\" size=\"sm\" onClick={handlePrint}><Printer className=\"mr-2 h-4 w-4\" /> Print Report</Button>\n                    <Button variant=\"outline\" size=\"sm\" onClick={handleExportPDF}><FileText className=\"mr-2 h-4 w-4\" /> PDF</Button>\n                    <Button variant=\"outline\" size=\"sm\" onClick={handleExportExcel}><FileSpreadsheet className=\"mr-2 h-4 w-4\" /> Excel</Button>\n                </div>\n            </div>\n             <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 pt-4 mt-4 border-t\">\n                <div>\n                    <Label>Filter by Status</Label>\n                    <Select value={statusFilter} onValueChange={(value: Status | 'ALL') => setStatusFilter(value)}>\n                        <SelectTrigger><SelectValue /></SelectTrigger>\n                        <SelectContent>\n                            <SelectItem value=\"ALL\">All Statuses</SelectItem>\n                            {Object.keys(statusConfig).map(status => (\n                                <SelectItem key={status} value={status}>\n                                    {statusConfig[status as Status].label}\n                                </SelectItem>\n                            ))}\n                        </SelectContent>\n                    </Select>\n                </div>\n                <div>\n                    <Label>Filter by User</Label>\n                     <Select value={userFilter} onValueChange={(value) => setUserFilter(value === 'ALL' ? '' : value)}>\n                        <SelectTrigger><SelectValue placeholder=\"All Users\" /></SelectTrigger>\n                        <SelectContent>\n                             <SelectItem value=\"ALL\">All Users</SelectItem>\n                            {uniqueUsers.map(user => (\n                                <SelectItem key={user} value={user}>\n                                    {user}\n                                </SelectItem>\n                            ))}\n                        </SelectContent>\n                    </Select>\n                </div>\n                <div>\n                    <Label>From Date</Label>\n                    <Popover>\n                        <PopoverTrigger asChild>\n                            <Button variant=\"outline\" className=\"w-full justify-start text-left font-normal\">\n                                <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                                {dateFilter.from ? format(dateFilter.from, \"PPP\") : <span>Pick a date</span>}\n                            </Button>\n                        </PopoverTrigger>\n                        <PopoverContent className=\"w-auto p-0\"><Input type=\"date\" onChange={e => setDateFilter(p => ({...p, from: new Date(e.target.value)}))} /></PopoverContent>\n                    </Popover>\n                </div>\n                <div>\n                    <Label>To Date</Label>\n                     <Popover>\n                        <PopoverTrigger asChild>\n                            <Button variant=\"outline\" className=\"w-full justify-start text-left font-normal\">\n                                <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                                {dateFilter.to ? format(dateFilter.to, \"PPP\") : <span>Pick a date</span>}\n                            </Button>\n                        </PopoverTrigger>\n                        <PopoverContent className=\"w-auto p-0\"><Input type=\"date\" onChange={e => setDateFilter(p => ({...p, to: new Date(e.target.value)}))} /></PopoverContent>\n                    </Popover>\n                </div>\n             </div>\n        </CardHeader>\n        <CardContent>\n            <div className=\"mb-4\">\n               <p className=\"text-sm text-muted-foreground p-2 bg-muted/50 rounded-md\">\n                Viewing as a{' '}\n                <span className=\"font-bold text-primary\">{currentUser?.role}</span>. This\n                dashboard shows transactions relevant to your role.\n              </p>\n            </div>\n\n            {isLoading ? (\n                 <div className=\"flex h-40 items-center justify-center\">\n                    <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n                 </div>\n            ) : (\n                <Table className=\"mt-4\">\n                <TableHeader>\n                    <TableRow>\n                    {columnVisibility.id && <TableHead>Transaction ID</TableHead>}\n                    {columnVisibility.type && <TableHead>Type</TableHead>}\n                    {columnVisibility.partyName && <TableHead>Party Name</TableHead>}\n                    {columnVisibility.property && <TableHead>Property</TableHead>}\n                    {columnVisibility.unitCode && <TableHead>Unit</TableHead>}\n                    {columnVisibility.roomCode && <TableHead>Room</TableHead>}\n                    {columnVisibility.referenceNo && <TableHead>Reference</TableHead>}\n                    {columnVisibility.amount && <TableHead>Amount</TableHead>}\n                    {columnVisibility.createdByUser && <TableHead>Created By</TableHead>}\n                    {columnVisibility.date && <TableHead>Date</TableHead>}\n                    {columnVisibility.currentStatus && <TableHead>Status</TableHead>}\n                    <TableHead className=\"text-center\">Actions</TableHead>\n                    </TableRow>\n                </TableHeader>\n                <TableBody>\n                    {filteredTransactions.length > 0 ? (\n                    filteredTransactions.map((t) => (\n                        <TableRow key={t.id}>\n                        {columnVisibility.id && <TableCell className=\"font-mono text-xs\">{t.id}</TableCell>}\n                        {columnVisibility.type && <TableCell>{t.type}</TableCell>}\n                        {columnVisibility.partyName && <TableCell>{partyNameLookups[t.partyName] || t.partyName}</TableCell>}\n                        {columnVisibility.property && <TableCell>{t.property || '-'}</TableCell>}\n                        {columnVisibility.unitCode && <TableCell>{t.unitCode || '-'}</TableCell>}\n                        {columnVisibility.roomCode && <TableCell>{t.roomCode || '-'}</TableCell>}\n                        {columnVisibility.referenceNo && <TableCell>{t.referenceNo || '-'}</TableCell>}\n                        {columnVisibility.amount && <TableCell className=\"font-medium\">\n                            {formatCurrency(t.amount)}\n                        </TableCell>}\n                        {columnVisibility.createdByUser && <TableCell>{t.createdByUser}</TableCell>}\n                        {columnVisibility.date && <TableCell>\n                            {format(new Date(t.date), 'PP')}\n                        </TableCell>}\n                        {columnVisibility.currentStatus && <TableCell>\n                            {t.currentStatus && statusConfig[t.currentStatus] ? (\n                                <Badge variant={statusConfig[t.currentStatus].color}>\n                                    {statusConfig[t.currentStatus].label}\n                                </Badge>\n                            ) : (\n                                <Badge variant=\"secondary\">Unknown</Badge>\n                            )}\n                        </TableCell>}\n                        <TableCell className=\"text-center\">\n                            <div className=\"flex items-center justify-center gap-2\">\n                                {getActionButtons(t)}\n                                <DropdownMenu>\n                                <DropdownMenuTrigger asChild>\n                                    <Button variant=\"ghost\" size=\"icon\">\n                                        <MoreVertical className=\"h-4 w-4\" />\n                                    </Button>\n                                </DropdownMenuTrigger>\n                                <DropdownMenuContent align=\"end\">\n                                    <Dialog>\n                                        <DialogTrigger asChild>\n                                            <DropdownMenuItem onSelect={(e) => e.preventDefault()}>\n                                                <File className=\"mr-2 h-4 w-4\" />\n                                                View Details\n                                            </DropdownMenuItem>\n                                        </DialogTrigger>\n                                        <TransactionDetailsDialog transaction={t} />\n                                    </Dialog>\n                                    <Dialog>\n                                        <DialogTrigger asChild>\n                                            <DropdownMenuItem onSelect={(e) => e.preventDefault()} disabled={!t.approvalHistory || t.approvalHistory.length === 0}>\n                                                <History className=\"mr-2 h-4 w-4\" />\n                                                View History\n                                            </DropdownMenuItem>\n                                        </DialogTrigger>\n                                        <ApprovalHistoryDialog history={t.approvalHistory || []} transactionId={t.id!} />\n                                    </Dialog>\n                                    <DropdownMenuItem onSelect={() => openActionDialog(t.id!, 'ADD_COMMENT')}>\n                                        <PlusCircle className=\"mr-2 h-4 w-4\" />\n                                        + Add Comment\n                                    </DropdownMenuItem>\n                                     {currentUser?.role === 'Super Admin' && (\n                                      <>\n                                        <DropdownMenuSeparator />\n                                        <DropdownMenuItem\n                                          className=\"text-destructive\"\n                                          onSelect={() => {\n                                            setSelectedTransactionForDelete(t);\n                                            setIsDeleteDialogOpen(true);\n                                          }}\n                                        >\n                                          <Trash2 className=\"mr-2 h-4 w-4\" />\n                                          Delete Transaction\n                                        </DropdownMenuItem>\n                                      </>\n                                    )}\n                                </DropdownMenuContent>\n                                </DropdownMenu>\n                            </div>\n                        </TableCell>\n                        </TableRow>\n                    ))\n                    ) : (\n                    <TableRow>\n                        <TableCell colSpan={Object.values(columnVisibility).filter(v => v).length + 1} className=\"h-24 text-center\">\n                        No transactions match the current filter.\n                        </TableCell>\n                    </TableRow>\n                    )}\n                </TableBody>\n                </Table>\n            )}\n        </CardContent>\n      </Card>\n       <div style={{ display: 'none' }}>\n        <PrintableReport \n          ref={printableRef}\n          transactions={filteredTransactions} \n          filters={{status: statusFilter, user: userFilter, from: dateFilter.from, to: dateFilter.to}}\n          partyNameLookups={partyNameLookups}\n        />\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;;AAGA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBA;AACA;AACA;AACA;AACA;AACA;AAOA;AAQA;AAOA;AACA;AACA;AASA;AAUA;AAWA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAjGA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4GA,MAAM,eAUF;IACF,OAAO;QAAE,OAAO;QAAS,OAAO;QAAa,oBAAM,8OAAC,0MAAI;YAAC,WAAU;;;;;;IAAa;IAChF,wBAAwB;QACtB,OAAO;QACP,OAAO;QACP,oBAAM,8OAAC,mNAAO;YAAC,WAAU;;;;;;IAC3B;IACA,8BAA8B;QAC5B,OAAO;QACP,OAAO;QACP,oBAAM,8OAAC,mNAAO;YAAC,WAAU;;;;;;IAC3B;IACA,QAAQ;QAAE,OAAO;QAAU,OAAO;QAAW,oBAAM,8OAAC,6MAAK;YAAC,WAAU;;;;;;IAAa;IACjF,UAAU;QAAE,OAAO;QAAY,OAAO;QAAe,oBAAM,8OAAC,iMAAC;YAAC,WAAU;;;;;;IAAa;AACvF;AAEA,MAAM,YAAgD;IACpD,oBAAM,8OAAC,0MAAI;QAAC,WAAU;;;;;;IACtB,qBAAO,8OAAC,gNAAM;QAAC,WAAU;;;;;;IACzB,2BAAa,8OAAC,6NAAS;QAAC,WAAU;;;;;;IAClC,oBAAM,8OAAC,0MAAI;QAAC,WAAU;;;;;;IACtB,qBAAO,8OAAC,gNAAM;QAAC,WAAU;;;;;;IACzB,6BAAe,8OAAC,6NAAS;QAAC,WAAU;;;;;;IACpC,kCAAoB,8OAAC,0MAAI;QAAC,WAAU;;;;;;IACpC,0BAAY,8OAAC,0MAAI;QAAC,WAAU;;;;;;IAC5B,yBAAW,8OAAC,0MAAI;QAAC,WAAU;;;;;;AAC7B;AAEA,MAAM,wBAAwB,CAAC,EAAE,OAAO,EAAE,aAAa,EAAyD;IAC9G,qBACE,8OAAC,mJAAa;QAAC,WAAU;;0BACvB,8OAAC,kJAAY;0BACX,cAAA,8OAAC,iJAAW;;wBAAC;wBAAuB;;;;;;;;;;;;0BAEtC,8OAAC;gBAAI,WAAU;0BACb,cAAA,8OAAC;oBAAG,WAAU;8BACX,QAAQ,GAAG,CAAC,CAAC,MAAM,sBAClB,8OAAC;4BAAe,WAAU;;8CACxB,8OAAC;oCAAI,WAAU;;sDACb,8OAAC;4CAAI,WAAU;sDACZ,SAAS,CAAC,KAAK,SAAS,CAAS;;;;;;wCAEnC,QAAQ,QAAQ,MAAM,GAAG,mBACxB,8OAAC;4CAAI,WAAU;;;;;;;;;;;;8CAGnB,8OAAC;oCAAI,WAAU;;sDACb,8OAAC;4CAAE,WAAU;sDAAiB,KAAK,MAAM;;;;;;sDACzC,8OAAC;4CAAE,WAAU;;gDAAgC;gDACvC,KAAK,OAAO;gDAAC;gDAAG,KAAK,SAAS;gDAAC;;;;;;;sDAErC,8OAAC;4CAAE,WAAU;sDACT,IAAA,gKAAM,EAAC,IAAI,KAAK,KAAK,SAAS,GAAG;;;;;;wCAEpC,KAAK,QAAQ,kBACZ,8OAAC;4CAAI,WAAU;;8DACb,8OAAC,yOAAa;oDAAC,WAAU;;;;;;8DACzB,8OAAC;oDAAE,WAAU;;wDAAgB;wDAAE,KAAK,QAAQ;wDAAC;;;;;;;;;;;;;;;;;;;;2BApB5C;;;;;;;;;;;;;;;;;;;;;AA8BrB;AAEA,MAAM,2BAA2B,CAAC,EAAE,WAAW,EAA4B;IACvE,MAAM,aAAa,YAAY,aAAa,GAAG,YAAY,CAAC,YAAY,aAAa,CAAC,GAAG,aAAa,KAAK;IAC3G,MAAM,EAAE,cAAc,EAAE,GAAG,IAAA,qJAAW;IACtC,qBACI,8OAAC,mJAAa;QAAC,WAAU;;0BACrB,8OAAC,kJAAY;;kCACT,8OAAC,iJAAW;kCAAC;;;;;;kCACb,8OAAC,uJAAiB;;4BAAC;4BACuB,YAAY,EAAE;;;;;;;;;;;;;0BAG5D,8OAAC;gBAAI,WAAU;;kCACX,8OAAC;wBAAI,WAAU;;0CACX,8OAAC;gCAAI,WAAU;0CACZ,cAAA,8OAAC,gOAAU;oCAAC,WAAU;;;;;;;;;;;0CAEzB,8OAAC;;kDACG,8OAAC;wCAAE,WAAU;kDAAgC;;;;;;kDAC7C,8OAAC;wCAAE,WAAU;kDAAsB,eAAe,YAAY,MAAM;;;;;;;;;;;;0CAEvE,8OAAC;gCAAI,WAAU;;oCACZ,WAAW,IAAI;oCACf,WAAW,KAAK;;;;;;;;;;;;;kCAGxB,8OAAC;wBAAI,WAAU;;0CACX,8OAAC;gCAAI,WAAU;;kDACX,8OAAC,0MAAI;wCAAC,WAAU;;;;;;kDAChB,8OAAC;wCAAK,WAAU;kDAAc;;;;;;kDAC9B,8OAAC;kDAAM,YAAY,IAAI;;;;;;;;;;;;0CAE1B,8OAAC;gCAAI,WAAU;;kDACZ,8OAAC,0MAAI;wCAAC,WAAU;;;;;;kDAChB,8OAAC;wCAAK,WAAU;kDAAc;;;;;;kDAC9B,8OAAC;kDAAM,YAAY,aAAa;;;;;;;;;;;;0CAEpC,8OAAC;gCAAI,WAAU;;kDACX,8OAAC,sNAAY;wCAAC,WAAU;;;;;;kDACxB,8OAAC;wCAAK,WAAU;kDAAc;;;;;;kDAC9B,8OAAC;kDAAM,IAAA,gKAAM,EAAC,IAAI,KAAK,YAAY,IAAI,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMlE;AAUA,MAAM,eAAe,CAAC,EAAE,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,UAAU,EAAE,YAAY,EAAqB;IAC/F,MAAM,CAAC,SAAS,WAAW,GAAG,IAAA,iNAAQ,EAAC;IAEvC,MAAM,WAAW;QACb,QAAQ;QACR,SAAS;QACT,QAAQ;QACR,aAAa;IACjB;IAEA,MAAM,iBAAiB;QACnB,QAAQ;QACR,SAAS;QACT,QAAQ;QACR,aAAa;IACjB;IAEA,MAAM,gBAAgB;QAClB,UAAU;QACV,WAAW;IACf;IAEA,qBACI,8OAAC,4IAAM;QAAC,MAAM;QAAQ,cAAc;kBAChC,cAAA,8OAAC,mJAAa;;8BACV,8OAAC,kJAAY;;sCACT,8OAAC,iJAAW;sCAAE,QAAQ,CAAC,WAAW;;;;;;sCACjC,8OAAC,uJAAiB;sCAAE,cAAc,CAAC,WAAW;;;;;;;;;;;;8BAEnD,8OAAC;oBAAI,WAAU;;sCACX,8OAAC,0IAAK;4BAAC,SAAQ;sCAAU;;;;;;sCACzB,8OAAC,gJAAQ;4BACL,IAAG;4BACH,OAAO;4BACP,UAAU,CAAC,IAAM,WAAW,EAAE,MAAM,CAAC,KAAK;4BAC1C,aAAY;;;;;;;;;;;;8BAGpB,8OAAC,kJAAY;;sCACT,8OAAC,iJAAW;4BAAC,OAAO;sCAChB,cAAA,8OAAC,4IAAM;gCAAC,SAAQ;gCAAU,UAAU;0CAAc;;;;;;;;;;;sCAEtD,8OAAC,4IAAM;4BAAC,SAAS;4BAAe,UAAU;;gCACrC,8BAAgB,8OAAC,4NAAO;oCAAC,WAAU;;;;;;gCACnC,eAAe,WAAW,sBAAsB;;;;;;;;;;;;;;;;;;;;;;;;AAMzE;AAEA,MAAM,0BAA0B;IAC5B,MAAM;IACN,QAAQ;IACR,aAAa;IACb,YAAY;IACZ,YAAY;IACZ,YAAY;IACZ,eAAe;IACf,UAAU;IACV,iBAAiB;IACjB,QAAQ;IACR,iBAAiB;AACrB;AAIe,SAAS;IACtB,MAAM,CAAC,cAAc,gBAAgB,GAAG,IAAA,iNAAQ,EAAY,EAAE;IAC9D,MAAM,CAAC,WAAW,aAAa,GAAG,IAAA,iNAAQ,EAAC;IAC3C,MAAM,CAAC,oBAAoB,sBAAsB,GAAG,IAAA,iNAAQ,EAAC;IAC7D,MAAM,CAAC,aAAa,eAAe,GAAG,IAAA,iNAAQ,EAAiE;IAE/G,MAAM,CAAC,cAAc,gBAAgB,GAAG,IAAA,iNAAQ,EAAiB;IACjE,MAAM,CAAC,YAAY,cAAc,GAAG,IAAA,iNAAQ,EAAS;IACrD,MAAM,CAAC,YAAY,cAAc,GAAG,IAAA,iNAAQ,EAA6B,CAAC;IAC1E,MAAM,CAAC,kBAAkB,oBAAoB,GAAG,IAAA,iNAAQ,EAAyB,CAAC;IAClF,MAAM,CAAC,kBAAkB,oBAAoB,GAAG,IAAA,iNAAQ,EAA4B;IAEpF,MAAM,SAAS,IAAA,+IAAS;IACxB,MAAM,eAAe,IAAA,+MAAM,EAAiB;IAC5C,MAAM,EAAE,KAAK,EAAE,GAAG,IAAA,wIAAQ;IAC1B,MAAM,EAAE,cAAc,EAAE,GAAG,IAAA,qJAAW;IAEtC,MAAM,CAAC,oBAAoB,sBAAsB,GAAG,IAAA,iNAAQ,EAAC;IAC7D,MAAM,CAAC,oBAAoB,sBAAsB,GAAG,IAAA,iNAAQ,EAAC;IAC7D,MAAM,CAAC,8BAA8B,gCAAgC,GAAG,IAAA,iNAAQ,EAAiB;IAEjG,MAAM,CAAC,mBAAmB,qBAAqB,GAAG,IAAA,iNAAQ,EAGhD;IAEV,MAAM,YAAY,oNAAiB,CAAC,OAAO;QACzC,aAAa;QACb,MAAM,CAAC,UAAU,QAAQ,GAAG,MAAM,QAAQ,GAAG,CAAC;YAC1C,IAAA,uLAAW,EAAC;YACZ,IAAA,+LAAmB;SACtB;QACD,gBAAgB;QAChB,oBAAoB;QACpB,aAAa;IACf,GAAG,EAAE;IAEL,IAAA,kNAAS,EAAC;QACR,MAAM,gBAAgB,eAAe,OAAO,CAAC;QAC7C,IAAI,eAAe;YACjB,MAAM,UAAU,KAAK,KAAK,CAAC;YAC3B,eAAe;YACf,UAAU;QACZ,OAAO;YACL,OAAO,IAAI,CAAC;QACd;IACF,GAAG;QAAC;QAAQ;KAAU;IAGtB,MAAM,eAAe,OACnB,eACA,QACA;QAEA,IAAI,CAAC,aAAa;QAClB,sBAAsB;QACtB,IAAI;QAEJ,MAAM,SAAS;YACb;YACA,SAAS,YAAY,KAAK;YAC1B,WAAW,YAAY,IAAI;YAC3B;QACF;QAEA,OAAQ;YACN,KAAK;gBACH,SAAS,MAAM,IAAA,mLAAiB,EAAC;gBACjC;YACF,KAAK;gBACH,SAAS,MAAM,IAAA,oLAAkB,EAAC;gBAClC;YACF,KAAK;gBACH,SAAS,MAAM,IAAA,mLAAiB,EAAC;gBACjC;YACF,KAAK;gBACH,SAAS,MAAM,IAAA,yLAAuB,EAAC;gBACvC;QACJ;QAEA,IAAI,OAAO,OAAO,EAAE;YAClB,MAAM;gBAAE,OAAO;gBAAW,aAAa,CAAC,QAAQ,EAAE,OAAO,yBAAyB,CAAC;YAAC;YACpF,MAAM,UAAU,cAAc,oDAAoD;QACpF,OAAO;YACL,MAAM;gBAAE,SAAS;gBAAe,OAAO;gBAAS,aAAa,OAAO,KAAK;YAAC;QAC5E;QACA,sBAAsB;QACtB,sBAAsB;IACxB;IAEA,MAAM,mBAAmB,CAAC,eAAuB;QAC/C,qBAAqB;YAAE;YAAe;QAAO;QAC7C,sBAAsB;IACxB;IAEA,MAAM,gBAAgB,CAAC;QACrB,IAAI,mBAAmB;YACrB,aAAa,kBAAkB,aAAa,EAAE,kBAAkB,MAAM,EAAE;QAC1E;IACF;IAEA,MAAM,eAAe;QACnB,IAAI,CAAC,8BAA8B;QACnC,sBAAsB;QACtB,MAAM,SAAS,MAAM,IAAA,yLAAa,EAAC,6BAA6B,EAAE;QAClE,IAAI,OAAO,OAAO,EAAE;YAChB,MAAM;gBAAE,OAAO;gBAAW,aAAa;YAAoC;YAC3E,MAAM,UAAU;QACpB,OAAO;YACH,MAAM;gBAAE,SAAS;gBAAe,OAAO;gBAAS,aAAa,OAAO,KAAK;YAAC;QAC9E;QACA,sBAAsB;QACtB,sBAAsB;QACtB,gCAAgC;IAClC;IAGA,MAAM,uBAAuB,IAAA,gNAAO,EAAC;QACnC,OAAO,aAAa,MAAM,CAAC,CAAA;YACvB,IAAI,iBAAiB,SAAS,EAAE,aAAa,KAAK,cAAc,OAAO;YACvE,IAAI,cAAc,EAAE,aAAa,EAAE,kBAAkB,WAAW,WAAW,IAAI,OAAO;YACtF,IAAI,WAAW,IAAI,IAAI,IAAA,oJAAQ,EAAC,IAAA,oJAAQ,EAAC,EAAE,IAAI,GAAG,WAAW,IAAI,GAAG,OAAO;YAC3E,IAAI,WAAW,EAAE,IAAI,IAAA,kJAAO,EAAC,IAAA,oJAAQ,EAAC,EAAE,IAAI,GAAG,WAAW,EAAE,GAAG,OAAO;YACtE,OAAO;QACX;IACF,GAAG;QAAC;QAAc;QAAc;QAAY;KAAW;IAEvD,MAAM,cAAc,IAAA,gNAAO,EAAC;QAC1B,MAAM,QAAQ,IAAI,IAAI,aAAa,GAAG,CAAC,CAAA,IAAK,EAAE,aAAa,EAAE,MAAM,CAAC;QACpE,OAAO,MAAM,IAAI,CAAC;IACpB,GAAG;QAAC;KAAa;IAGjB,MAAM,mBAAmB,CAAC;QACxB,IAAI,CAAC,aAAa,OAAO;QACzB,MAAM,iBAAyB;YAAC;YAAQ;YAAoB;YAAc;YAAS;YAAe;SAAY;QAE9G,IAAI,eAAe,QAAQ,CAAC,YAAY,IAAI,KAAK,CAAC,YAAY,aAAa,KAAK,WAAW,YAAY,aAAa,KAAK,UAAU,GAAG;YACpI,qBACE,8OAAC,4IAAM;gBAAC,MAAK;gBAAK,SAAS,IAAM,iBAAiB,YAAY,EAAE,EAAG;;kCACjE,8OAAC,0MAAI;wBAAC,WAAU;;;;;;oBAAiB;;;;;;;QAGvC;QAEA,IAAI,YAAY,IAAI,KAAK,WAAW,YAAY,aAAa,KAAK,0BAA0B;YAC1F,qBACE,8OAAC;gBAAI,WAAU;;kCACb,8OAAC,4IAAM;wBAAC,MAAK;wBAAK,SAAQ;wBAAU,SAAS,IAAM,iBAAiB,YAAY,EAAE,EAAG;;0CACnF,8OAAC,6MAAK;gCAAC,WAAU;;;;;;4BAAiB;;;;;;;kCAEpC,8OAAC,4IAAM;wBAAC,MAAK;wBAAK,SAAQ;wBAAc,SAAS,IAAM,iBAAiB,YAAY,EAAE,EAAG;;0CACvF,8OAAC,iMAAC;gCAAC,WAAU;;;;;;4BAAiB;;;;;;;;;;;;;QAItC;QAEA,IAAI,YAAY,IAAI,KAAK,iBAAiB,YAAY,aAAa,KAAK,gCAAgC;YACtG,qBACE,8OAAC;gBAAI,WAAU;;kCACb,8OAAC,4IAAM;wBAAC,MAAK;wBAAK,SAAQ;wBAAU,SAAS,IAAM,iBAAiB,YAAY,EAAE,EAAG;;0CACnF,8OAAC,6MAAK;gCAAC,WAAU;;;;;;4BAAiB;;;;;;;kCAEpC,8OAAC,4IAAM;wBAAC,MAAK;wBAAK,SAAQ;wBAAc,SAAS,IAAM,iBAAiB,YAAY,EAAE,EAAG;;0CACvF,8OAAC,iMAAC;gCAAC,WAAU;;;;;;4BAAiB;;;;;;;;;;;;;QAItC;QAEA,OAAO;IACT;IAEA,MAAM,kBAAkB;QACtB,MAAM,MAAM,IAAI,8JAAK;QACrB,IAAI,IAAI,CAAC,4BAA4B,IAAI;QAEzC,MAAM,OAAO;YAAC;gBAAC;gBAAkB;gBAAQ;gBAAU;gBAAc;gBAAmB;aAAS;SAAC;QAC9F,MAAM,OAAO,qBAAqB,GAAG,CAAC,CAAA,IAAK;gBACvC,EAAE,EAAE;gBACJ,EAAE,IAAI;gBACN,CAAC,CAAC,EAAE,EAAE,MAAM,CAAC,cAAc,IAAI;gBAC/B,EAAE,aAAa,IAAI;gBACnB,IAAA,gKAAM,EAAC,IAAI,KAAK,EAAE,IAAI,GAAG;gBACzB,EAAE,aAAa,GAAG,YAAY,CAAC,EAAE,aAAa,CAAC,CAAC,KAAK,GAAG;aAC3D;QAEA,IAAY,SAAS,CAAC;YACnB,MAAM;YACN,MAAM;YACN,QAAQ;QACZ;QAEA,IAAI,IAAI,CAAC;IACX;IAEA,MAAM,oBAAoB;QACxB,MAAM,eAAe,qBAAqB,GAAG,CAAC,CAAA,IAAK,CAAC;gBAChD,kBAAkB,EAAE,EAAE;gBACtB,QAAQ,EAAE,IAAI;gBACd,UAAU,EAAE,MAAM;gBAClB,cAAc,EAAE,aAAa;gBAC7B,mBAAmB,IAAA,gKAAM,EAAC,IAAI,KAAK,EAAE,IAAI,GAAG;gBAC5C,UAAU,EAAE,aAAa,GAAG,YAAY,CAAC,EAAE,aAAa,CAAC,CAAC,KAAK,GAAG;YACtE,CAAC;QAED,MAAM,KAAK,sIAAU,CAAC,aAAa,CAAC;QACpC,MAAM,KAAK,sIAAU,CAAC,QAAQ;QAC9B,sIAAU,CAAC,iBAAiB,CAAC,IAAI,IAAI;QACrC,0IAAc,CAAC,IAAI;IACrB;IAEA,MAAM,cAAc;QAClB,MAAM,eAAe,aAAa,OAAO,EAAE;QAC3C,IAAI,cAAc;YACd,MAAM,cAAc,OAAO,IAAI,CAAC,IAAI;YACpC,IAAI,aAAa;gBACb,YAAY,QAAQ,CAAC,KAAK,CAAC;gBAC3B,YAAY,QAAQ,CAAC,KAAK,CAAC;gBAC3B,YAAY,QAAQ,CAAC,KAAK,CAAC,CAAC,6BAA6B,EAAE,OAAO,QAAQ,CAAC,MAAM,CAAC,gCAAgC,CAAC,GAAG,2BAA2B;gBACjJ,YAAY,QAAQ,CAAC,KAAK,CAAC;gBAC3B,YAAY,QAAQ,CAAC,KAAK,CAAC;gBAC3B,YAAY,QAAQ,CAAC,KAAK,CAAC,aAAa,SAAS;gBACjD,YAAY,QAAQ,CAAC,KAAK,CAAC;gBAC3B,YAAY,QAAQ,CAAC,KAAK;gBACzB,WAAW,IAAM,YAAY,KAAK,IAAI;YAC3C;QACJ;IACF;IAEA,MAAM,yBAAyB,CAAC;QAC9B,oBAAoB,CAAA,OAAQ,CAAC;gBAAE,GAAG,IAAI;gBAAE,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,SAAS;YAAC,CAAC;IACvE;IAEA,qBACE,8OAAC;QAAI,WAAU;;YACb,mCACE,8OAAC;gBACG,QAAQ;gBACR,WAAW;gBACX,YAAY,kBAAkB,MAAM;gBACpC,WAAW;gBACX,cAAc;;;;;;0BAGrB,8OAAC,0JAAW;gBAAC,MAAM;gBAAoB,cAAc;0BAClD,cAAA,8OAAC,iKAAkB;;sCACf,8OAAC,gKAAiB;;8CACd,8OAAC,+JAAgB;8CAAC;;;;;;8CAClB,8OAAC,qKAAsB;;wCAAC;wCAAwE,8BAA8B;wCAAG;;;;;;;;;;;;;sCAErI,8OAAC,gKAAiB;;8CACd,8OAAC,gKAAiB;8CAAC;;;;;;8CACnB,8OAAC,gKAAiB;oCAAC,SAAS;oCAAc,UAAU;8CAC/C,qBAAqB,gBAAgB;;;;;;;;;;;;;;;;;;;;;;;0BAKpD,8OAAC,wIAAI;;kCACH,8OAAC,8IAAU;;0CACP,8OAAC;gCAAI,WAAU;;kDACX,8OAAC;;0DACG,8OAAC,6IAAS;gDAAC,WAAU;0DAAyB;;;;;;0DAG9C,8OAAC,mJAAe;0DAAC;;;;;;;;;;;;kDAKpB,8OAAC;wCAAI,WAAU;;0DACZ,8OAAC,4JAAY;;kEACT,8OAAC,mKAAmB;wDAAC,OAAO;kEACxB,cAAA,8OAAC,4IAAM;4DAAC,SAAQ;4DAAU,MAAK;;8EAAK,8OAAC,wNAAO;oEAAC,WAAU;;;;;;gEAAiB;;;;;;;;;;;;kEAE5E,8OAAC,mKAAmB;;0EAChB,8OAAC,iKAAiB;0EAAC;;;;;;0EACnB,8OAAC,qKAAqB;;;;;4DACrB,OAAO,OAAO,CAAC,kBAAkB,GAAG,CAAC,CAAC,CAAC,KAAK,MAAM,iBAC/C,8OAAC,wKAAwB;oEAErB,SAAS;oEACT,iBAAiB,IAAM,uBAAuB;8EAE7C,IAAI,OAAO,CAAC,YAAY,OAAO,OAAO,CAAC,MAAM,CAAA,MAAO,IAAI,WAAW;mEAJ/D;;;;;;;;;;;;;;;;;0DASrB,8OAAC,4IAAM;gDAAC,SAAQ;gDAAU,MAAK;gDAAK,SAAS;;kEAAa,8OAAC,mNAAO;wDAAC,WAAU;;;;;;oDAAiB;;;;;;;0DAC9F,8OAAC,4IAAM;gDAAC,SAAQ;gDAAU,MAAK;gDAAK,SAAS;;kEAAiB,8OAAC,0NAAQ;wDAAC,WAAU;;;;;;oDAAiB;;;;;;;0DACnG,8OAAC,4IAAM;gDAAC,SAAQ;gDAAU,MAAK;gDAAK,SAAS;;kEAAmB,8OAAC,+OAAe;wDAAC,WAAU;;;;;;oDAAiB;;;;;;;;;;;;;;;;;;;0CAGnH,8OAAC;gCAAI,WAAU;;kDACZ,8OAAC;;0DACG,8OAAC,0IAAK;0DAAC;;;;;;0DACP,8OAAC,4IAAM;gDAAC,OAAO;gDAAc,eAAe,CAAC,QAA0B,gBAAgB;;kEACnF,8OAAC,mJAAa;kEAAC,cAAA,8OAAC,iJAAW;;;;;;;;;;kEAC3B,8OAAC,mJAAa;;0EACV,8OAAC,gJAAU;gEAAC,OAAM;0EAAM;;;;;;4DACvB,OAAO,IAAI,CAAC,cAAc,GAAG,CAAC,CAAA,uBAC3B,8OAAC,gJAAU;oEAAc,OAAO;8EAC3B,YAAY,CAAC,OAAiB,CAAC,KAAK;mEADxB;;;;;;;;;;;;;;;;;;;;;;;kDAOjC,8OAAC;;0DACG,8OAAC,0IAAK;0DAAC;;;;;;0DACN,8OAAC,4IAAM;gDAAC,OAAO;gDAAY,eAAe,CAAC,QAAU,cAAc,UAAU,QAAQ,KAAK;;kEACvF,8OAAC,mJAAa;kEAAC,cAAA,8OAAC,iJAAW;4DAAC,aAAY;;;;;;;;;;;kEACxC,8OAAC,mJAAa;;0EACT,8OAAC,gJAAU;gEAAC,OAAM;0EAAM;;;;;;4DACxB,YAAY,GAAG,CAAC,CAAA,qBACb,8OAAC,gJAAU;oEAAY,OAAO;8EACzB;mEADY;;;;;;;;;;;;;;;;;;;;;;;kDAOjC,8OAAC;;0DACG,8OAAC,0IAAK;0DAAC;;;;;;0DACP,8OAAC,8IAAO;;kEACJ,8OAAC,qJAAc;wDAAC,OAAO;kEACnB,cAAA,8OAAC,4IAAM;4DAAC,SAAQ;4DAAU,WAAU;;8EAChC,8OAAC,sNAAY;oEAAC,WAAU;;;;;;gEACvB,WAAW,IAAI,GAAG,IAAA,gKAAM,EAAC,WAAW,IAAI,EAAE,uBAAS,8OAAC;8EAAK;;;;;;;;;;;;;;;;;kEAGlE,8OAAC,qJAAc;wDAAC,WAAU;kEAAa,cAAA,8OAAC,0IAAK;4DAAC,MAAK;4DAAO,UAAU,CAAA,IAAK,cAAc,CAAA,IAAK,CAAC;wEAAC,GAAG,CAAC;wEAAE,MAAM,IAAI,KAAK,EAAE,MAAM,CAAC,KAAK;oEAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;kDAG3I,8OAAC;;0DACG,8OAAC,0IAAK;0DAAC;;;;;;0DACN,8OAAC,8IAAO;;kEACL,8OAAC,qJAAc;wDAAC,OAAO;kEACnB,cAAA,8OAAC,4IAAM;4DAAC,SAAQ;4DAAU,WAAU;;8EAChC,8OAAC,sNAAY;oEAAC,WAAU;;;;;;gEACvB,WAAW,EAAE,GAAG,IAAA,gKAAM,EAAC,WAAW,EAAE,EAAE,uBAAS,8OAAC;8EAAK;;;;;;;;;;;;;;;;;kEAG9D,8OAAC,qJAAc;wDAAC,WAAU;kEAAa,cAAA,8OAAC,0IAAK;4DAAC,MAAK;4DAAO,UAAU,CAAA,IAAK,cAAc,CAAA,IAAK,CAAC;wEAAC,GAAG,CAAC;wEAAE,IAAI,IAAI,KAAK,EAAE,MAAM,CAAC,KAAK;oEAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kCAKjJ,8OAAC,+IAAW;;0CACR,8OAAC;gCAAI,WAAU;0CACZ,cAAA,8OAAC;oCAAE,WAAU;;wCAA2D;wCAC1D;sDACb,8OAAC;4CAAK,WAAU;sDAA0B,aAAa;;;;;;wCAAY;;;;;;;;;;;;4BAKtE,0BACI,8OAAC;gCAAI,WAAU;0CACZ,cAAA,8OAAC,4NAAO;oCAAC,WAAU;;;;;;;;;;qDAGvB,8OAAC,0IAAK;gCAAC,WAAU;;kDACjB,8OAAC,gJAAW;kDACR,cAAA,8OAAC,6IAAQ;;gDACR,iBAAiB,EAAE,kBAAI,8OAAC,8IAAS;8DAAC;;;;;;gDAClC,iBAAiB,IAAI,kBAAI,8OAAC,8IAAS;8DAAC;;;;;;gDACpC,iBAAiB,SAAS,kBAAI,8OAAC,8IAAS;8DAAC;;;;;;gDACzC,iBAAiB,QAAQ,kBAAI,8OAAC,8IAAS;8DAAC;;;;;;gDACxC,iBAAiB,QAAQ,kBAAI,8OAAC,8IAAS;8DAAC;;;;;;gDACxC,iBAAiB,QAAQ,kBAAI,8OAAC,8IAAS;8DAAC;;;;;;gDACxC,iBAAiB,WAAW,kBAAI,8OAAC,8IAAS;8DAAC;;;;;;gDAC3C,iBAAiB,MAAM,kBAAI,8OAAC,8IAAS;8DAAC;;;;;;gDACtC,iBAAiB,aAAa,kBAAI,8OAAC,8IAAS;8DAAC;;;;;;gDAC7C,iBAAiB,IAAI,kBAAI,8OAAC,8IAAS;8DAAC;;;;;;gDACpC,iBAAiB,aAAa,kBAAI,8OAAC,8IAAS;8DAAC;;;;;;8DAC9C,8OAAC,8IAAS;oDAAC,WAAU;8DAAc;;;;;;;;;;;;;;;;;kDAGvC,8OAAC,8IAAS;kDACL,qBAAqB,MAAM,GAAG,IAC/B,qBAAqB,GAAG,CAAC,CAAC,kBACtB,8OAAC,6IAAQ;;oDACR,iBAAiB,EAAE,kBAAI,8OAAC,8IAAS;wDAAC,WAAU;kEAAqB,EAAE,EAAE;;;;;;oDACrE,iBAAiB,IAAI,kBAAI,8OAAC,8IAAS;kEAAE,EAAE,IAAI;;;;;;oDAC3C,iBAAiB,SAAS,kBAAI,8OAAC,8IAAS;kEAAE,gBAAgB,CAAC,EAAE,SAAS,CAAC,IAAI,EAAE,SAAS;;;;;;oDACtF,iBAAiB,QAAQ,kBAAI,8OAAC,8IAAS;kEAAE,EAAE,QAAQ,IAAI;;;;;;oDACvD,iBAAiB,QAAQ,kBAAI,8OAAC,8IAAS;kEAAE,EAAE,QAAQ,IAAI;;;;;;oDACvD,iBAAiB,QAAQ,kBAAI,8OAAC,8IAAS;kEAAE,EAAE,QAAQ,IAAI;;;;;;oDACvD,iBAAiB,WAAW,kBAAI,8OAAC,8IAAS;kEAAE,EAAE,WAAW,IAAI;;;;;;oDAC7D,iBAAiB,MAAM,kBAAI,8OAAC,8IAAS;wDAAC,WAAU;kEAC5C,eAAe,EAAE,MAAM;;;;;;oDAE3B,iBAAiB,aAAa,kBAAI,8OAAC,8IAAS;kEAAE,EAAE,aAAa;;;;;;oDAC7D,iBAAiB,IAAI,kBAAI,8OAAC,8IAAS;kEAC/B,IAAA,gKAAM,EAAC,IAAI,KAAK,EAAE,IAAI,GAAG;;;;;;oDAE7B,iBAAiB,aAAa,kBAAI,8OAAC,8IAAS;kEACxC,EAAE,aAAa,IAAI,YAAY,CAAC,EAAE,aAAa,CAAC,iBAC7C,8OAAC,0IAAK;4DAAC,SAAS,YAAY,CAAC,EAAE,aAAa,CAAC,CAAC,KAAK;sEAC9C,YAAY,CAAC,EAAE,aAAa,CAAC,CAAC,KAAK;;;;;iFAGxC,8OAAC,0IAAK;4DAAC,SAAQ;sEAAY;;;;;;;;;;;kEAGnC,8OAAC,8IAAS;wDAAC,WAAU;kEACjB,cAAA,8OAAC;4DAAI,WAAU;;gEACV,iBAAiB;8EAClB,8OAAC,4JAAY;;sFACb,8OAAC,mKAAmB;4EAAC,OAAO;sFACxB,cAAA,8OAAC,4IAAM;gFAAC,SAAQ;gFAAQ,MAAK;0FACzB,cAAA,8OAAC,0OAAY;oFAAC,WAAU;;;;;;;;;;;;;;;;sFAGhC,8OAAC,mKAAmB;4EAAC,OAAM;;8FACvB,8OAAC,4IAAM;;sGACH,8OAAC,mJAAa;4FAAC,OAAO;sGAClB,cAAA,8OAAC,gKAAgB;gGAAC,UAAU,CAAC,IAAM,EAAE,cAAc;;kHAC/C,8OAAC,0MAAI;wGAAC,WAAU;;;;;;oGAAiB;;;;;;;;;;;;sGAIzC,8OAAC;4FAAyB,aAAa;;;;;;;;;;;;8FAE3C,8OAAC,4IAAM;;sGACH,8OAAC,mJAAa;4FAAC,OAAO;sGAClB,cAAA,8OAAC,gKAAgB;gGAAC,UAAU,CAAC,IAAM,EAAE,cAAc;gGAAI,UAAU,CAAC,EAAE,eAAe,IAAI,EAAE,eAAe,CAAC,MAAM,KAAK;;kHAChH,8OAAC,mNAAO;wGAAC,WAAU;;;;;;oGAAiB;;;;;;;;;;;;sGAI5C,8OAAC;4FAAsB,SAAS,EAAE,eAAe,IAAI,EAAE;4FAAE,eAAe,EAAE,EAAE;;;;;;;;;;;;8FAEhF,8OAAC,gKAAgB;oFAAC,UAAU,IAAM,iBAAiB,EAAE,EAAE,EAAG;;sGACtD,8OAAC,gOAAU;4FAAC,WAAU;;;;;;wFAAiB;;;;;;;gFAGzC,aAAa,SAAS,+BACtB;;sGACE,8OAAC,qKAAqB;;;;;sGACtB,8OAAC,gKAAgB;4FACf,WAAU;4FACV,UAAU;gGACR,gCAAgC;gGAChC,sBAAsB;4FACxB;;8GAEA,8OAAC,oNAAM;oGAAC,WAAU;;;;;;gGAAiB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+CAlEtC,EAAE,EAAE;;;;sEA8EvB,8OAAC,6IAAQ;sDACL,cAAA,8OAAC,8IAAS;gDAAC,SAAS,OAAO,MAAM,CAAC,kBAAkB,MAAM,CAAC,CAAA,IAAK,GAAG,MAAM,GAAG;gDAAG,WAAU;0DAAmB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAU7H,8OAAC;gBAAI,OAAO;oBAAE,SAAS;gBAAO;0BAC7B,cAAA,8OAAC,iKAAe;oBACd,KAAK;oBACL,cAAc;oBACd,SAAS;wBAAC,QAAQ;wBAAc,MAAM;wBAAY,MAAM,WAAW,IAAI;wBAAE,IAAI,WAAW,EAAE;oBAAA;oBAC1F,kBAAkB;;;;;;;;;;;;;;;;;AAK5B","debugId":null}}]
}