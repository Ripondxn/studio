{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/tabs.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n"],"names":[],"mappings":";;;;;;;;;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,OAAO,wKAAkB;AAE/B,MAAM,yBAAW,mNAAgB,CAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,wKAAkB;QACjB,KAAK;QACL,WAAW,IAAA,yHAAE,EACX,8FACA;QAED,GAAG,KAAK;;;;;;AAGb,SAAS,WAAW,GAAG,wKAAkB,CAAC,WAAW;AAErD,MAAM,4BAAc,mNAAgB,CAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,2KAAqB;QACpB,KAAK;QACL,WAAW,IAAA,yHAAE,EACX,uYACA;QAED,GAAG,KAAK;;;;;;AAGb,YAAY,WAAW,GAAG,2KAAqB,CAAC,WAAW;AAE3D,MAAM,4BAAc,mNAAgB,CAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,2KAAqB;QACpB,KAAK;QACL,WAAW,IAAA,yHAAE,EACX,mIACA;QAED,GAAG,KAAK;;;;;;AAGb,YAAY,WAAW,GAAG,2KAAqB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 59, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/table.tsx"],"sourcesContent":["\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AACA;AAEA;;;;AAEA,MAAM,sBAAQ,mNAAgB,CAG5B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YACC,KAAK;YACL,WAAW,IAAA,yHAAE,EAAC,iCAAiC;YAC9C,GAAG,KAAK;;;;;;;;;;;AAIf,MAAM,WAAW,GAAG;AAEpB,MAAM,4BAAc,mNAAgB,CAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAM,KAAK;QAAK,WAAW,IAAA,yHAAE,EAAC,mBAAmB;QAAa,GAAG,KAAK;;;;;;AAEzE,YAAY,WAAW,GAAG;AAE1B,MAAM,0BAAY,mNAAgB,CAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,IAAA,yHAAE,EAAC,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,4BAAc,mNAAgB,CAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,IAAA,yHAAE,EACX,2DACA;QAED,GAAG,KAAK;;;;;;AAGb,YAAY,WAAW,GAAG;AAE1B,MAAM,yBAAW,mNAAgB,CAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,IAAA,yHAAE,EACX,6DACA;QAED,GAAG,KAAK;;;;;;AAGb,SAAS,WAAW,GAAG;AAEvB,MAAM,0BAAY,mNAAgB,CAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,IAAA,yHAAE,EACX,oGACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,0BAAY,mNAAgB,CAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,IAAA,yHAAE,EAAC,kDAAkD;QAC/D,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,6BAAe,mNAAgB,CAGnC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,IAAA,yHAAE,EAAC,sCAAsC;QACnD,GAAG,KAAK;;;;;;AAGb,aAAa,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 175, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/badge.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n"],"names":[],"mappings":";;;;;;;AACA;AAEA;;;;AAEA,MAAM,gBAAgB,IAAA,uKAAG,EACvB,0KACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,WACE;YACF,aACE;YACF,SAAS;QACX;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAOF,SAAS,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAmB;IACzD,qBACE,8OAAC;QAAI,WAAW,IAAA,yHAAE,EAAC,cAAc;YAAE;QAAQ,IAAI;QAAa,GAAG,KAAK;;;;;;AAExE","debugId":null}},
    {"offset": {"line": 217, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/dialog.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,SAAS,0KAAoB;AAEnC,MAAM,gBAAgB,6KAAuB;AAE7C,MAAM,eAAe,4KAAsB;AAE3C,MAAM,cAAc,2KAAqB;AAEzC,MAAM,8BAAgB,mNAAgB,CAGpC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,6KAAuB;QACtB,KAAK;QACL,WAAW,IAAA,yHAAE,EACX,0JACA;QAED,GAAG,KAAK;;;;;;AAGb,cAAc,WAAW,GAAG,6KAAuB,CAAC,WAAW;AAE/D,MAAM,8BAAgB,mNAAgB,CAGpC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,8OAAC;;0BACC,8OAAC;;;;;0BACD,8OAAC,6KAAuB;gBACtB,KAAK;gBACL,WAAW,IAAA,yHAAE,EACX,+fACA;gBAED,GAAG,KAAK;;oBAER;kCACD,8OAAC,2KAAqB;wBAAC,WAAU;;0CAC/B,8OAAC,iMAAC;gCAAC,WAAU;;;;;;0CACb,8OAAC;gCAAK,WAAU;0CAAU;;;;;;;;;;;;;;;;;;;;;;;;AAKlC,cAAc,WAAW,GAAG,6KAAuB,CAAC,WAAW;AAE/D,MAAM,eAAe,CAAC,EACpB,SAAS,EACT,GAAG,OACkC,iBACrC,8OAAC;QACC,WAAW,IAAA,yHAAE,EACX,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,aAAa,WAAW,GAAG;AAE3B,MAAM,eAAe,CAAC,EACpB,SAAS,EACT,GAAG,OACkC,iBACrC,8OAAC;QACC,WAAW,IAAA,yHAAE,EACX,iEACA;QAED,GAAG,KAAK;;;;;;AAGb,aAAa,WAAW,GAAG;AAE3B,MAAM,4BAAc,mNAAgB,CAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,2KAAqB;QACpB,KAAK;QACL,WAAW,IAAA,yHAAE,EACX,qDACA;QAED,GAAG,KAAK;;;;;;AAGb,YAAY,WAAW,GAAG,2KAAqB,CAAC,WAAW;AAE3D,MAAM,kCAAoB,mNAAgB,CAGxC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,iLAA2B;QAC1B,KAAK;QACL,WAAW,IAAA,yHAAE,EAAC,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,kBAAkB,WAAW,GAAG,iLAA2B,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 357, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/input.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n"],"names":[],"mappings":";;;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,mNAAgB,CAC5B,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAO,EAAE;IAC9B,qBACE,8OAAC;QACC,MAAM;QACN,WAAW,IAAA,yHAAE,EACX,kYACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,MAAM,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 385, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,gBAAgB,IAAA,uKAAG,EACvB;AAGF,MAAM,sBAAQ,mNAAgB,CAI5B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,yKAAmB;QAClB,KAAK;QACL,WAAW,IAAA,yHAAE,EAAC,iBAAiB;QAC9B,GAAG,KAAK;;;;;;AAGb,MAAM,WAAW,GAAG,yKAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 416, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/textarea.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {cn} from '@/lib/utils';\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({className, ...props}, ref) => {\n    return (\n      <textarea\n        className={cn(\n          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nTextarea.displayName = 'Textarea';\n\nexport {Textarea};\n"],"names":[],"mappings":";;;;;AAAA;AAEA;;;;AAKA,MAAM,yBAAW,mNAAgB,CAC/B,CAAC,EAAC,SAAS,EAAE,GAAG,OAAM,EAAE;IACtB,qBACE,8OAAC;QACC,WAAW,IAAA,yHAAE,EACX,qTACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,SAAS,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 443, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/finance/expense/new-expense-dialog.tsx"],"sourcesContent":["\n'use client';\n\nimport { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n  DialogFooter,\n  DialogClose,\n} from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport { DollarSign, Plus } from 'lucide-react';\n\ninterface NewExpenseDialogProps {\n  isOpen: boolean;\n  onOpenChange: (isOpen: boolean) => void;\n}\n\nexport default function NewExpenseDialog({ isOpen, onOpenChange }: NewExpenseDialogProps) {\n  const [fileName, setFileName] = useState('');\n\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.files && event.target.files.length > 0) {\n      setFileName(event.target.files[0].name);\n    } else {\n      setFileName('');\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[600px]\">\n        <DialogHeader>\n            <div className=\"flex items-center gap-3\">\n                <div className=\"bg-blue-100 p-2 rounded-md\">\n                    <DollarSign className=\"h-6 w-6 text-blue-600\" />\n                </div>\n                <div>\n                    <DialogTitle className=\"text-xl\">Submit New Expense</DialogTitle>\n                    <DialogDescription>Submit your expense details for reimbursement.</DialogDescription>\n                </div>\n            </div>\n        </DialogHeader>\n        <div className=\"grid gap-6 py-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"employee\">Employee</Label>\n              <Select>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select employee\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"john-smith\">John Smith</SelectItem>\n                  <SelectItem value=\"sarah-johnson\">Sarah Johnson</SelectItem>\n                  <SelectItem value=\"mike-wilson\">Mike Wilson</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"type\">Type</Label>\n              <Select defaultValue=\"expense-claim\">\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"expense-claim\">Expense Claim</SelectItem>\n                  <SelectItem value=\"advance-request\">Advance Request</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"category\">Category</Label>\n              <Select defaultValue=\"materials\">\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select category\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"materials\">Materials</SelectItem>\n                  <SelectItem value=\"tools\">Tools</SelectItem>\n                  <SelectItem value=\"maintenance\">Maintenance</SelectItem>\n                  <SelectItem value=\"travel\">Travel</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"amount\">Amount ($)</Label>\n              <Input id=\"amount\" type=\"number\" placeholder=\"0.00\" />\n            </div>\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"description\">Description</Label>\n            <Textarea\n              id=\"description\"\n              placeholder=\"Provide detailed description of the expense or advance request...\"\n              className=\"min-h-[100px]\"\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <Label>Receipt/Invoice</Label>\n            <div className=\"flex items-stretch\">\n                <label htmlFor=\"receipt-file\" className=\"cursor-pointer flex items-center justify-center px-4 bg-primary text-primary-foreground rounded-l-md border border-r-0 border-primary\">\n                    Choose File\n                </label>\n                <input id=\"receipt-file\" type=\"file\" className=\"hidden\" onChange={handleFileChange} />\n                <div className=\"flex-1 px-3 py-2 border rounded-r-md text-sm text-muted-foreground\">\n                    {fileName || \"No file chosen\"}\n                </div>\n            </div>\n          </div>\n        </div>\n        <DialogFooter>\n          <DialogClose asChild>\n            <Button variant=\"outline\">Cancel</Button>\n          </DialogClose>\n          <Button>\n            <Plus className=\"mr-2 h-4 w-4\" /> Submit Expense\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 932, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/form.tsx"],"sourcesContent":["\n\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1091, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/switch.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n"],"names":[],"mappings":";;;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,uBAAS,mNAAgB,CAG7B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,0KAAqB;QACpB,WAAW,IAAA,yHAAE,EACX,sXACA;QAED,GAAG,KAAK;QACT,KAAK;kBAEL,cAAA,8OAAC,2KAAsB;YACrB,WAAW,IAAA,yHAAE,EACX;;;;;;;;;;;AAKR,OAAO,WAAW,GAAG,0KAAqB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 1126, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/human-resource/employees/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { revalidatePath } from 'next/cache';\nimport { z } from 'zod';\nimport { employeeSchema, type Employee } from './schema';\n\nconst employeesFilePath = path.join(process.cwd(), 'src/app/human-resource/employees/employees-data.json');\n\n// Helper to read the JSON file\nasync function readEmployees(): Promise<Employee[]> {\n    try {\n        await fs.access(employeesFilePath);\n        const data = await fs.readFile(employeesFilePath, 'utf-8');\n        return JSON.parse(data) as Employee[];\n    } catch (error) {\n        // If the file doesn't exist, create it with an empty array\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            await fs.writeFile(employeesFilePath, JSON.stringify([], null, 2), 'utf-8');\n            return [];\n        }\n        throw error;\n    }\n}\n\n// Helper to write to the JSON file\nasync function writeEmployees(data: Employee[]) {\n    await fs.writeFile(employeesFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\n// --- Exported Server Actions ---\n\n/**\n * Fetches all employees.\n */\nexport async function getAllEmployees(): Promise<Employee[]> {\n    return await readEmployees();\n}\n\n/**\n * Generates a new unique employee ID.\n */\nexport async function generateNewEmployeeId(): Promise<string> {\n    const allEmployees = await readEmployees();\n    let maxNum = 0;\n    allEmployees.forEach(e => {\n        const match = e.employeeId.match(/^EMP-(\\d+)$/);\n        if (match) {\n            const num = parseInt(match[1], 10);\n            if (num > maxNum) {\n                maxNum = num;\n            }\n        }\n    });\n    return `EMP-${(maxNum + 1).toString().padStart(4, '0')}`;\n}\n\n/**\n * Adds a new employee to the database.\n */\nexport async function addEmployeeData(data: z.infer<typeof employeeSchema>) {\n    const validation = employeeSchema.safeParse(data);\n    if (!validation.success) {\n        throw new Error(validation.error.errors.map(e => e.message).join(', '));\n    }\n\n    const allEmployees = await readEmployees();\n    const employeeExists = allEmployees.some(e => e.employeeId === validation.data.employeeId);\n\n    if (employeeExists) {\n        throw new Error(`Employee with ID \"${validation.data.employeeId}\" already exists.`);\n    }\n\n    const newEmployee: Employee = {\n        ...validation.data,\n        id: `emp-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`,\n    };\n\n    allEmployees.push(newEmployee);\n    await writeEmployees(allEmployees);\n    revalidatePath('/human-resource/employees');\n    return { success: true, data: newEmployee };\n}\n\n/**\n * Updates an existing employee's data.\n */\nexport async function updateEmployeeData(id: string, data: Partial<Omit<Employee, 'id'>>) {\n    const validation = employeeSchema.partial().safeParse(data);\n    if (!validation.success) {\n        throw new Error(validation.error.errors.map(e => e.message).join(', '));\n    }\n\n    const allEmployees = await readEmployees();\n    const index = allEmployees.findIndex(e => e.id === id);\n\n    if (index === -1) {\n        throw new Error('Employee not found.');\n    }\n\n    allEmployees[index] = { ...allEmployees[index], ...validation.data };\n    await writeEmployees(allEmployees);\n    revalidatePath('/human-resource/employees');\n    return { success: true, data: allEmployees[index] };\n}\n\n\n/**\n * Fetches a single employee by their unique ID.\n */\nexport async function getEmployeeDataById(id: string): Promise<Employee | null> {\n    const allEmployees = await readEmployees();\n    return allEmployees.find(e => e.id === id) || null;\n}\n\n/**\n * Deletes an employee by their unique ID.\n */\nexport async function deleteEmployeeData(id: string) {\n    const allEmployees = await readEmployees();\n    const updatedEmployees = allEmployees.filter(e => e.id !== id);\n\n    if (allEmployees.length === updatedEmployees.length) {\n        return { success: false, error: 'Employee not found.' };\n    }\n\n    await writeEmployees(updatedEmployees);\n    revalidatePath('/human-resource/employees');\n    return { success: true };\n}\n\n/**\n * Fetches the change history for an employee.\n * This is a placeholder and returns a mock history.\n */\nexport async function getEmployeeHistory(id: string): Promise<any[]> {\n    // In a real application, you would fetch this from a database or a log file.\n    console.log(`Fetching history for employee ID: ${id}`);\n    return [\n        {\n            action: 'Employee Created',\n            changedBy: 'Admin',\n            changedAt: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000).toISOString(), // 10 days ago\n            changes: { name: { old: '', new: 'John Doe' }, email: { old: '', new: 'john.doe@example.com' } },\n        },\n        {\n            action: 'Details Updated',\n            changedBy: 'HR Manager',\n            changedAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(), // 2 days ago\n            changes: { profession: { old: 'Software Engineer', new: 'Senior Software Engineer' } },\n        },\n    ];\n}\n"],"names":[],"mappings":";;;;;;;IA8DsB,kBAAA,WAAA,GAAA,IAAA,+OAAA,EAAA,8CAAA,oOAAA,EAAA,KAAA,GAAA,0OAAA,EAAA","debugId":null}},
    {"offset": {"line": 1138, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/human-resource/employees/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { revalidatePath } from 'next/cache';\nimport { z } from 'zod';\nimport { employeeSchema, type Employee } from './schema';\n\nconst employeesFilePath = path.join(process.cwd(), 'src/app/human-resource/employees/employees-data.json');\n\n// Helper to read the JSON file\nasync function readEmployees(): Promise<Employee[]> {\n    try {\n        await fs.access(employeesFilePath);\n        const data = await fs.readFile(employeesFilePath, 'utf-8');\n        return JSON.parse(data) as Employee[];\n    } catch (error) {\n        // If the file doesn't exist, create it with an empty array\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            await fs.writeFile(employeesFilePath, JSON.stringify([], null, 2), 'utf-8');\n            return [];\n        }\n        throw error;\n    }\n}\n\n// Helper to write to the JSON file\nasync function writeEmployees(data: Employee[]) {\n    await fs.writeFile(employeesFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\n// --- Exported Server Actions ---\n\n/**\n * Fetches all employees.\n */\nexport async function getAllEmployees(): Promise<Employee[]> {\n    return await readEmployees();\n}\n\n/**\n * Generates a new unique employee ID.\n */\nexport async function generateNewEmployeeId(): Promise<string> {\n    const allEmployees = await readEmployees();\n    let maxNum = 0;\n    allEmployees.forEach(e => {\n        const match = e.employeeId.match(/^EMP-(\\d+)$/);\n        if (match) {\n            const num = parseInt(match[1], 10);\n            if (num > maxNum) {\n                maxNum = num;\n            }\n        }\n    });\n    return `EMP-${(maxNum + 1).toString().padStart(4, '0')}`;\n}\n\n/**\n * Adds a new employee to the database.\n */\nexport async function addEmployeeData(data: z.infer<typeof employeeSchema>) {\n    const validation = employeeSchema.safeParse(data);\n    if (!validation.success) {\n        throw new Error(validation.error.errors.map(e => e.message).join(', '));\n    }\n\n    const allEmployees = await readEmployees();\n    const employeeExists = allEmployees.some(e => e.employeeId === validation.data.employeeId);\n\n    if (employeeExists) {\n        throw new Error(`Employee with ID \"${validation.data.employeeId}\" already exists.`);\n    }\n\n    const newEmployee: Employee = {\n        ...validation.data,\n        id: `emp-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`,\n    };\n\n    allEmployees.push(newEmployee);\n    await writeEmployees(allEmployees);\n    revalidatePath('/human-resource/employees');\n    return { success: true, data: newEmployee };\n}\n\n/**\n * Updates an existing employee's data.\n */\nexport async function updateEmployeeData(id: string, data: Partial<Omit<Employee, 'id'>>) {\n    const validation = employeeSchema.partial().safeParse(data);\n    if (!validation.success) {\n        throw new Error(validation.error.errors.map(e => e.message).join(', '));\n    }\n\n    const allEmployees = await readEmployees();\n    const index = allEmployees.findIndex(e => e.id === id);\n\n    if (index === -1) {\n        throw new Error('Employee not found.');\n    }\n\n    allEmployees[index] = { ...allEmployees[index], ...validation.data };\n    await writeEmployees(allEmployees);\n    revalidatePath('/human-resource/employees');\n    return { success: true, data: allEmployees[index] };\n}\n\n\n/**\n * Fetches a single employee by their unique ID.\n */\nexport async function getEmployeeDataById(id: string): Promise<Employee | null> {\n    const allEmployees = await readEmployees();\n    return allEmployees.find(e => e.id === id) || null;\n}\n\n/**\n * Deletes an employee by their unique ID.\n */\nexport async function deleteEmployeeData(id: string) {\n    const allEmployees = await readEmployees();\n    const updatedEmployees = allEmployees.filter(e => e.id !== id);\n\n    if (allEmployees.length === updatedEmployees.length) {\n        return { success: false, error: 'Employee not found.' };\n    }\n\n    await writeEmployees(updatedEmployees);\n    revalidatePath('/human-resource/employees');\n    return { success: true };\n}\n\n/**\n * Fetches the change history for an employee.\n * This is a placeholder and returns a mock history.\n */\nexport async function getEmployeeHistory(id: string): Promise<any[]> {\n    // In a real application, you would fetch this from a database or a log file.\n    console.log(`Fetching history for employee ID: ${id}`);\n    return [\n        {\n            action: 'Employee Created',\n            changedBy: 'Admin',\n            changedAt: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000).toISOString(), // 10 days ago\n            changes: { name: { old: '', new: 'John Doe' }, email: { old: '', new: 'john.doe@example.com' } },\n        },\n        {\n            action: 'Details Updated',\n            changedBy: 'HR Manager',\n            changedAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(), // 2 days ago\n            changes: { profession: { old: 'Software Engineer', new: 'Senior Software Engineer' } },\n        },\n    ];\n}\n"],"names":[],"mappings":";;;;;;;IA4CsB,wBAAA,WAAA,GAAA,IAAA,+OAAA,EAAA,8CAAA,oOAAA,EAAA,KAAA,GAAA,0OAAA,EAAA","debugId":null}},
    {"offset": {"line": 1150, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/human-resource/employees/schema.ts"],"sourcesContent":["\nimport { z } from 'zod';\n\nexport const attachmentSchema = z.object({\n  id: z.number(),\n  name: z.string(),\n  file: z.string().nullable(),\n  remarks: z.string(),\n  isLink: z.boolean()\n});\n\nexport const visaDetailsSchema = z.object({\n    number: z.string().optional(),\n    type: z.string().optional(),\n    expiryDate: z.string().optional(),\n});\n\nexport const medicalCardSchema = z.object({\n    number: z.string().optional(),\n    provider: z.string().optional(),\n    expiryDate: z.string().optional(),\n});\n\nexport const insuranceDetailsSchema = z.object({\n    policyNumber: z.string().optional(),\n    provider: z.string().optional(),\n    expiryDate: z.string().optional(),\n    coverageDetails: z.string().optional(),\n});\n\nexport const salaryScaleSchema = z.object({\n    grade: z.string().optional(),\n    level: z.string().optional(),\n    amount: z.number().optional(),\n});\n\nexport const employeeSchema = z.object({\n  id: z.string().optional(),\n  employeeId: z.string().min(1, \"Employee ID is required.\"),\n  name: z.string().min(1, \"Name is required.\"),\n  dateOfBirth: z.string().optional(),\n  \n  // Document Details\n  nationalId: z.string().optional(),\n  nationalIdExpiry: z.string().optional(),\n  passportNo: z.string().optional(),\n  passportExpiry: z.string().optional(),\n  visaDetails: visaDetailsSchema.optional(),\n  medicalCard: medicalCardSchema.optional(),\n  insuranceDetails: insuranceDetailsSchema.optional(),\n  \n  // Professional Details\n  profession: z.string().optional(),\n  department: z.string().optional(),\n  joiningDate: z.string().optional(),\n  \n  // Contact\n  mobile: z.string().optional(),\n  email: z.string().email().optional().or(z.literal('')),\n  address: z.string().optional(),\n  \n  // Compensation\n  salaryScale: salaryScaleSchema.optional(),\n\n  // Attachments & Photo\n  attachments: z.array(attachmentSchema).optional(),\n  photo: z.string().nullable().optional(),\n});\n\nexport type Employee = z.infer<typeof employeeSchema>;\n"],"names":[],"mappings":";;;;;;;;;;;;;;AACA;;AAEO,MAAM,mBAAmB,uKAAC,CAAC,MAAM,CAAC;IACvC,IAAI,uKAAC,CAAC,MAAM;IACZ,MAAM,uKAAC,CAAC,MAAM;IACd,MAAM,uKAAC,CAAC,MAAM,GAAG,QAAQ;IACzB,SAAS,uKAAC,CAAC,MAAM;IACjB,QAAQ,uKAAC,CAAC,OAAO;AACnB;AAEO,MAAM,oBAAoB,uKAAC,CAAC,MAAM,CAAC;IACtC,QAAQ,uKAAC,CAAC,MAAM,GAAG,QAAQ;IAC3B,MAAM,uKAAC,CAAC,MAAM,GAAG,QAAQ;IACzB,YAAY,uKAAC,CAAC,MAAM,GAAG,QAAQ;AACnC;AAEO,MAAM,oBAAoB,uKAAC,CAAC,MAAM,CAAC;IACtC,QAAQ,uKAAC,CAAC,MAAM,GAAG,QAAQ;IAC3B,UAAU,uKAAC,CAAC,MAAM,GAAG,QAAQ;IAC7B,YAAY,uKAAC,CAAC,MAAM,GAAG,QAAQ;AACnC;AAEO,MAAM,yBAAyB,uKAAC,CAAC,MAAM,CAAC;IAC3C,cAAc,uKAAC,CAAC,MAAM,GAAG,QAAQ;IACjC,UAAU,uKAAC,CAAC,MAAM,GAAG,QAAQ;IAC7B,YAAY,uKAAC,CAAC,MAAM,GAAG,QAAQ;IAC/B,iBAAiB,uKAAC,CAAC,MAAM,GAAG,QAAQ;AACxC;AAEO,MAAM,oBAAoB,uKAAC,CAAC,MAAM,CAAC;IACtC,OAAO,uKAAC,CAAC,MAAM,GAAG,QAAQ;IAC1B,OAAO,uKAAC,CAAC,MAAM,GAAG,QAAQ;IAC1B,QAAQ,uKAAC,CAAC,MAAM,GAAG,QAAQ;AAC/B;AAEO,MAAM,iBAAiB,uKAAC,CAAC,MAAM,CAAC;IACrC,IAAI,uKAAC,CAAC,MAAM,GAAG,QAAQ;IACvB,YAAY,uKAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC9B,MAAM,uKAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IACxB,aAAa,uKAAC,CAAC,MAAM,GAAG,QAAQ;IAEhC,mBAAmB;IACnB,YAAY,uKAAC,CAAC,MAAM,GAAG,QAAQ;IAC/B,kBAAkB,uKAAC,CAAC,MAAM,GAAG,QAAQ;IACrC,YAAY,uKAAC,CAAC,MAAM,GAAG,QAAQ;IAC/B,gBAAgB,uKAAC,CAAC,MAAM,GAAG,QAAQ;IACnC,aAAa,kBAAkB,QAAQ;IACvC,aAAa,kBAAkB,QAAQ;IACvC,kBAAkB,uBAAuB,QAAQ;IAEjD,uBAAuB;IACvB,YAAY,uKAAC,CAAC,MAAM,GAAG,QAAQ;IAC/B,YAAY,uKAAC,CAAC,MAAM,GAAG,QAAQ;IAC/B,aAAa,uKAAC,CAAC,MAAM,GAAG,QAAQ;IAEhC,UAAU;IACV,QAAQ,uKAAC,CAAC,MAAM,GAAG,QAAQ;IAC3B,OAAO,uKAAC,CAAC,MAAM,GAAG,KAAK,GAAG,QAAQ,GAAG,EAAE,CAAC,uKAAC,CAAC,OAAO,CAAC;IAClD,SAAS,uKAAC,CAAC,MAAM,GAAG,QAAQ;IAE5B,eAAe;IACf,aAAa,kBAAkB,QAAQ;IAEvC,sBAAsB;IACtB,aAAa,uKAAC,CAAC,KAAK,CAAC,kBAAkB,QAAQ;IAC/C,OAAO,uKAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ;AACvC","debugId":null}},
    {"offset": {"line": 1225, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/finance/expense/new-employee-dialog.tsx"],"sourcesContent":["\n'use client';\n\nimport { useEffect, useState } from 'react';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\n\nimport { Button } from '@/components/ui/button';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from '@/components/ui/dialog';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Switch } from '@/components/ui/switch';\nimport { Label } from '@/components/ui/label';\nimport { useToast } from '@/hooks/use-toast';\nimport { addEmployeeData, generateNewEmployeeId } from '@/app/human-resource/employees/actions';\nimport { employeeSchema } from '@/app/human-resource/employees/schema';\n\ninterface NewEmployeeDialogProps {\n  isOpen: boolean;\n  onOpenChange: (isOpen: boolean) => void;\n}\n\nexport default function NewEmployeeDialog({ isOpen, onOpenChange }: NewEmployeeDialogProps) {\n  const { toast } = useToast();\n  const [autoGenerateId, setAutoGenerateId] = useState(true);\n\n  const form = useForm<z.infer<typeof employeeSchema>>({\n    resolver: zodResolver(employeeSchema),\n    defaultValues: {\n      employeeId: '',\n      name: '',\n      email: '',\n      mobile: '',\n      profession: '',\n      photo: '',\n    },\n  });\n\n  useEffect(() => {\n    if (isOpen && autoGenerateId) {\n      const fetchNewId = async () => {\n        const newId = await generateNewEmployeeId();\n        form.setValue('employeeId', newId);\n      };\n      fetchNewId();\n    } else if (!isOpen) {\n        form.reset();\n        setAutoGenerateId(true);\n    }\n  }, [isOpen, autoGenerateId, form]);\n\n  const handleToggleAutoGenerate = async (checked: boolean) => {\n    setAutoGenerateId(checked);\n    if (checked) {\n      const newId = await generateNewEmployeeId();\n      form.setValue('employeeId', newId);\n    } else {\n      form.setValue('employeeId', '');\n    }\n  };\n\n  const onSubmit = async (values: z.infer<typeof employeeSchema>) => {\n    try {\n      await addEmployeeData(values);\n      toast({ title: 'Success', description: 'Employee added successfully.' });\n      onOpenChange(false);\n    } catch (error) {\n      toast({ variant: 'destructive', title: 'Error', description: (error as Error).message });\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[600px]\">\n        <DialogHeader>\n          <DialogTitle>Add New Employee</DialogTitle>\n          <DialogDescription>Fill in the details to add a new employee to the system.</DialogDescription>\n        </DialogHeader>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4 pt-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                    control={form.control}\n                    name=\"employeeId\"\n                    render={({ field }) => (\n                        <FormItem>\n                        <FormLabel>Employee ID</FormLabel>\n                        <div className=\"flex items-center gap-4\">\n                            <FormControl>\n                                <Input {...field} disabled={autoGenerateId} />\n                            </FormControl>\n                            <div className=\"flex items-center gap-2\">\n                                <Switch\n                                    id=\"auto-generate-id-dialog\"\n                                    checked={autoGenerateId}\n                                    onCheckedChange={handleToggleAutoGenerate}\n                                />\n                                <Label htmlFor=\"auto-generate-id-dialog\">Auto</Label>\n                            </div>\n                        </div>\n                        <FormMessage />\n                        </FormItem>\n                    )}\n                />\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Full Name</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter full name\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email Address</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter email address\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"mobile\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Mobile Number</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter mobile number\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"profession\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Profession</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter profession\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n            <DialogFooter className=\"pt-4\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => onOpenChange(false)}>Cancel</Button>\n                <Button type=\"submit\">Save Employee</Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1654, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/finance/expense/advances-table.tsx"],"sourcesContent":["\n'use client';\n\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Clock, CheckCircle2, Ban } from \"lucide-react\";\n\nconst advancesData = [\n    { initials: 'AM', name: 'Alice Martin', role: 'sales • travel', amount: '$500.00', date: '2024-01-12', status: 'Approved' },\n    { initials: 'BR', name: 'Bob Roberts', role: 'marketing • event', amount: '$1000.00', date: '2024-01-10', status: 'Pending' },\n    { initials: 'CS', name: 'Charlie Stone', role: 'it • equipment', amount: '$750.00', date: '2024-01-09', status: 'Rejected' },\n];\n\nconst getBadgeClass = (status: string) => {\n    switch (status) {\n        case 'Pending': return 'bg-yellow-100 text-yellow-800 hover:bg-yellow-100/80 border-yellow-200';\n        case 'Approved': return 'bg-green-100 text-green-800 hover:bg-green-100/80 border-green-200';\n        case 'Rejected': return 'bg-red-100 text-red-800 hover:bg-red-100/80 border-red-200';\n        default: return 'bg-gray-100 text-gray-800 hover:bg-gray-100/80 border-gray-200';\n    }\n};\n\nexport default function AdvancesTable() {\n    return (\n        <Card>\n            <CardHeader>\n                <CardTitle>Advance Requests</CardTitle>\n                <CardDescription>Latest advance request submissions and updates.</CardDescription>\n            </CardHeader>\n            <CardContent>\n                <Table>\n                    <TableHeader>\n                        <TableRow>\n                            <TableHead>Employee</TableHead>\n                            <TableHead className=\"text-right\">Amount</TableHead>\n                            <TableHead className=\"hidden md:table-cell text-right\">Date</TableHead>\n                            <TableHead className=\"text-right\">Status</TableHead>\n                        </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                        {advancesData.map((advance, index) => (\n                            <TableRow key={index}>\n                                <TableCell>\n                                    <div className=\"flex items-center gap-4\">\n                                        <Avatar className=\"h-9 w-9\">\n                                            <AvatarFallback>{advance.initials}</AvatarFallback>\n                                        </Avatar>\n                                        <div>\n                                            <p className=\"font-medium\">{advance.name}</p>\n                                            <p className=\"text-sm text-muted-foreground\">{advance.role}</p>\n                                        </div>\n                                    </div>\n                                </TableCell>\n                                <TableCell className=\"text-right font-semibold\">{advance.amount}</TableCell>\n                                <TableCell className=\"hidden md:table-cell text-right\">{advance.date}</TableCell>\n                                <TableCell className=\"text-right\">\n                                    <Badge className={getBadgeClass(advance.status)} variant=\"outline\">\n                                        {advance.status === 'Pending' && <Clock className=\"mr-1 h-3 w-3\" />}\n                                        {advance.status === 'Approved' && <CheckCircle2 className=\"mr-1 h-3 w-3\" />}\n                                        {advance.status === 'Rejected' && <Ban className=\"mr-1 h-3 w-3\" />}\n                                        {advance.status}\n                                    </Badge>\n                                </TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </CardContent>\n        </Card>\n    );\n}\n"],"names":[],"mappings":";;;;;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AANA;;;;;;;AAQA,MAAM,eAAe;IACjB;QAAE,UAAU;QAAM,MAAM;QAAgB,MAAM;QAAkB,QAAQ;QAAW,MAAM;QAAc,QAAQ;IAAW;IAC1H;QAAE,UAAU;QAAM,MAAM;QAAe,MAAM;QAAqB,QAAQ;QAAY,MAAM;QAAc,QAAQ;IAAU;IAC5H;QAAE,UAAU;QAAM,MAAM;QAAiB,MAAM;QAAkB,QAAQ;QAAW,MAAM;QAAc,QAAQ;IAAW;CAC9H;AAED,MAAM,gBAAgB,CAAC;IACnB,OAAQ;QACJ,KAAK;YAAW,OAAO;QACvB,KAAK;YAAY,OAAO;QACxB,KAAK;YAAY,OAAO;QACxB;YAAS,OAAO;IACpB;AACJ;AAEe,SAAS;IACpB,qBACI,8OAAC,wIAAI;;0BACD,8OAAC,8IAAU;;kCACP,8OAAC,6IAAS;kCAAC;;;;;;kCACX,8OAAC,mJAAe;kCAAC;;;;;;;;;;;;0BAErB,8OAAC,+IAAW;0BACR,cAAA,8OAAC,0IAAK;;sCACF,8OAAC,gJAAW;sCACR,cAAA,8OAAC,6IAAQ;;kDACL,8OAAC,8IAAS;kDAAC;;;;;;kDACX,8OAAC,8IAAS;wCAAC,WAAU;kDAAa;;;;;;kDAClC,8OAAC,8IAAS;wCAAC,WAAU;kDAAkC;;;;;;kDACvD,8OAAC,8IAAS;wCAAC,WAAU;kDAAa;;;;;;;;;;;;;;;;;sCAG1C,8OAAC,8IAAS;sCACL,aAAa,GAAG,CAAC,CAAC,SAAS,sBACxB,8OAAC,6IAAQ;;sDACL,8OAAC,8IAAS;sDACN,cAAA,8OAAC;gDAAI,WAAU;;kEACX,8OAAC,4IAAM;wDAAC,WAAU;kEACd,cAAA,8OAAC,oJAAc;sEAAE,QAAQ,QAAQ;;;;;;;;;;;kEAErC,8OAAC;;0EACG,8OAAC;gEAAE,WAAU;0EAAe,QAAQ,IAAI;;;;;;0EACxC,8OAAC;gEAAE,WAAU;0EAAiC,QAAQ,IAAI;;;;;;;;;;;;;;;;;;;;;;;sDAItE,8OAAC,8IAAS;4CAAC,WAAU;sDAA4B,QAAQ,MAAM;;;;;;sDAC/D,8OAAC,8IAAS;4CAAC,WAAU;sDAAmC,QAAQ,IAAI;;;;;;sDACpE,8OAAC,8IAAS;4CAAC,WAAU;sDACjB,cAAA,8OAAC,0IAAK;gDAAC,WAAW,cAAc,QAAQ,MAAM;gDAAG,SAAQ;;oDACpD,QAAQ,MAAM,KAAK,2BAAa,8OAAC,6MAAK;wDAAC,WAAU;;;;;;oDACjD,QAAQ,MAAM,KAAK,4BAAc,8OAAC,qOAAY;wDAAC,WAAU;;;;;;oDACzD,QAAQ,MAAM,KAAK,4BAAc,8OAAC,uMAAG;wDAAC,WAAU;;;;;;oDAChD,QAAQ,MAAM;;;;;;;;;;;;;mCAnBZ;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6B3C","debugId":null}},
    {"offset": {"line": 1928, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/human-resource/employees/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { revalidatePath } from 'next/cache';\nimport { z } from 'zod';\nimport { employeeSchema, type Employee } from './schema';\n\nconst employeesFilePath = path.join(process.cwd(), 'src/app/human-resource/employees/employees-data.json');\n\n// Helper to read the JSON file\nasync function readEmployees(): Promise<Employee[]> {\n    try {\n        await fs.access(employeesFilePath);\n        const data = await fs.readFile(employeesFilePath, 'utf-8');\n        return JSON.parse(data) as Employee[];\n    } catch (error) {\n        // If the file doesn't exist, create it with an empty array\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            await fs.writeFile(employeesFilePath, JSON.stringify([], null, 2), 'utf-8');\n            return [];\n        }\n        throw error;\n    }\n}\n\n// Helper to write to the JSON file\nasync function writeEmployees(data: Employee[]) {\n    await fs.writeFile(employeesFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\n// --- Exported Server Actions ---\n\n/**\n * Fetches all employees.\n */\nexport async function getAllEmployees(): Promise<Employee[]> {\n    return await readEmployees();\n}\n\n/**\n * Generates a new unique employee ID.\n */\nexport async function generateNewEmployeeId(): Promise<string> {\n    const allEmployees = await readEmployees();\n    let maxNum = 0;\n    allEmployees.forEach(e => {\n        const match = e.employeeId.match(/^EMP-(\\d+)$/);\n        if (match) {\n            const num = parseInt(match[1], 10);\n            if (num > maxNum) {\n                maxNum = num;\n            }\n        }\n    });\n    return `EMP-${(maxNum + 1).toString().padStart(4, '0')}`;\n}\n\n/**\n * Adds a new employee to the database.\n */\nexport async function addEmployeeData(data: z.infer<typeof employeeSchema>) {\n    const validation = employeeSchema.safeParse(data);\n    if (!validation.success) {\n        throw new Error(validation.error.errors.map(e => e.message).join(', '));\n    }\n\n    const allEmployees = await readEmployees();\n    const employeeExists = allEmployees.some(e => e.employeeId === validation.data.employeeId);\n\n    if (employeeExists) {\n        throw new Error(`Employee with ID \"${validation.data.employeeId}\" already exists.`);\n    }\n\n    const newEmployee: Employee = {\n        ...validation.data,\n        id: `emp-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`,\n    };\n\n    allEmployees.push(newEmployee);\n    await writeEmployees(allEmployees);\n    revalidatePath('/human-resource/employees');\n    return { success: true, data: newEmployee };\n}\n\n/**\n * Updates an existing employee's data.\n */\nexport async function updateEmployeeData(id: string, data: Partial<Omit<Employee, 'id'>>) {\n    const validation = employeeSchema.partial().safeParse(data);\n    if (!validation.success) {\n        throw new Error(validation.error.errors.map(e => e.message).join(', '));\n    }\n\n    const allEmployees = await readEmployees();\n    const index = allEmployees.findIndex(e => e.id === id);\n\n    if (index === -1) {\n        throw new Error('Employee not found.');\n    }\n\n    allEmployees[index] = { ...allEmployees[index], ...validation.data };\n    await writeEmployees(allEmployees);\n    revalidatePath('/human-resource/employees');\n    return { success: true, data: allEmployees[index] };\n}\n\n\n/**\n * Fetches a single employee by their unique ID.\n */\nexport async function getEmployeeDataById(id: string): Promise<Employee | null> {\n    const allEmployees = await readEmployees();\n    return allEmployees.find(e => e.id === id) || null;\n}\n\n/**\n * Deletes an employee by their unique ID.\n */\nexport async function deleteEmployeeData(id: string) {\n    const allEmployees = await readEmployees();\n    const updatedEmployees = allEmployees.filter(e => e.id !== id);\n\n    if (allEmployees.length === updatedEmployees.length) {\n        return { success: false, error: 'Employee not found.' };\n    }\n\n    await writeEmployees(updatedEmployees);\n    revalidatePath('/human-resource/employees');\n    return { success: true };\n}\n\n/**\n * Fetches the change history for an employee.\n * This is a placeholder and returns a mock history.\n */\nexport async function getEmployeeHistory(id: string): Promise<any[]> {\n    // In a real application, you would fetch this from a database or a log file.\n    console.log(`Fetching history for employee ID: ${id}`);\n    return [\n        {\n            action: 'Employee Created',\n            changedBy: 'Admin',\n            changedAt: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000).toISOString(), // 10 days ago\n            changes: { name: { old: '', new: 'John Doe' }, email: { old: '', new: 'john.doe@example.com' } },\n        },\n        {\n            action: 'Details Updated',\n            changedBy: 'HR Manager',\n            changedAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(), // 2 days ago\n            changes: { profession: { old: 'Software Engineer', new: 'Senior Software Engineer' } },\n        },\n    ];\n}\n"],"names":[],"mappings":";;;;;;;IAqCsB,kBAAA,WAAA,GAAA,IAAA,+OAAA,EAAA,8CAAA,oOAAA,EAAA,KAAA,GAAA,0OAAA,EAAA","debugId":null}},
    {"offset": {"line": 1940, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/human-resource/employees/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { revalidatePath } from 'next/cache';\nimport { z } from 'zod';\nimport { employeeSchema, type Employee } from './schema';\n\nconst employeesFilePath = path.join(process.cwd(), 'src/app/human-resource/employees/employees-data.json');\n\n// Helper to read the JSON file\nasync function readEmployees(): Promise<Employee[]> {\n    try {\n        await fs.access(employeesFilePath);\n        const data = await fs.readFile(employeesFilePath, 'utf-8');\n        return JSON.parse(data) as Employee[];\n    } catch (error) {\n        // If the file doesn't exist, create it with an empty array\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            await fs.writeFile(employeesFilePath, JSON.stringify([], null, 2), 'utf-8');\n            return [];\n        }\n        throw error;\n    }\n}\n\n// Helper to write to the JSON file\nasync function writeEmployees(data: Employee[]) {\n    await fs.writeFile(employeesFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\n// --- Exported Server Actions ---\n\n/**\n * Fetches all employees.\n */\nexport async function getAllEmployees(): Promise<Employee[]> {\n    return await readEmployees();\n}\n\n/**\n * Generates a new unique employee ID.\n */\nexport async function generateNewEmployeeId(): Promise<string> {\n    const allEmployees = await readEmployees();\n    let maxNum = 0;\n    allEmployees.forEach(e => {\n        const match = e.employeeId.match(/^EMP-(\\d+)$/);\n        if (match) {\n            const num = parseInt(match[1], 10);\n            if (num > maxNum) {\n                maxNum = num;\n            }\n        }\n    });\n    return `EMP-${(maxNum + 1).toString().padStart(4, '0')}`;\n}\n\n/**\n * Adds a new employee to the database.\n */\nexport async function addEmployeeData(data: z.infer<typeof employeeSchema>) {\n    const validation = employeeSchema.safeParse(data);\n    if (!validation.success) {\n        throw new Error(validation.error.errors.map(e => e.message).join(', '));\n    }\n\n    const allEmployees = await readEmployees();\n    const employeeExists = allEmployees.some(e => e.employeeId === validation.data.employeeId);\n\n    if (employeeExists) {\n        throw new Error(`Employee with ID \"${validation.data.employeeId}\" already exists.`);\n    }\n\n    const newEmployee: Employee = {\n        ...validation.data,\n        id: `emp-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`,\n    };\n\n    allEmployees.push(newEmployee);\n    await writeEmployees(allEmployees);\n    revalidatePath('/human-resource/employees');\n    return { success: true, data: newEmployee };\n}\n\n/**\n * Updates an existing employee's data.\n */\nexport async function updateEmployeeData(id: string, data: Partial<Omit<Employee, 'id'>>) {\n    const validation = employeeSchema.partial().safeParse(data);\n    if (!validation.success) {\n        throw new Error(validation.error.errors.map(e => e.message).join(', '));\n    }\n\n    const allEmployees = await readEmployees();\n    const index = allEmployees.findIndex(e => e.id === id);\n\n    if (index === -1) {\n        throw new Error('Employee not found.');\n    }\n\n    allEmployees[index] = { ...allEmployees[index], ...validation.data };\n    await writeEmployees(allEmployees);\n    revalidatePath('/human-resource/employees');\n    return { success: true, data: allEmployees[index] };\n}\n\n\n/**\n * Fetches a single employee by their unique ID.\n */\nexport async function getEmployeeDataById(id: string): Promise<Employee | null> {\n    const allEmployees = await readEmployees();\n    return allEmployees.find(e => e.id === id) || null;\n}\n\n/**\n * Deletes an employee by their unique ID.\n */\nexport async function deleteEmployeeData(id: string) {\n    const allEmployees = await readEmployees();\n    const updatedEmployees = allEmployees.filter(e => e.id !== id);\n\n    if (allEmployees.length === updatedEmployees.length) {\n        return { success: false, error: 'Employee not found.' };\n    }\n\n    await writeEmployees(updatedEmployees);\n    revalidatePath('/human-resource/employees');\n    return { success: true };\n}\n\n/**\n * Fetches the change history for an employee.\n * This is a placeholder and returns a mock history.\n */\nexport async function getEmployeeHistory(id: string): Promise<any[]> {\n    // In a real application, you would fetch this from a database or a log file.\n    console.log(`Fetching history for employee ID: ${id}`);\n    return [\n        {\n            action: 'Employee Created',\n            changedBy: 'Admin',\n            changedAt: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000).toISOString(), // 10 days ago\n            changes: { name: { old: '', new: 'John Doe' }, email: { old: '', new: 'john.doe@example.com' } },\n        },\n        {\n            action: 'Details Updated',\n            changedBy: 'HR Manager',\n            changedAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(), // 2 days ago\n            changes: { profession: { old: 'Software Engineer', new: 'Senior Software Engineer' } },\n        },\n    ];\n}\n"],"names":[],"mappings":";;;;;;;IAwHsB,qBAAA,WAAA,GAAA,IAAA,+OAAA,EAAA,8CAAA,oOAAA,EAAA,KAAA,GAAA,0OAAA,EAAA","debugId":null}},
    {"offset": {"line": 1952, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/human-resource/employees/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { revalidatePath } from 'next/cache';\nimport { z } from 'zod';\nimport { employeeSchema, type Employee } from './schema';\n\nconst employeesFilePath = path.join(process.cwd(), 'src/app/human-resource/employees/employees-data.json');\n\n// Helper to read the JSON file\nasync function readEmployees(): Promise<Employee[]> {\n    try {\n        await fs.access(employeesFilePath);\n        const data = await fs.readFile(employeesFilePath, 'utf-8');\n        return JSON.parse(data) as Employee[];\n    } catch (error) {\n        // If the file doesn't exist, create it with an empty array\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            await fs.writeFile(employeesFilePath, JSON.stringify([], null, 2), 'utf-8');\n            return [];\n        }\n        throw error;\n    }\n}\n\n// Helper to write to the JSON file\nasync function writeEmployees(data: Employee[]) {\n    await fs.writeFile(employeesFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\n// --- Exported Server Actions ---\n\n/**\n * Fetches all employees.\n */\nexport async function getAllEmployees(): Promise<Employee[]> {\n    return await readEmployees();\n}\n\n/**\n * Generates a new unique employee ID.\n */\nexport async function generateNewEmployeeId(): Promise<string> {\n    const allEmployees = await readEmployees();\n    let maxNum = 0;\n    allEmployees.forEach(e => {\n        const match = e.employeeId.match(/^EMP-(\\d+)$/);\n        if (match) {\n            const num = parseInt(match[1], 10);\n            if (num > maxNum) {\n                maxNum = num;\n            }\n        }\n    });\n    return `EMP-${(maxNum + 1).toString().padStart(4, '0')}`;\n}\n\n/**\n * Adds a new employee to the database.\n */\nexport async function addEmployeeData(data: z.infer<typeof employeeSchema>) {\n    const validation = employeeSchema.safeParse(data);\n    if (!validation.success) {\n        throw new Error(validation.error.errors.map(e => e.message).join(', '));\n    }\n\n    const allEmployees = await readEmployees();\n    const employeeExists = allEmployees.some(e => e.employeeId === validation.data.employeeId);\n\n    if (employeeExists) {\n        throw new Error(`Employee with ID \"${validation.data.employeeId}\" already exists.`);\n    }\n\n    const newEmployee: Employee = {\n        ...validation.data,\n        id: `emp-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`,\n    };\n\n    allEmployees.push(newEmployee);\n    await writeEmployees(allEmployees);\n    revalidatePath('/human-resource/employees');\n    return { success: true, data: newEmployee };\n}\n\n/**\n * Updates an existing employee's data.\n */\nexport async function updateEmployeeData(id: string, data: Partial<Omit<Employee, 'id'>>) {\n    const validation = employeeSchema.partial().safeParse(data);\n    if (!validation.success) {\n        throw new Error(validation.error.errors.map(e => e.message).join(', '));\n    }\n\n    const allEmployees = await readEmployees();\n    const index = allEmployees.findIndex(e => e.id === id);\n\n    if (index === -1) {\n        throw new Error('Employee not found.');\n    }\n\n    allEmployees[index] = { ...allEmployees[index], ...validation.data };\n    await writeEmployees(allEmployees);\n    revalidatePath('/human-resource/employees');\n    return { success: true, data: allEmployees[index] };\n}\n\n\n/**\n * Fetches a single employee by their unique ID.\n */\nexport async function getEmployeeDataById(id: string): Promise<Employee | null> {\n    const allEmployees = await readEmployees();\n    return allEmployees.find(e => e.id === id) || null;\n}\n\n/**\n * Deletes an employee by their unique ID.\n */\nexport async function deleteEmployeeData(id: string) {\n    const allEmployees = await readEmployees();\n    const updatedEmployees = allEmployees.filter(e => e.id !== id);\n\n    if (allEmployees.length === updatedEmployees.length) {\n        return { success: false, error: 'Employee not found.' };\n    }\n\n    await writeEmployees(updatedEmployees);\n    revalidatePath('/human-resource/employees');\n    return { success: true };\n}\n\n/**\n * Fetches the change history for an employee.\n * This is a placeholder and returns a mock history.\n */\nexport async function getEmployeeHistory(id: string): Promise<any[]> {\n    // In a real application, you would fetch this from a database or a log file.\n    console.log(`Fetching history for employee ID: ${id}`);\n    return [\n        {\n            action: 'Employee Created',\n            changedBy: 'Admin',\n            changedAt: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000).toISOString(), // 10 days ago\n            changes: { name: { old: '', new: 'John Doe' }, email: { old: '', new: 'john.doe@example.com' } },\n        },\n        {\n            action: 'Details Updated',\n            changedBy: 'HR Manager',\n            changedAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(), // 2 days ago\n            changes: { profession: { old: 'Software Engineer', new: 'Senior Software Engineer' } },\n        },\n    ];\n}\n"],"names":[],"mappings":";;;;;;;IAyFsB,qBAAA,WAAA,GAAA,IAAA,+OAAA,EAAA,8CAAA,oOAAA,EAAA,KAAA,GAAA,0OAAA,EAAA","debugId":null}},
    {"offset": {"line": 1964, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/human-resource/employees/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { revalidatePath } from 'next/cache';\nimport { z } from 'zod';\nimport { employeeSchema, type Employee } from './schema';\n\nconst employeesFilePath = path.join(process.cwd(), 'src/app/human-resource/employees/employees-data.json');\n\n// Helper to read the JSON file\nasync function readEmployees(): Promise<Employee[]> {\n    try {\n        await fs.access(employeesFilePath);\n        const data = await fs.readFile(employeesFilePath, 'utf-8');\n        return JSON.parse(data) as Employee[];\n    } catch (error) {\n        // If the file doesn't exist, create it with an empty array\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            await fs.writeFile(employeesFilePath, JSON.stringify([], null, 2), 'utf-8');\n            return [];\n        }\n        throw error;\n    }\n}\n\n// Helper to write to the JSON file\nasync function writeEmployees(data: Employee[]) {\n    await fs.writeFile(employeesFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\n// --- Exported Server Actions ---\n\n/**\n * Fetches all employees.\n */\nexport async function getAllEmployees(): Promise<Employee[]> {\n    return await readEmployees();\n}\n\n/**\n * Generates a new unique employee ID.\n */\nexport async function generateNewEmployeeId(): Promise<string> {\n    const allEmployees = await readEmployees();\n    let maxNum = 0;\n    allEmployees.forEach(e => {\n        const match = e.employeeId.match(/^EMP-(\\d+)$/);\n        if (match) {\n            const num = parseInt(match[1], 10);\n            if (num > maxNum) {\n                maxNum = num;\n            }\n        }\n    });\n    return `EMP-${(maxNum + 1).toString().padStart(4, '0')}`;\n}\n\n/**\n * Adds a new employee to the database.\n */\nexport async function addEmployeeData(data: z.infer<typeof employeeSchema>) {\n    const validation = employeeSchema.safeParse(data);\n    if (!validation.success) {\n        throw new Error(validation.error.errors.map(e => e.message).join(', '));\n    }\n\n    const allEmployees = await readEmployees();\n    const employeeExists = allEmployees.some(e => e.employeeId === validation.data.employeeId);\n\n    if (employeeExists) {\n        throw new Error(`Employee with ID \"${validation.data.employeeId}\" already exists.`);\n    }\n\n    const newEmployee: Employee = {\n        ...validation.data,\n        id: `emp-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`,\n    };\n\n    allEmployees.push(newEmployee);\n    await writeEmployees(allEmployees);\n    revalidatePath('/human-resource/employees');\n    return { success: true, data: newEmployee };\n}\n\n/**\n * Updates an existing employee's data.\n */\nexport async function updateEmployeeData(id: string, data: Partial<Omit<Employee, 'id'>>) {\n    const validation = employeeSchema.partial().safeParse(data);\n    if (!validation.success) {\n        throw new Error(validation.error.errors.map(e => e.message).join(', '));\n    }\n\n    const allEmployees = await readEmployees();\n    const index = allEmployees.findIndex(e => e.id === id);\n\n    if (index === -1) {\n        throw new Error('Employee not found.');\n    }\n\n    allEmployees[index] = { ...allEmployees[index], ...validation.data };\n    await writeEmployees(allEmployees);\n    revalidatePath('/human-resource/employees');\n    return { success: true, data: allEmployees[index] };\n}\n\n\n/**\n * Fetches a single employee by their unique ID.\n */\nexport async function getEmployeeDataById(id: string): Promise<Employee | null> {\n    const allEmployees = await readEmployees();\n    return allEmployees.find(e => e.id === id) || null;\n}\n\n/**\n * Deletes an employee by their unique ID.\n */\nexport async function deleteEmployeeData(id: string) {\n    const allEmployees = await readEmployees();\n    const updatedEmployees = allEmployees.filter(e => e.id !== id);\n\n    if (allEmployees.length === updatedEmployees.length) {\n        return { success: false, error: 'Employee not found.' };\n    }\n\n    await writeEmployees(updatedEmployees);\n    revalidatePath('/human-resource/employees');\n    return { success: true };\n}\n\n/**\n * Fetches the change history for an employee.\n * This is a placeholder and returns a mock history.\n */\nexport async function getEmployeeHistory(id: string): Promise<any[]> {\n    // In a real application, you would fetch this from a database or a log file.\n    console.log(`Fetching history for employee ID: ${id}`);\n    return [\n        {\n            action: 'Employee Created',\n            changedBy: 'Admin',\n            changedAt: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000).toISOString(), // 10 days ago\n            changes: { name: { old: '', new: 'John Doe' }, email: { old: '', new: 'john.doe@example.com' } },\n        },\n        {\n            action: 'Details Updated',\n            changedBy: 'HR Manager',\n            changedAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(), // 2 days ago\n            changes: { profession: { old: 'Software Engineer', new: 'Senior Software Engineer' } },\n        },\n    ];\n}\n"],"names":[],"mappings":";;;;;;;IAgHsB,sBAAA,WAAA,GAAA,IAAA,+OAAA,EAAA,8CAAA,oOAAA,EAAA,KAAA,GAAA,0OAAA,EAAA","debugId":null}},
    {"offset": {"line": 1976, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/finance/expense/edit-employee-dialog.tsx"],"sourcesContent":["\n'use client';\n\nimport { useEffect, useState } from 'react';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\n\nimport { Button } from '@/components/ui/button';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from '@/components/ui/dialog';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { useToast } from '@/hooks/use-toast';\nimport { updateEmployeeData, getEmployeeDataById } from '@/app/human-resource/employees/actions';\nimport { employeeSchema, type Employee } from '@/app/human-resource/employees/schema';\n\ninterface EditEmployeeDialogProps {\n  isOpen: boolean;\n  onOpenChange: (isOpen: boolean) => void;\n  employeeId: string | null;\n}\n\nexport default function EditEmployeeDialog({ isOpen, onOpenChange, employeeId }: EditEmployeeDialogProps) {\n  const { toast } = useToast();\n  const form = useForm<z.infer<typeof employeeSchema>>({\n    resolver: zodResolver(employeeSchema),\n    defaultValues: {\n      employeeId: '',\n      name: '',\n      email: '',\n      mobile: '',\n      profession: '',\n    },\n  });\n\n  useEffect(() => {\n    if (isOpen && employeeId) {\n      const fetchEmployee = async () => {\n        const employee = await getEmployeeDataById(employeeId);\n        if (employee) {\n          form.reset(employee);\n        }\n      };\n      fetchEmployee();\n    } else if (!isOpen) {\n        form.reset();\n    }\n  }, [isOpen, employeeId, form]);\n\n  const onSubmit = async (values: z.infer<typeof employeeSchema>) => {\n    if (!employeeId) return;\n    try {\n      await updateEmployeeData(employeeId, values);\n      toast({ title: 'Success', description: 'Employee updated successfully.' });\n      onOpenChange(false);\n    } catch (error) {\n      toast({ variant: 'destructive', title: 'Error', description: (error as Error).message });\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[600px]\">\n        <DialogHeader>\n          <DialogTitle>Edit Employee</DialogTitle>\n          <DialogDescription>Update the employee details below.</DialogDescription>\n        </DialogHeader>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4 pt-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"employeeId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Employee ID</FormLabel>\n                    <FormControl>\n                      <Input {...field} disabled />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Full Name</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter full name\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email Address</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter email address\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"mobile\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Mobile Number</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter mobile number\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"profession\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Profession</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter profession\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n            <DialogFooter className=\"pt-4\">\n              <Button type=\"button\" variant=\"outline\" onClick={() => onOpenChange(false)}>Cancel</Button>\n              <Button type=\"submit\">Save Changes</Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n"],"names":[],"mappings":";;;;;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAbA;;;;;;;;;;;;AAqBe,SAAS,mBAAmB,EAAE,MAAM,EAAE,YAAY,EAAE,UAAU,EAA2B;IACtG,MAAM,EAAE,KAAK,EAAE,GAAG,IAAA,wIAAQ;IAC1B,MAAM,OAAO,IAAA,yKAAO,EAAiC;QACnD,UAAU,IAAA,6KAAW,EAAC,wKAAc;QACpC,eAAe;YACb,YAAY;YACZ,MAAM;YACN,OAAO;YACP,QAAQ;YACR,YAAY;QACd;IACF;IAEA,IAAA,kNAAS,EAAC;QACR,IAAI,UAAU,YAAY;YACxB,MAAM,gBAAgB;gBACpB,MAAM,WAAW,MAAM,IAAA,2MAAmB,EAAC;gBAC3C,IAAI,UAAU;oBACZ,KAAK,KAAK,CAAC;gBACb;YACF;YACA;QACF,OAAO,IAAI,CAAC,QAAQ;YAChB,KAAK,KAAK;QACd;IACF,GAAG;QAAC;QAAQ;QAAY;KAAK;IAE7B,MAAM,WAAW,OAAO;QACtB,IAAI,CAAC,YAAY;QACjB,IAAI;YACF,MAAM,IAAA,0MAAkB,EAAC,YAAY;YACrC,MAAM;gBAAE,OAAO;gBAAW,aAAa;YAAiC;YACxE,aAAa;QACf,EAAE,OAAO,OAAO;YACd,MAAM;gBAAE,SAAS;gBAAe,OAAO;gBAAS,aAAa,AAAC,MAAgB,OAAO;YAAC;QACxF;IACF;IAEA,qBACE,8OAAC,4IAAM;QAAC,MAAM;QAAQ,cAAc;kBAClC,cAAA,8OAAC,mJAAa;YAAC,WAAU;;8BACvB,8OAAC,kJAAY;;sCACX,8OAAC,iJAAW;sCAAC;;;;;;sCACb,8OAAC,uJAAiB;sCAAC;;;;;;;;;;;;8BAErB,8OAAC,wIAAI;oBAAE,GAAG,IAAI;8BACZ,cAAA,8OAAC;wBAAK,UAAU,KAAK,YAAY,CAAC;wBAAW,WAAU;;0CACrD,8OAAC;gCAAI,WAAU;;kDACb,8OAAC,6IAAS;wCACR,SAAS,KAAK,OAAO;wCACrB,MAAK;wCACL,QAAQ,CAAC,EAAE,KAAK,EAAE,iBAChB,8OAAC,4IAAQ;;kEACP,8OAAC,6IAAS;kEAAC;;;;;;kEACX,8OAAC,+IAAW;kEACV,cAAA,8OAAC,0IAAK;4DAAE,GAAG,KAAK;4DAAE,QAAQ;;;;;;;;;;;kEAE5B,8OAAC,+IAAW;;;;;;;;;;;;;;;;kDAIlB,8OAAC,6IAAS;wCACR,SAAS,KAAK,OAAO;wCACrB,MAAK;wCACL,QAAQ,CAAC,EAAE,KAAK,EAAE,iBAChB,8OAAC,4IAAQ;;kEACP,8OAAC,6IAAS;kEAAC;;;;;;kEACX,8OAAC,+IAAW;kEACV,cAAA,8OAAC,0IAAK;4DAAC,aAAY;4DAAmB,GAAG,KAAK;;;;;;;;;;;kEAEhD,8OAAC,+IAAW;;;;;;;;;;;;;;;;kDAIlB,8OAAC,6IAAS;wCACR,SAAS,KAAK,OAAO;wCACrB,MAAK;wCACL,QAAQ,CAAC,EAAE,KAAK,EAAE,iBAChB,8OAAC,4IAAQ;;kEACP,8OAAC,6IAAS;kEAAC;;;;;;kEACX,8OAAC,+IAAW;kEACV,cAAA,8OAAC,0IAAK;4DAAC,aAAY;4DAAuB,GAAG,KAAK;;;;;;;;;;;kEAEpD,8OAAC,+IAAW;;;;;;;;;;;;;;;;kDAIlB,8OAAC,6IAAS;wCACR,SAAS,KAAK,OAAO;wCACrB,MAAK;wCACL,QAAQ,CAAC,EAAE,KAAK,EAAE,iBAChB,8OAAC,4IAAQ;;kEACP,8OAAC,6IAAS;kEAAC;;;;;;kEACX,8OAAC,+IAAW;kEACV,cAAA,8OAAC,0IAAK;4DAAC,aAAY;4DAAuB,GAAG,KAAK;;;;;;;;;;;kEAEpD,8OAAC,+IAAW;;;;;;;;;;;;;;;;kDAIlB,8OAAC,6IAAS;wCACR,SAAS,KAAK,OAAO;wCACrB,MAAK;wCACL,QAAQ,CAAC,EAAE,KAAK,EAAE,iBAChB,8OAAC,4IAAQ;;kEACP,8OAAC,6IAAS;kEAAC;;;;;;kEACX,8OAAC,+IAAW;kEACV,cAAA,8OAAC,0IAAK;4DAAC,aAAY;4DAAoB,GAAG,KAAK;;;;;;;;;;;kEAEjD,8OAAC,+IAAW;;;;;;;;;;;;;;;;;;;;;;0CAKpB,8OAAC,kJAAY;gCAAC,WAAU;;kDACtB,8OAAC,4IAAM;wCAAC,MAAK;wCAAS,SAAQ;wCAAU,SAAS,IAAM,aAAa;kDAAQ;;;;;;kDAC5E,8OAAC,4IAAM;wCAAC,MAAK;kDAAS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOpC","debugId":null}},
    {"offset": {"line": 2357, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/human-resource/employees/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { revalidatePath } from 'next/cache';\nimport { z } from 'zod';\nimport { employeeSchema, type Employee } from './schema';\n\nconst employeesFilePath = path.join(process.cwd(), 'src/app/human-resource/employees/employees-data.json');\n\n// Helper to read the JSON file\nasync function readEmployees(): Promise<Employee[]> {\n    try {\n        await fs.access(employeesFilePath);\n        const data = await fs.readFile(employeesFilePath, 'utf-8');\n        return JSON.parse(data) as Employee[];\n    } catch (error) {\n        // If the file doesn't exist, create it with an empty array\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            await fs.writeFile(employeesFilePath, JSON.stringify([], null, 2), 'utf-8');\n            return [];\n        }\n        throw error;\n    }\n}\n\n// Helper to write to the JSON file\nasync function writeEmployees(data: Employee[]) {\n    await fs.writeFile(employeesFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\n// --- Exported Server Actions ---\n\n/**\n * Fetches all employees.\n */\nexport async function getAllEmployees(): Promise<Employee[]> {\n    return await readEmployees();\n}\n\n/**\n * Generates a new unique employee ID.\n */\nexport async function generateNewEmployeeId(): Promise<string> {\n    const allEmployees = await readEmployees();\n    let maxNum = 0;\n    allEmployees.forEach(e => {\n        const match = e.employeeId.match(/^EMP-(\\d+)$/);\n        if (match) {\n            const num = parseInt(match[1], 10);\n            if (num > maxNum) {\n                maxNum = num;\n            }\n        }\n    });\n    return `EMP-${(maxNum + 1).toString().padStart(4, '0')}`;\n}\n\n/**\n * Adds a new employee to the database.\n */\nexport async function addEmployeeData(data: z.infer<typeof employeeSchema>) {\n    const validation = employeeSchema.safeParse(data);\n    if (!validation.success) {\n        throw new Error(validation.error.errors.map(e => e.message).join(', '));\n    }\n\n    const allEmployees = await readEmployees();\n    const employeeExists = allEmployees.some(e => e.employeeId === validation.data.employeeId);\n\n    if (employeeExists) {\n        throw new Error(`Employee with ID \"${validation.data.employeeId}\" already exists.`);\n    }\n\n    const newEmployee: Employee = {\n        ...validation.data,\n        id: `emp-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`,\n    };\n\n    allEmployees.push(newEmployee);\n    await writeEmployees(allEmployees);\n    revalidatePath('/human-resource/employees');\n    return { success: true, data: newEmployee };\n}\n\n/**\n * Updates an existing employee's data.\n */\nexport async function updateEmployeeData(id: string, data: Partial<Omit<Employee, 'id'>>) {\n    const validation = employeeSchema.partial().safeParse(data);\n    if (!validation.success) {\n        throw new Error(validation.error.errors.map(e => e.message).join(', '));\n    }\n\n    const allEmployees = await readEmployees();\n    const index = allEmployees.findIndex(e => e.id === id);\n\n    if (index === -1) {\n        throw new Error('Employee not found.');\n    }\n\n    allEmployees[index] = { ...allEmployees[index], ...validation.data };\n    await writeEmployees(allEmployees);\n    revalidatePath('/human-resource/employees');\n    return { success: true, data: allEmployees[index] };\n}\n\n\n/**\n * Fetches a single employee by their unique ID.\n */\nexport async function getEmployeeDataById(id: string): Promise<Employee | null> {\n    const allEmployees = await readEmployees();\n    return allEmployees.find(e => e.id === id) || null;\n}\n\n/**\n * Deletes an employee by their unique ID.\n */\nexport async function deleteEmployeeData(id: string) {\n    const allEmployees = await readEmployees();\n    const updatedEmployees = allEmployees.filter(e => e.id !== id);\n\n    if (allEmployees.length === updatedEmployees.length) {\n        return { success: false, error: 'Employee not found.' };\n    }\n\n    await writeEmployees(updatedEmployees);\n    revalidatePath('/human-resource/employees');\n    return { success: true };\n}\n\n/**\n * Fetches the change history for an employee.\n * This is a placeholder and returns a mock history.\n */\nexport async function getEmployeeHistory(id: string): Promise<any[]> {\n    // In a real application, you would fetch this from a database or a log file.\n    console.log(`Fetching history for employee ID: ${id}`);\n    return [\n        {\n            action: 'Employee Created',\n            changedBy: 'Admin',\n            changedAt: new Date(Date.now() - 10 * 24 * 60 * 60 * 1000).toISOString(), // 10 days ago\n            changes: { name: { old: '', new: 'John Doe' }, email: { old: '', new: 'john.doe@example.com' } },\n        },\n        {\n            action: 'Details Updated',\n            changedBy: 'HR Manager',\n            changedAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(), // 2 days ago\n            changes: { profession: { old: 'Software Engineer', new: 'Senior Software Engineer' } },\n        },\n    ];\n}\n"],"names":[],"mappings":";;;;;;;IAyIsB,qBAAA,WAAA,GAAA,IAAA,+OAAA,EAAA,8CAAA,oOAAA,EAAA,KAAA,GAAA,0OAAA,EAAA","debugId":null}},
    {"offset": {"line": 2369, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/finance/expense/employee-history-dialog.tsx"],"sourcesContent":["\n'use client';\n\nimport { useEffect, useState, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from '@/components/ui/dialog';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { getEmployeeHistory } from '@/app/human-resource/employees/actions';\nimport { useReactToPrint } from 'react-to-print';\n\ninterface EmployeeHistoryDialogProps {\n  isOpen: boolean;\n  onOpenChange: (isOpen: boolean) => void;\n  employeeId: string | null;\n}\n\nexport default function EmployeeHistoryDialog({ isOpen, onOpenChange, employeeId }: EmployeeHistoryDialogProps) {\n  const [history, setHistory] = useState<any[]>([]);\n  const componentRef = useRef(null);\n\n  useEffect(() => {\n    if (isOpen && employeeId) {\n      const fetchHistory = async () => {\n        const employeeHistory = await getEmployeeHistory(employeeId);\n        setHistory(employeeHistory);\n      };\n      fetchHistory();\n    }\n  }, [isOpen, employeeId]);\n\n  const handlePrint = useReactToPrint({\n    content: () => componentRef.current,\n  });\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[800px]\">\n        <DialogHeader>\n          <DialogTitle>Employee History</DialogTitle>\n          <DialogDescription>View the change history for the selected employee.</DialogDescription>\n        </DialogHeader>\n        <div ref={componentRef} className=\"p-4\">\n            <Table>\n                <TableHeader>\n                <TableRow>\n                    <TableHead>Action</TableHead>\n                    <TableHead>Changed By</TableHead>\n                    <TableHead>Changed At</TableHead>\n                    <TableHead>Changes</TableHead>\n                </TableRow>\n                </TableHeader>\n                <TableBody>\n                {history.map((entry, index) => (\n                    <TableRow key={index}>\n                    <TableCell>{entry.action}</TableCell>\n                    <TableCell>{entry.changedBy}</TableCell>\n                    <TableCell>{new Date(entry.changedAt).toLocaleString()}</TableCell>\n                    <TableCell>\n                        <pre className=\"whitespace-pre-wrap text-xs\">\n                        {JSON.stringify(entry.changes, null, 2)}\n                        </pre>\n                    </TableCell>\n                    </TableRow>\n                ))}\n                </TableBody>\n            </Table>\n        </div>\n        <DialogFooter className=\"pt-4\">\n            <Button type=\"button\" variant=\"outline\" onClick={handlePrint}>Print</Button>\n            <Button type=\"button\" onClick={() => onOpenChange(false)}>Close</Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n"],"names":[],"mappings":";;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AAPA;;;;;;;;AAee,SAAS,sBAAsB,EAAE,MAAM,EAAE,YAAY,EAAE,UAAU,EAA8B;IAC5G,MAAM,CAAC,SAAS,WAAW,GAAG,IAAA,iNAAQ,EAAQ,EAAE;IAChD,MAAM,eAAe,IAAA,+MAAM,EAAC;IAE5B,IAAA,kNAAS,EAAC;QACR,IAAI,UAAU,YAAY;YACxB,MAAM,eAAe;gBACnB,MAAM,kBAAkB,MAAM,IAAA,0MAAkB,EAAC;gBACjD,WAAW;YACb;YACA;QACF;IACF,GAAG;QAAC;QAAQ;KAAW;IAEvB,MAAM,cAAc,IAAA,uKAAe,EAAC;QAClC,SAAS,IAAM,aAAa,OAAO;IACrC;IAEA,qBACE,8OAAC,4IAAM;QAAC,MAAM;QAAQ,cAAc;kBAClC,cAAA,8OAAC,mJAAa;YAAC,WAAU;;8BACvB,8OAAC,kJAAY;;sCACX,8OAAC,iJAAW;sCAAC;;;;;;sCACb,8OAAC,uJAAiB;sCAAC;;;;;;;;;;;;8BAErB,8OAAC;oBAAI,KAAK;oBAAc,WAAU;8BAC9B,cAAA,8OAAC,0IAAK;;0CACF,8OAAC,gJAAW;0CACZ,cAAA,8OAAC,6IAAQ;;sDACL,8OAAC,8IAAS;sDAAC;;;;;;sDACX,8OAAC,8IAAS;sDAAC;;;;;;sDACX,8OAAC,8IAAS;sDAAC;;;;;;sDACX,8OAAC,8IAAS;sDAAC;;;;;;;;;;;;;;;;;0CAGf,8OAAC,8IAAS;0CACT,QAAQ,GAAG,CAAC,CAAC,OAAO,sBACjB,8OAAC,6IAAQ;;0DACT,8OAAC,8IAAS;0DAAE,MAAM,MAAM;;;;;;0DACxB,8OAAC,8IAAS;0DAAE,MAAM,SAAS;;;;;;0DAC3B,8OAAC,8IAAS;0DAAE,IAAI,KAAK,MAAM,SAAS,EAAE,cAAc;;;;;;0DACpD,8OAAC,8IAAS;0DACN,cAAA,8OAAC;oDAAI,WAAU;8DACd,KAAK,SAAS,CAAC,MAAM,OAAO,EAAE,MAAM;;;;;;;;;;;;uCAN1B;;;;;;;;;;;;;;;;;;;;;8BAc3B,8OAAC,kJAAY;oBAAC,WAAU;;sCACpB,8OAAC,4IAAM;4BAAC,MAAK;4BAAS,SAAQ;4BAAU,SAAS;sCAAa;;;;;;sCAC9D,8OAAC,4IAAM;4BAAC,MAAK;4BAAS,SAAS,IAAM,aAAa;sCAAQ;;;;;;;;;;;;;;;;;;;;;;;AAKtE","debugId":null}},
    {"offset": {"line": 2585, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/finance/expense/employee-list.tsx"],"sourcesContent":["\n'use client';\n\nimport { useState, useEffect, useTransition } from 'react';\nimport { MoreHorizontal, Edit, Trash2, History, Printer } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport { Badge } from '@/components/ui/badge';\nimport { useToast } from '@/hooks/use-toast';\nimport { getAllEmployees, deleteEmployeeData } from '@/app/human-resource/employees/actions';\nimport type { Employee } from '@/app/human-resource/employees/schema';\nimport EditEmployeeDialog from './edit-employee-dialog';\nimport EmployeeHistoryDialog from './employee-history-dialog';\n\nexport default function EmployeeList() {\n  const { toast } = useToast();\n  const [employees, setEmployees] = useState<Employee[]>([]);\n  const [isEditOpen, setIsEditOpen] = useState(false);\n  const [isHistoryOpen, setIsHistoryOpen] = useState(false);\n  const [selectedEmployeeId, setSelectedEmployeeId] = useState<string | null>(null);\n  const [isPending, startTransition] = useTransition();\n\n  const fetchEmployees = async () => {\n    const allEmployees = await getAllEmployees();\n    setEmployees(allEmployees);\n  };\n\n  useEffect(() => {\n    fetchEmployees();\n  }, []);\n\n  const handleEdit = (employeeId: string) => {\n    setSelectedEmployeeId(employeeId);\n    setIsEditOpen(true);\n  };\n\n  const handleDelete = (employeeId: string) => {\n    startTransition(async () => {\n      try {\n        await deleteEmployeeData(employeeId);\n        await fetchEmployees(); // Refresh the list\n        toast({ title: 'Success', description: 'Employee deleted successfully.' });\n      } catch (error) {\n        toast({ variant: 'destructive', title: 'Error', description: (error as Error).message });\n      }\n    });\n  };\n\n  const handleViewHistory = (employeeId: string) => {\n    setSelectedEmployeeId(employeeId);\n    setIsHistoryOpen(true);\n  };\n\n  const handlePrintHistory = (employeeId: string) => {\n    // This will be handled inside the EmployeeHistoryDialog\n    setSelectedEmployeeId(employeeId);\n    setIsHistoryOpen(true);\n  };\n\n  return (\n    <>\n      <EditEmployeeDialog\n        isOpen={isEditOpen}\n        onOpenChange={(isOpen) => {\n          setIsEditOpen(isOpen);\n          if (!isOpen) fetchEmployees(); // Refresh data on close\n        }}\n        employeeId={selectedEmployeeId}\n      />\n      <EmployeeHistoryDialog\n        isOpen={isHistoryOpen}\n        onOpenChange={setIsHistoryOpen}\n        employeeId={selectedEmployeeId}\n      />\n      <Table>\n        <TableHeader>\n          <TableRow>\n            <TableHead>Employee ID</TableHead>\n            <TableHead>Name</TableHead>\n            <TableHead>Email</TableHead>\n            <TableHead>Mobile</TableHead>\n            <TableHead>Profession</TableHead>\n            <TableHead>Actions</TableHead>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {employees.map((employee) => (\n            <TableRow key={employee.id}>\n              <TableCell>{employee.employeeId}</TableCell>\n              <TableCell>{employee.name}</TableCell>\n              <TableCell>{employee.email}</TableCell>\n              <TableCell>{employee.mobile}</TableCell>\n              <TableCell>\n                <Badge>{employee.profession}</Badge>\n              </TableCell>\n              <TableCell>\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                      <span className=\"sr-only\">Open menu</span>\n                      <MoreHorizontal className=\"h-4 w-4\" />\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\">\n                    <DropdownMenuItem onClick={() => handleEdit(employee.id!)}>\n                      <Edit className=\"mr-2 h-4 w-4\" />\n                      <span>Edit</span>\n                    </DropdownMenuItem>\n                    <DropdownMenuItem onClick={() => handleDelete(employee.id!)} disabled={isPending}>\n                      <Trash2 className=\"mr-2 h-4 w-4\" />\n                      <span>Delete</span>\n                    </DropdownMenuItem>\n                    <DropdownMenuItem onClick={() => handleViewHistory(employee.id!)}>\n                      <History className=\"mr-2 h-4 w-4\" />\n                      <span>View History</span>\n                    </DropdownMenuItem>\n                    <DropdownMenuItem onClick={() => handlePrintHistory(employee.id!)}>\n                      <Printer className=\"mr-2 h-4 w-4\" />\n                      <span>Print History</span>\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2959, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/finance/expense/page.tsx"],"sourcesContent":["\n'use client';\n\nimport { useState } from 'react';\nimport { ArrowUpRight, CheckCircle2, Clock, DollarSign, Users, Wallet, Plus } from 'lucide-react';\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport NewExpenseDialog from './new-expense-dialog';\nimport NewEmployeeDialog from './new-employee-dialog';\nimport AdvancesTable from './advances-table';\nimport EmployeeList from './employee-list';\n\nconst statCards = [\n    { title: 'Total Expenses', value: '$45,231.00', change: '+12.5% from last month', icon: <DollarSign className=\"h-6 w-6 text-muted-foreground\" /> },\n    { title: 'Pending Approvals', value: '23', change: '-8.2% from last month', icon: <Clock className=\"h-6 w-6 text-muted-foreground\" /> },\n    { title: 'Outstanding Advances', value: '$12,430.00', change: '+5.4% from last month', icon: <ArrowUpRight className=\"h-6 w-6 text-muted-foreground\" /> },\n    { title: 'Active Employees', value: '156', change: '+2.1% from last month', icon: <Users className=\"h-6 w-6 text-muted-foreground\" /> },\n];\n\nconst recentExpensesData = [\n    { initials: 'JS', name: 'John Smith', role: 'engineer • materials', amount: '$1250.00', date: '2024-01-15', status: 'Pending' },\n    { initials: 'SJ', name: 'Sarah Johnson', role: 'supervisor • tools', amount: '$890.50', date: '2024-01-14', status: 'Approved' },\n    { initials: 'MW', name: 'Mike Wilson', role: 'driver • maintenance', amount: '$325.75', date: '2024-01-13', status: 'Paid' },\n];\n\nexport default function ExpenseDashboardPage() {\n    const [filteredExpenses, setFilteredExpenses] = useState(recentExpensesData);\n    const [isExpenseDialogOpen, setIsExpenseDialogOpen] = useState(false);\n    const [isEmployeeDialogOpen, setIsEmployeeDialogOpen] = useState(false); // State for the new dialog\n    const [dialogType, setDialogType] = useState<'expense-claim' | 'advance-request'>('expense-claim');\n\n    const filterExpenses = (status: string) => {\n        if (status === 'All') {\n            setFilteredExpenses(recentExpensesData);\n        } else {\n            setFilteredExpenses(recentExpensesData.filter(expense => expense.status === status));\n        }\n    };\n\n    const getBadgeClass = (status: string) => {\n        switch (status) {\n            case 'Pending': return 'bg-yellow-100 text-yellow-800 hover:bg-yellow-100/80 border-yellow-200';\n            case 'Approved': return 'bg-green-100 text-green-800 hover:bg-green-100/80 border-green-200';\n            case 'Paid': return 'bg-blue-100 text-blue-800 hover:bg-blue-100/80 border-blue-200';\n            case 'Rejected': return 'bg-red-100 text-red-800 hover:bg-red-100/80 border-red-200';\n            default: return 'bg-gray-100 text-gray-800 hover:bg-gray-100/80 border-gray-200';\n        }\n    };\n\n    const handleOpenExpenseDialog = (type: 'expense-claim' | 'advance-request') => {\n        setDialogType(type);\n        setIsExpenseDialogOpen(true);\n    };\n\n    return (\n        <>\n            <NewExpenseDialog isOpen={isExpenseDialogOpen} onOpenChange={setIsExpenseDialogOpen} defaultType={dialogType} />\n            <NewEmployeeDialog isOpen={isEmployeeDialogOpen} onOpenChange={setIsEmployeeDialogOpen} />\n            <div className=\"flex-1 space-y-4 p-4 md:p-8 pt-6\">\n                <div className=\"flex items-center justify-between space-y-2\">\n                    <div>\n                        <h2 className=\"text-3xl font-bold tracking-tight\">Expense Dashboard</h2>\n                        <p className=\"text-muted-foreground\">Monitor and manage daily expenses across all departments.</p>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                        <Button onClick={() => handleOpenExpenseDialog('expense-claim')}>\n                            <Plus className=\"mr-2 h-4 w-4\"/> New Expense\n                        </Button>\n                        <Button variant=\"outline\" onClick={() => handleOpenExpenseDialog('advance-request')}>\n                            <Plus className=\"mr-2 h-4 w-4\"/> Request Advance\n                        </Button>\n                        <Button variant=\"outline\" onClick={() => setIsEmployeeDialogOpen(true)}>\n                            <Plus className=\"mr-2 h-4 w-4\"/> Add Employee\n                        </Button>\n                    </div>\n                </div>\n                <Tabs defaultValue=\"dashboard\" className=\"space-y-4\">\n                    <TabsList>\n                        <TabsTrigger value=\"dashboard\">Dashboard</TabsTrigger>\n                        <TabsTrigger value=\"expenses\">Expenses</TabsTrigger>\n                        <TabsTrigger value=\"advances\">Advances</TabsTrigger>\n                        <TabsTrigger value=\"employees\">Employees</TabsTrigger>\n                    </TabsList>\n                    <TabsContent value=\"dashboard\" className=\"space-y-4\">\n                        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n                            {statCards.map((card, index) => (\n                                <Card key={index}>\n                                    <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                                        <CardTitle className=\"text-sm font-medium\">{card.title}</CardTitle>\n                                        {card.icon}\n                                    </CardHeader>\n                                    <CardContent>\n                                        <div className=\"text-2xl font-bold\">{card.value}</div>\n                                        <p className=\"text-xs text-muted-foreground\">{card.change}</p>\n                                    </CardContent>\n                                </Card>\n                            ))}\n                        </div>\n                        <Card>\n                            <CardHeader>\n                                <CardTitle>Recent Expenses</CardTitle>\n                                <CardDescription>Latest expense submissions and updates.</CardDescription>\n                            </CardHeader>\n                            <CardContent>\n                                <Table>\n                                    <TableHeader>\n                                        <TableRow>\n                                            <TableHead>Employee</TableHead>\n                                            <TableHead className=\"text-right\">Amount</TableHead>\n                                            <TableHead className=\"hidden md:table-cell text-right\">Date</TableHead>\n                                            <TableHead className=\"text-right\">Status</TableHead>\n                                        </TableRow>\n                                    </TableHeader>\n                                    <TableBody>\n                                        {recentExpensesData.map((expense, index) => (\n                                            <TableRow key={index}>\n                                                <TableCell>\n                                                    <div className=\"flex items-center gap-4\">\n                                                        <Avatar className=\"h-9 w-9\">\n                                                            <AvatarFallback>{expense.initials}</AvatarFallback>\n                                                        </Avatar>\n                                                        <div>\n                                                            <p className=\"font-medium\">{expense.name}</p>\n                                                            <p className=\"text-sm text-muted-foreground\">{expense.role}</p>\n                                                        </div>\n                                                    </div>\n                                                </TableCell>\n                                                <TableCell className=\"text-right font-semibold\">{expense.amount}</TableCell>\n                                                <TableCell className=\"hidden md:table-cell text-right\">{expense.date}</TableCell>\n                                                <TableCell className=\"text-right\">\n                                                    <Badge className={getBadgeClass(expense.status)} variant=\"outline\">\n                                                        {expense.status === 'Pending' && <Clock className=\"mr-1 h-3 w-3\" />}\n                                                        {expense.status === 'Approved' && <CheckCircle2 className=\"mr-1 h-3 w-3\" />}\n                                                        {expense.status === 'Paid' && <Wallet className=\"mr-1 h-3 w-3\" />}\n                                                        {expense.status}\n                                                    </Badge>\n                                                </TableCell>\n                                            </TableRow>\n                                        ))}\n                                    </TableBody>\n                                </Table>\n                            </CardContent>\n                        </Card>\n                    </TabsContent>\n                    <TabsContent value=\"expenses\" className=\"space-y-4\">\n                        <Card>\n                            <CardHeader>\n                                <CardTitle>All Expenses</CardTitle>\n                                <CardDescription>View and manage all expense submissions.</CardDescription>\n                            </CardHeader>\n                            <CardContent>\n                            <Table>\n                                <TableHeader>\n                                    <TableRow>\n                                        <TableHead>Employee</TableHead>\n                                        <TableHead className=\"text-right\">Amount</TableHead>\n                                        <TableHead className=\"hidden md:table-cell text-right\">Date</TableHead>\n                                        <TableHead className=\"text-right\">Status</TableHead>\n                                    </TableRow>\n                                </TableHeader>\n                                <TableBody>\n                                    {recentExpensesData.map((expense, index) => (\n                                        <TableRow key={index}>\n                                            <TableCell>\n                                                <div className=\"flex items-center gap-4\">\n                                                    <Avatar className=\"h-9 w-9\">\n                                                        <AvatarFallback>{expense.initials}</AvatarFallback>\n                                                    </Avatar>\n                                                    <div>\n                                                        <p className=\"font-medium\">{expense.name}</p>\n                                                        <p className=\"text-sm text-muted-foreground\">{expense.role}</p>\n                                                    </div>\n                                                </div>\n                                            </TableCell>\n                                            <TableCell className=\"text-right font-semibold\">{expense.amount}</TableCell>\n                                            <TableCell className=\"hidden md:table-cell text-right\">{expense.date}</TableCell>\n                                            <TableCell className=\"text-right\">\n                                                <Badge className={getBadgeClass(expense.status)} variant=\"outline\">\n                                                    {expense.status === 'Pending' && <Clock className=\"mr-1 h-3 w-3\" />}\n                                                    {expense.status === 'Approved' && <CheckCircle2 className=\"mr-1 h-3 w-3\" />}\n                                                    {expense.status === 'Paid' && <Wallet className=\"mr-1 h-3 w-3\" />}\n                                                    {expense.status}\n                                                </Badge>\n                                            </TableCell>\n                                        </TableRow>\n                                    ))}\n                                </TableBody>\n                            </Table>\n                            </CardContent>\n                        </Card>\n                    </TabsContent>\n                    <TabsContent value=\"advances\" className=\"space-y-4\">\n                        <AdvancesTable />\n                    </TabsContent>\n                    <TabsContent value=\"employees\" className=\"space-y-4\">\n                        <EmployeeList />\n                    </TabsContent>\n                </Tabs>\n            </div>\n        </>\n    );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}