{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,gBAAgB,IAAA,uKAAG,EACvB;AAGF,MAAM,sBAAQ,mNAAgB,CAI5B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,yKAAmB;QAClB,KAAK;QACL,WAAW,IAAA,yHAAE,EAAC,iBAAiB;QAC9B,GAAG,KAAK;;;;;;AAGb,MAAM,WAAW,GAAG,yKAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 35, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/form.tsx"],"sourcesContent":["\n\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 194, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/input.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n"],"names":[],"mappings":";;;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,mNAAgB,CAC5B,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAO,EAAE;IAC9B,qBACE,8OAAC;QACC,MAAM;QACN,WAAW,IAAA,yHAAE,EACX,kYACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,MAAM,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 222, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/login/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { z } from 'zod';\nimport { auth } from '@/lib/firebase/config';\nimport { signInWithEmailAndPassword } from 'firebase/auth';\n\nconst loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string(),\n});\n\nexport async function handleLogin(credentials: z.infer<typeof loginSchema>) {\n  const validation = loginSchema.safeParse(credentials);\n\n  if (!validation.success) {\n    return { success: false, error: 'Invalid input.' };\n  }\n\n  const { email, password } = validation.data;\n\n  try {\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\n    const user = userCredential.user;\n    \n    // Here you can fetch additional user data from your database if needed\n    const userProfile = {\n      uid: user.uid,\n      email: user.email,\n      name: user.displayName || 'Anonymous',\n      // Add other user properties as needed\n    };\n\n    return { success: true, data: userProfile };\n\n  } catch (error: any) {\n    let errorMessage = 'An unexpected error occurred during login.';\n\n    switch (error.code) {\n      case 'auth/user-not-found':\n      case 'auth/wrong-password':\n        errorMessage = 'Invalid email or password.';\n        break;\n      case 'auth/user-disabled':\n        errorMessage = 'Your account is inactive. Please contact an administrator.';\n        break;\n      default:\n        console.error('Login error:', error);\n    }\n\n    return { success: false, error: errorMessage };\n  }\n}\n"],"names":[],"mappings":";;;;;;;IAYsB,cAAA,WAAA,GAAA,IAAA,+OAAA,EAAA,8CAAA,oOAAA,EAAA,KAAA,GAAA,0OAAA,EAAA","debugId":null}},
    {"offset": {"line": 234, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/login/page.tsx"],"sourcesContent":["\n'use client';\n\nimport { useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as z from 'zod';\n\nimport { Button } from '@/components/ui/button';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { useToast } from '@/hooks/use-toast';\nimport { Building2, Loader2 } from 'lucide-react';\nimport { handleLogin } from './actions';\n\nconst loginSchema = z.object({\n  email: z.string().email({ message: 'Please enter a valid email address.' }),\n  password: z.string().min(1, { message: 'Password is required.' }),\n});\n\ntype LoginFormValues = z.infer<typeof loginSchema>;\n\nexport default function LoginPage() {\n  const router = useRouter();\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const form = useForm<LoginFormValues>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: '',\n      password: '',\n    },\n  });\n\n  const onSubmit = async (data: LoginFormValues) => {\n    setIsLoading(true);\n    \n    const result = await handleLogin(data);\n\n    if (result.success) {\n      // For demonstration purposes, storing user info in sessionStorage.\n      // In a real app, you would use a secure session management approach.\n      sessionStorage.setItem('userProfile', JSON.stringify(result.data));\n\n      toast({\n        title: 'Login Successful',\n        description: `Welcome back, ${result.data?.name}! You're being redirected.`,\n      });\n      router.push('/');\n    } else {\n      toast({\n        variant: 'destructive',\n        title: 'Login Failed',\n        description: result.error,\n      });\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"flex min-h-screen items-center justify-center bg-background p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n            <div className=\"mx-auto mb-4\">\n                <Building2 className=\"h-12 w-12 text-primary\" />\n            </div>\n          <CardTitle className=\"font-headline text-3xl\">Trust Famous Real Estate</CardTitle>\n          <CardDescription>\n            Sign in to your account to continue\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email Address</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"email\"\n                        placeholder=\"admin@atlaspm.com\"\n                        {...field}\n                        disabled={isLoading}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Password</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"password\"\n                        placeholder=\"********\"\n                        {...field}\n                        disabled={isLoading}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n                {isLoading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n                Sign In\n              </Button>\n            </form>\n          </Form>\n        </CardContent>\n        <CardFooter className=\"flex flex-col items-center space-y-2\">\n            <Button variant=\"link\" size=\"sm\">\n                Forgot your password?\n            </Button>\n        </CardFooter>\n      </Card>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAQA;AAQA;AACA;AACA;AAAA;AACA;AA5BA;;;;;;;;;;;;;;AA8BA,MAAM,cAAc,4IAAQ,CAAC;IAC3B,OAAO,4IAAQ,GAAG,KAAK,CAAC;QAAE,SAAS;IAAsC;IACzE,UAAU,4IAAQ,GAAG,GAAG,CAAC,GAAG;QAAE,SAAS;IAAwB;AACjE;AAIe,SAAS;IACtB,MAAM,SAAS,IAAA,+IAAS;IACxB,MAAM,EAAE,KAAK,EAAE,GAAG,IAAA,wIAAQ;IAC1B,MAAM,CAAC,WAAW,aAAa,GAAG,IAAA,iNAAQ,EAAC;IAE3C,MAAM,OAAO,IAAA,yKAAO,EAAkB;QACpC,UAAU,IAAA,6KAAW,EAAC;QACtB,eAAe;YACb,OAAO;YACP,UAAU;QACZ;IACF;IAEA,MAAM,WAAW,OAAO;QACtB,aAAa;QAEb,MAAM,SAAS,MAAM,IAAA,0KAAW,EAAC;QAEjC,IAAI,OAAO,OAAO,EAAE;YAClB,mEAAmE;YACnE,qEAAqE;YACrE,eAAe,OAAO,CAAC,eAAe,KAAK,SAAS,CAAC,OAAO,IAAI;YAEhE,MAAM;gBACJ,OAAO;gBACP,aAAa,CAAC,cAAc,EAAE,OAAO,IAAI,EAAE,KAAK,0BAA0B,CAAC;YAC7E;YACA,OAAO,IAAI,CAAC;QACd,OAAO;YACL,MAAM;gBACJ,SAAS;gBACT,OAAO;gBACP,aAAa,OAAO,KAAK;YAC3B;YACA,aAAa;QACf;IACF;IAEA,qBACE,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC,wIAAI;YAAC,WAAU;;8BACd,8OAAC,8IAAU;oBAAC,WAAU;;sCAClB,8OAAC;4BAAI,WAAU;sCACX,cAAA,8OAAC,6NAAS;gCAAC,WAAU;;;;;;;;;;;sCAE3B,8OAAC,6IAAS;4BAAC,WAAU;sCAAyB;;;;;;sCAC9C,8OAAC,mJAAe;sCAAC;;;;;;;;;;;;8BAInB,8OAAC,+IAAW;8BACV,cAAA,8OAAC,wIAAI;wBAAE,GAAG,IAAI;kCACZ,cAAA,8OAAC;4BAAK,UAAU,KAAK,YAAY,CAAC;4BAAW,WAAU;;8CACrD,8OAAC,6IAAS;oCACR,SAAS,KAAK,OAAO;oCACrB,MAAK;oCACL,QAAQ,CAAC,EAAE,KAAK,EAAE,iBAChB,8OAAC,4IAAQ;;8DACP,8OAAC,6IAAS;8DAAC;;;;;;8DACX,8OAAC,+IAAW;8DACV,cAAA,8OAAC,0IAAK;wDACJ,MAAK;wDACL,aAAY;wDACX,GAAG,KAAK;wDACT,UAAU;;;;;;;;;;;8DAGd,8OAAC,+IAAW;;;;;;;;;;;;;;;;8CAIlB,8OAAC,6IAAS;oCACR,SAAS,KAAK,OAAO;oCACrB,MAAK;oCACL,QAAQ,CAAC,EAAE,KAAK,EAAE,iBAChB,8OAAC,4IAAQ;;8DACP,8OAAC,6IAAS;8DAAC;;;;;;8DACX,8OAAC,+IAAW;8DACV,cAAA,8OAAC,0IAAK;wDACJ,MAAK;wDACL,aAAY;wDACX,GAAG,KAAK;wDACT,UAAU;;;;;;;;;;;8DAGd,8OAAC,+IAAW;;;;;;;;;;;;;;;;8CAIlB,8OAAC,4IAAM;oCAAC,MAAK;oCAAS,WAAU;oCAAS,UAAU;;wCAChD,2BAAa,8OAAC,4NAAO;4CAAC,WAAU;;;;;;wCAA+B;;;;;;;;;;;;;;;;;;;;;;;8BAMxE,8OAAC,8IAAU;oBAAC,WAAU;8BAClB,cAAA,8OAAC,4IAAM;wBAAC,SAAQ;wBAAO,MAAK;kCAAK;;;;;;;;;;;;;;;;;;;;;;AAO7C","debugId":null}}]
}