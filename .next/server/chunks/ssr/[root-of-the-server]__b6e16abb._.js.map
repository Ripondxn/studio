{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/license.ts"],"sourcesContent":["\n'use server';\n\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { differenceInDays, addDays, format, parseISO } from 'date-fns';\n\nconst licenseFilePath = path.join(process.cwd(), 'license.json');\nconst TRIAL_PERIOD_DAYS = 30;\n\ntype LicenseInfo = {\n    trialStartDate: string;\n};\n\nexport type LicenseStatus = {\n    isActive: boolean;\n    isTrial: boolean;\n    daysRemaining: number;\n    expiryDate: string;\n};\n\nasync function readLicenseFile(): Promise<LicenseInfo | null> {\n    try {\n        await fs.access(licenseFilePath);\n        const data = await fs.readFile(licenseFilePath, 'utf-8');\n        // Basic validation in case the file is empty or corrupted\n        if (!data) return null;\n        return JSON.parse(data);\n    } catch (error) {\n        return null; // File doesn't exist or is unreadable\n    }\n}\n\nasync function createLicenseFile(): Promise<LicenseInfo> {\n    const trialStartDate = new Date().toISOString();\n    const newLicense: LicenseInfo = { trialStartDate };\n    await fs.writeFile(licenseFilePath, JSON.stringify(newLicense, null, 2), 'utf-8');\n    return newLicense;\n}\n\nexport async function checkLicenseStatus(): Promise<LicenseStatus> {\n    let license = await readLicenseFile();\n\n    if (!license) {\n        license = await createLicenseFile();\n    }\n    \n    const startDate = parseISO(license.trialStartDate);\n    const now = new Date();\n    const expiryDate = addDays(startDate, TRIAL_PERIOD_DAYS);\n    const daysRemaining = differenceInDays(expiryDate, now);\n\n    const isActive = daysRemaining >= 0;\n\n    return {\n        isActive,\n        isTrial: true, // For now, we only have a trial license\n        daysRemaining: Math.max(0, daysRemaining),\n        expiryDate: format(expiryDate, 'PPP'),\n    };\n}\n"],"names":[],"mappings":";;;;;AAGA;AACA;AACA;AAAA;AAAA;AAAA;;;;;;AAEA,MAAM,kBAAkB,4GAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI;AACjD,MAAM,oBAAoB;AAa1B,eAAe;IACX,IAAI;QACA,MAAM,yGAAE,CAAC,MAAM,CAAC;QAChB,MAAM,OAAO,MAAM,yGAAE,CAAC,QAAQ,CAAC,iBAAiB;QAChD,0DAA0D;QAC1D,IAAI,CAAC,MAAM,OAAO;QAClB,OAAO,KAAK,KAAK,CAAC;IACtB,EAAE,OAAO,OAAO;QACZ,OAAO,MAAM,sCAAsC;IACvD;AACJ;AAEA,eAAe;IACX,MAAM,iBAAiB,IAAI,OAAO,WAAW;IAC7C,MAAM,aAA0B;QAAE;IAAe;IACjD,MAAM,yGAAE,CAAC,SAAS,CAAC,iBAAiB,KAAK,SAAS,CAAC,YAAY,MAAM,IAAI;IACzE,OAAO;AACX;AAEO,eAAe;IAClB,IAAI,UAAU,MAAM;IAEpB,IAAI,CAAC,SAAS;QACV,UAAU,MAAM;IACpB;IAEA,MAAM,YAAY,IAAA,oJAAQ,EAAC,QAAQ,cAAc;IACjD,MAAM,MAAM,IAAI;IAChB,MAAM,aAAa,IAAA,kJAAO,EAAC,WAAW;IACtC,MAAM,gBAAgB,IAAA,oKAAgB,EAAC,YAAY;IAEnD,MAAM,WAAW,iBAAiB;IAElC,OAAO;QACH;QACA,SAAS;QACT,eAAe,KAAK,GAAG,CAAC,GAAG;QAC3B,YAAY,IAAA,gKAAM,EAAC,YAAY;IACnC;AACJ;;;IApBsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/currency/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { z } from 'zod';\nimport { revalidatePath } from 'next/cache';\n\nexport type CurrencySettings = {\n    currencyCode: string;\n};\n\nconst settingsFilePath = path.join(process.cwd(), 'src/app/admin/currency/settings.json');\n\nconst defaultSettings: CurrencySettings = {\n    currencyCode: 'AED'\n};\n\nexport async function getCurrencySettings(): Promise<CurrencySettings> {\n    try {\n        await fs.access(settingsFilePath);\n        const data = await fs.readFile(settingsFilePath, 'utf-8');\n        return { ...defaultSettings, ...JSON.parse(data) };\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            return defaultSettings;\n        }\n        throw error;\n    }\n}\n\nconst currencySettingsSchema = z.object({\n    currencyCode: z.string().length(3, \"Currency code must be 3 characters long.\").toUpperCase(),\n});\n\nexport async function saveCurrencySettings(data: CurrencySettings) {\n    const validation = currencySettingsSchema.safeParse(data);\n\n    if (!validation.success) {\n        return { success: false, error: validation.error.errors[0].message };\n    }\n\n    try {\n        await fs.writeFile(settingsFilePath, JSON.stringify(validation.data, null, 2), 'utf-8');\n        revalidatePath('/', 'layout'); // Revalidate all pages\n        return { success: true };\n    } catch (error) {\n        console.error('Failed to save currency settings:', error);\n        return { success: false, error: 'Failed to save settings.' };\n    }\n}\n"],"names":[],"mappings":";;;;;;;AAGA;AACA;AACA;AACA;;;;;;;AAMA,MAAM,mBAAmB,4GAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI;AAElD,MAAM,kBAAoC;IACtC,cAAc;AAClB;AAEO,eAAe;IAClB,IAAI;QACA,MAAM,yGAAE,CAAC,MAAM,CAAC;QAChB,MAAM,OAAO,MAAM,yGAAE,CAAC,QAAQ,CAAC,kBAAkB;QACjD,OAAO;YAAE,GAAG,eAAe;YAAE,GAAG,KAAK,KAAK,CAAC,KAAK;QAAC;IACrD,EAAE,OAAO,OAAO;QACZ,IAAI,AAAC,MAAgC,IAAI,KAAK,UAAU;YACpD,OAAO;QACX;QACA,MAAM;IACV;AACJ;AAEA,MAAM,yBAAyB,uKAAC,CAAC,MAAM,CAAC;IACpC,cAAc,uKAAC,CAAC,MAAM,GAAG,MAAM,CAAC,GAAG,4CAA4C,WAAW;AAC9F;AAEO,eAAe,qBAAqB,IAAsB;IAC7D,MAAM,aAAa,uBAAuB,SAAS,CAAC;IAEpD,IAAI,CAAC,WAAW,OAAO,EAAE;QACrB,OAAO;YAAE,SAAS;YAAO,OAAO,WAAW,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,OAAO;QAAC;IACvE;IAEA,IAAI;QACA,MAAM,yGAAE,CAAC,SAAS,CAAC,kBAAkB,KAAK,SAAS,CAAC,WAAW,IAAI,EAAE,MAAM,IAAI;QAC/E,IAAA,+IAAc,EAAC,KAAK,WAAW,uBAAuB;QACtD,OAAO;YAAE,SAAS;QAAK;IAC3B,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,qCAAqC;QACnD,OAAO;YAAE,SAAS;YAAO,OAAO;QAA2B;IAC/D;AACJ;;;IAhCsB;IAiBA;;AAjBA,+OAAA;AAiBA,+OAAA","debugId":null}},
    {"offset": {"line": 139, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/access-control/permissions.ts"],"sourcesContent":["\nexport type PermissionAction = {\n  action: string;\n  description: string;\n  allowedRoles: string[];\n};\n\nexport type FeaturePermission = {\n  feature: string;\n  description: string;\n  actions: PermissionAction[];\n};\n\nexport const featurePermissions: FeaturePermission[] = [\n  {\n    feature: 'Properties',\n    description: 'Manage property listings, details, and associated units/rooms.',\n    actions: [\n      { action: 'view', description: 'View property list and details', allowedRoles: ['Super Admin', 'Admin', 'Property Manager', 'Accountant', 'User'] },\n      { action: 'edit', description: 'Edit property information', allowedRoles: ['Super Admin', 'Admin', 'Property Manager'] },\n      { action: 'delete', description: 'Delete a property', allowedRoles: ['Super Admin'] },\n    ],\n  },\n  {\n    feature: 'Units',\n    description: 'Manage individual units within a property.',\n    actions: [\n      { action: 'view', description: 'View unit list and details', allowedRoles: ['Super Admin', 'Admin', 'Property Manager', 'Accountant', 'User'] },\n      { action: 'edit', description: 'Edit unit information', allowedRoles: ['Super Admin', 'Admin', 'Property Manager'] },\n      { action: 'delete', description: 'Delete a unit', allowedRoles: ['Super Admin'] },\n    ],\n  },\n   {\n    feature: 'Rent-A-Car',\n    description: 'Manage vehicle rental agreements.',\n    actions: [\n      { action: 'view', description: 'View rental agreements', allowedRoles: ['Super Admin', 'Admin', 'User'] },\n      { action: 'manage', description: 'Add/Edit/Delete rental agreements', allowedRoles: ['Super Admin', 'Admin'] },\n    ],\n  },\n   {\n    feature: 'Car Sales',\n    description: 'Manage vehicle buying and selling operations.',\n    actions: [\n      { action: 'view', description: 'View vehicle inventory and sales', allowedRoles: ['Super Admin', 'Admin', 'User'] },\n      { action: 'manage', description: 'Add, edit, and delete vehicle records', allowedRoles: ['Super Admin', 'Admin'] },\n    ],\n  },\n  {\n    feature: 'Lease Contracts',\n    description: 'Manage lease agreements with landlords.',\n    actions: [\n      { action: 'view', description: 'View lease agreements', allowedRoles: ['Super Admin', 'Admin', 'Property Manager'] },\n      { action: 'manage', description: 'Create, edit, and delete lease agreements', allowedRoles: ['Super Admin', 'Admin'] },\n    ]\n  },\n  {\n    feature: 'Project Management',\n    description: 'Manage all aspects of projects, including billing, sub-contractors, and resource allocation.',\n    actions: [\n      { action: 'view', description: 'View project list and details', allowedRoles: ['Super Admin', 'Admin', 'Property Manager'] },\n      { action: 'manage', description: 'Create, edit, and delete projects', allowedRoles: ['Super Admin', 'Admin'] },\n      { action: 'manage_billing', description: 'Manage project progress billing and retention', allowedRoles: ['Super Admin', 'Accountant'] },\n    ],\n  },\n   {\n    feature: 'Vaults & Stores',\n    description: 'Manage inventory, stock levels, and store locations.',\n    actions: [\n      { action: 'view', description: 'View stores and stock levels', allowedRoles: ['Super Admin', 'Admin', 'User'] },\n      { action: 'manage', description: 'Add/Edit/Delete stores and manage stock transactions', allowedRoles: ['Super Admin', 'Admin'] },\n    ],\n  },\n    {\n    feature: 'Products & Services',\n    description: 'Manage the catalog of products and services offered.',\n    actions: [\n      { action: 'view', description: 'View products and services', allowedRoles: ['Super Admin', 'Admin', 'User'] },\n      { action: 'manage', description: 'Add/Edit/Delete products and services', allowedRoles: ['Super Admin', 'Admin'] },\n      { action: 'view_pricing', description: 'View cost and sale prices', allowedRoles: ['Super Admin', 'Admin', 'Accountant'] },\n    ],\n  },\n  {\n    feature: 'Asset Management',\n    description: 'Manage company assets, depreciation, and assignments.',\n    actions: [\n      { action: 'view', description: 'View asset list', allowedRoles: ['Super Admin', 'Admin', 'Accountant'] },\n      { action: 'manage', description: 'Add, edit, and assign assets', allowedRoles: ['Super Admin', 'Admin'] },\n      { action: 'delete', description: 'Delete assets from the register', allowedRoles: ['Super Admin'] },\n    ],\n  },\n  {\n    feature: 'Maintenance',\n    description: 'Manage maintenance tickets and service contracts.',\n    actions: [\n      { action: 'view_tickets', description: 'View maintenance tickets', allowedRoles: ['Super Admin', 'Admin', 'User'] },\n      { action: 'manage_tickets', description: 'Create, edit, and update tickets', allowedRoles: ['Super Admin', 'Admin'] },\n      { action: 'view_contracts', description: 'View service contracts', allowedRoles: ['Super Admin', 'Admin', 'Accountant'] },\n      { action: 'manage_contracts', description: 'Manage service contracts', allowedRoles: ['Super Admin', 'Admin'] },\n    ],\n  },\n  {\n    feature: 'Workflow',\n    description: 'Manage document approval workflows.',\n    actions: [\n      { action: 'view', description: 'View workflow queue', allowedRoles: ['Super Admin', 'Admin'] },\n      { action: 'manage', description: 'Approve or reject transactions', allowedRoles: ['Super Admin', 'Admin'] },\n    ],\n  },\n  {\n    feature: 'Data Processing',\n    description: 'Extract data from documents using AI.',\n    actions: [\n      { action: 'access', description: 'Access document processing and data extraction features', allowedRoles: ['Super Admin', 'Admin', 'User'] },\n    ],\n  },\n   {\n    feature: 'Utilities',\n    description: 'Manage utility accounts and bill payments.',\n    actions: [\n      { action: 'view', description: 'View utility accounts', allowedRoles: ['Super Admin', 'Admin', 'Accountant', 'User'] },\n      { action: 'manage', description: 'Add, edit, and delete utility accounts', allowedRoles: ['Super Admin', 'Admin'] },\n    ],\n  },\n  {\n    feature: 'Landlords',\n    description: 'Manage landlord profiles and their associated contracts.',\n    actions: [\n      { action: 'view', description: 'View landlord list and details', allowedRoles: ['Super Admin', 'Admin', 'Property Manager', 'Accountant'] },\n      { action: 'edit', description: 'Edit landlord information', allowedRoles: ['Super Admin', 'Admin', 'Property Manager'] },\n      { action: 'delete', description: 'Delete a landlord', allowedRoles: ['Super Admin'] },\n    ],\n  },\n    {\n    feature: 'Vendors',\n    description: 'Manage supplier and vendor profiles.',\n    actions: [\n      { action: 'view', description: 'View vendor list and details', allowedRoles: ['Super Admin', 'Admin', 'Property Manager', 'Accountant', 'User'] },\n      { action: 'edit', description: 'Edit vendor information', allowedRoles: ['Super Admin', 'Admin', 'Property Manager'] },\n      { action: 'delete', description: 'Delete a vendor', allowedRoles: ['Super Admin'] },\n    ],\n  },\n  {\n    feature: 'Tenants',\n    description: 'Manage tenant profiles and their tenancy contracts.',\n    actions: [\n      { action: 'view', description: 'View tenant list and details', allowedRoles: ['Super Admin', 'Admin', 'Property Manager', 'Accountant', 'User'] },\n      { action: 'edit', description: 'Edit tenant information', allowedRoles: ['Super Admin', 'Admin', 'Property Manager'] },\n      { action: 'delete', description: 'Delete a tenant', allowedRoles: ['Super Admin'] },\n    ],\n  },\n  {\n    feature: 'Customers',\n    description: 'Manage general customers for non-rental services.',\n    actions: [\n      { action: 'view', description: 'View customer list and details', allowedRoles: ['Super Admin', 'Admin', 'Accountant', 'User'] },\n      { action: 'edit', description: 'Edit customer information', allowedRoles: ['Super Admin', 'Admin'] },\n      { action: 'delete', description: 'Delete a customer', allowedRoles: ['Super Admin'] },\n    ],\n  },\n  {\n    feature: 'Finance',\n    description: 'Access to financial modules like banking, payments, and chart of accounts.',\n    actions: [\n      { action: 'view_banking', description: 'View Banking and Petty Cash', allowedRoles: ['Super Admin', 'Admin', 'Accountant'] },\n      { action: 'manage_banking', description: 'Add/Edit/Delete bank accounts', allowedRoles: ['Super Admin'] },\n      { action: 'view_payments', description: 'View payment and receipt history', allowedRoles: ['Super Admin', 'Admin', 'Accountant'] },\n      { action: 'record_payment', description: 'Record new payments or receipts', allowedRoles: ['Super Admin', 'Admin', 'Accountant'] },\n      { action: 'delete_payment', description: 'Delete financial transactions', allowedRoles: ['Super Admin'] },\n    ],\n  },\n  {\n    feature: 'User Management',\n    description: 'Control over user accounts and their roles.',\n    actions: [\n      { action: 'view', description: 'View user list', allowedRoles: ['Super Admin', 'Admin'] },\n      { action: 'add_user', description: 'Add new users', allowedRoles: ['Super Admin', 'Admin'] },\n      { action: 'edit_user', description: 'Edit user details and roles', allowedRoles: ['Super Admin', 'Admin'] },\n      { action: 'delete_user', description: 'Delete a user', allowedRoles: ['Super Admin'] },\n    ],\n  },\n  {\n    feature: 'Settings',\n    description: 'Access to administrative settings.',\n    actions: [\n        { action: 'access_control', description: 'Manage user roles and permissions', allowedRoles: ['Super Admin'] },\n        { action: 'communication', description: 'Manage communication (Email/SMS) settings', allowedRoles: ['Super Admin', 'Admin'] },\n        { action: 'backup', description: 'Manage data backup and restore', allowedRoles: ['Super Admin'] },\n        { action: 'external_storage', description: 'Configure external storage (e.g., Google Drive)', allowedRoles: ['Developer'] },\n        { action: 'notifications', description: 'Send system-wide notifications', allowedRoles: ['Super Admin', 'Admin'] },\n        { action: 'contract_continuity', description: 'Review and fix contract data issues', allowedRoles: ['Super Admin'] },\n    ]\n  }\n];\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 764, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/access-control/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { revalidatePath } from 'next/cache';\nimport { type FeaturePermission, featurePermissions } from './permissions';\nimport { type UserRole } from '../user-roles/schema';\nimport { type ModuleSettings } from './schema';\n\nconst permissionsFilePath = path.join(process.cwd(), 'src/app/admin/access-control/permissions.json');\nconst usersFilePath = path.join(process.cwd(), 'src/app/admin/user-roles/users.json');\nconst moduleSettingsFilePath = path.join(process.cwd(), 'src/app/admin/access-control/module-settings.json');\nconst userOverridesFilePath = path.join(process.cwd(), 'src/app/admin/access-control/user-overrides.json');\n\nasync function readData(filePath: string) {\n    try {\n        await fs.access(filePath);\n        const data = await fs.readFile(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            // Return a default structure that can be safely merged\n            if (filePath.endsWith('permissions.json')) return [];\n            if (filePath.endsWith('users.json')) return [];\n            if (filePath.endsWith('module-settings.json')) return { modules: [] }; \n            if (filePath.endsWith('user-overrides.json')) return [];\n            return [];\n        }\n        throw error;\n    }\n}\n\nexport async function getPermissions(): Promise<FeaturePermission[]> {\n     const savedPermissions = await readData(permissionsFilePath);\n     // Merge saved permissions with the default structure to ensure all features are listed\n    const allPermissions = featurePermissions.map(feature => {\n        const savedFeature = savedPermissions.find((p: any) => p.feature === feature.feature);\n        const actions = feature.actions.map(action => {\n        const savedAction = savedFeature?.actions.find((a: any) => a.action === action.action);\n        return {\n            ...action,\n            allowedRoles: savedAction ? savedAction.allowedRoles : action.allowedRoles,\n        };\n        });\n        return {\n        ...feature,\n        actions,\n        };\n    });\n    return allPermissions;\n}\n\nexport async function savePermissions(permissions: FeaturePermission[]) {\n    try {\n        await fs.writeFile(permissionsFilePath, JSON.stringify(permissions, null, 2), 'utf-8');\n        revalidatePath('/admin/access-control');\n        return { success: true };\n    } catch (error) {\n        console.error('Failed to save permissions:', error);\n        return { success: false, error: 'Failed to save permissions.' };\n    }\n}\n\nexport async function updatePermission(featureName: string, actionName: string, role: string, isChecked: boolean) {\n    const currentPermissions = await getPermissions();\n    const feature = currentPermissions.find(f => f.feature === featureName);\n    if (feature) {\n        const action = feature.actions.find(a => a.action === actionName);\n        if (action) {\n            if (isChecked) {\n                if (!action.allowedRoles.includes(role)) {\n                    action.allowedRoles.push(role);\n                }\n            } else {\n                action.allowedRoles = action.allowedRoles.filter(r => r !== role);\n            }\n        }\n    }\n    return await savePermissions(currentPermissions);\n}\n\n\nexport async function getRoles(): Promise<string[]> {\n    try {\n        const users: UserRole[] = await readData(usersFilePath);\n        const allRoles = users.map(u => u.role);\n        // Add default roles that might not be in use yet\n        const defaultRoles = ['Super Admin', 'Admin', 'Property Manager', 'Accountant', 'User', 'Developer'];\n        const uniqueRoles = Array.from(new Set([...allRoles, ...defaultRoles]));\n        return uniqueRoles;\n    } catch (error) {\n        console.error(\"Failed to read user roles\", error);\n        return ['Super Admin', 'Admin', 'Property Manager', 'Accountant', 'User', 'Developer'];\n    }\n}\n\nexport type UserOverride = {\n    email: string;\n    allowedModules: string[];\n}\n\nexport async function getUserOverrides(): Promise<UserOverride[]> {\n    return (await readData(userOverridesFilePath)) as UserOverride[];\n}\n\nexport async function saveUserOverrides(overrides: UserOverride[]) {\n     try {\n        await fs.writeFile(userOverridesFilePath, JSON.stringify(overrides, null, 2), 'utf-8');\n        revalidatePath('/', 'layout');\n        return { success: true };\n    } catch (error) {\n        console.error('Failed to save user overrides:', error);\n        return { success: false, error: 'Failed to save user overrides.' };\n    }\n}\n\n\nexport async function getCombinedAccessControlData() {\n    try {\n        const [permissions, moduleSettings, userOverrides] = await Promise.all([\n            getPermissions(),\n            readData(moduleSettingsFilePath) as Promise<ModuleSettings>,\n            getUserOverrides()\n        ]);\n        return { success: true, permissions, moduleSettings, userOverrides };\n    } catch(error) {\n        return { success: false, error: (error as Error).message };\n    }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 954, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/tenancy/contract/schema.ts"],"sourcesContent":["\n\nimport { z } from 'zod';\n\nexport const paymentInstallmentSchema = z.object({\n  installment: z.number(),\n  dueDate: z.string(),\n  amount: z.number(),\n  status: z.enum(['paid', 'unpaid']),\n  chequeNo: z.string().optional(),\n  bankName: z.string().optional(),\n});\n\nexport const contractSchema = z.object({\n  id: z.string(),\n  contractNo: z.string().min(1, \"Contract number is required.\"),\n  contractDate: z.string().min(1, \"Contract date is required.\"),\n  property: z.string().optional(),\n  unitCode: z.string().min(1, \"Unit code is required.\"),\n  roomCode: z.string().optional(),\n  tenantCode: z.string().optional(),\n  tenantName: z.string().min(1, \"Tenant name is required.\"),\n  mobile: z.string().optional(),\n  email: z.string().optional(),\n  address: z.string().optional(),\n  startDate: z.string().min(1, \"Start date is required.\"),\n  endDate: z.string().min(1, \"End date is required.\"),\n  totalRent: z.number().min(0, \"Total rent must be a positive number.\"),\n  paymentMode: z.enum(['cash', 'cheque', 'bank-transfer']),\n  status: z.enum(['New', 'Renew', 'Cancel']).optional(),\n  renewalCount: z.number().optional().default(0),\n  terminationDate: z.string().optional(),\n  terminationReason: z.string().optional(),\n  finalSettlementAmount: z.number().optional(),\n  rentBasedOn: z.enum(['Monthly', 'Daily']).optional(),\n  paymentFrequency: z.enum(['Monthly', 'Quarterly', 'Half-Yearly', 'Yearly', 'Custom']).optional(),\n  numberOfPayments: z.number().optional(),\n  gracePeriod: z.number().optional(),\n  paymentSchedule: z.array(paymentInstallmentSchema),\n  terms: z.string().optional(),\n  tawtheeqRegistrationNo: z.string().optional(),\n  tawtheeqStatus: z.enum(['Not Registered', 'Under Process', 'Registered']).optional(),\n  tawtheeqRegistrationDate: z.string().optional(),\n});\n\nexport type PaymentInstallment = z.infer<typeof paymentInstallmentSchema>;\nexport type Contract = z.infer<typeof contractSchema>;\n"],"names":[],"mappings":";;;;;;AAEA;;AAEO,MAAM,2BAA2B,uKAAC,CAAC,MAAM,CAAC;IAC/C,aAAa,uKAAC,CAAC,MAAM;IACrB,SAAS,uKAAC,CAAC,MAAM;IACjB,QAAQ,uKAAC,CAAC,MAAM;IAChB,QAAQ,uKAAC,CAAC,IAAI,CAAC;QAAC;QAAQ;KAAS;IACjC,UAAU,uKAAC,CAAC,MAAM,GAAG,QAAQ;IAC7B,UAAU,uKAAC,CAAC,MAAM,GAAG,QAAQ;AAC/B;AAEO,MAAM,iBAAiB,uKAAC,CAAC,MAAM,CAAC;IACrC,IAAI,uKAAC,CAAC,MAAM;IACZ,YAAY,uKAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC9B,cAAc,uKAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAChC,UAAU,uKAAC,CAAC,MAAM,GAAG,QAAQ;IAC7B,UAAU,uKAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC5B,UAAU,uKAAC,CAAC,MAAM,GAAG,QAAQ;IAC7B,YAAY,uKAAC,CAAC,MAAM,GAAG,QAAQ;IAC/B,YAAY,uKAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC9B,QAAQ,uKAAC,CAAC,MAAM,GAAG,QAAQ;IAC3B,OAAO,uKAAC,CAAC,MAAM,GAAG,QAAQ;IAC1B,SAAS,uKAAC,CAAC,MAAM,GAAG,QAAQ;IAC5B,WAAW,uKAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC7B,SAAS,uKAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC3B,WAAW,uKAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC7B,aAAa,uKAAC,CAAC,IAAI,CAAC;QAAC;QAAQ;QAAU;KAAgB;IACvD,QAAQ,uKAAC,CAAC,IAAI,CAAC;QAAC;QAAO;QAAS;KAAS,EAAE,QAAQ;IACnD,cAAc,uKAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,OAAO,CAAC;IAC5C,iBAAiB,uKAAC,CAAC,MAAM,GAAG,QAAQ;IACpC,mBAAmB,uKAAC,CAAC,MAAM,GAAG,QAAQ;IACtC,uBAAuB,uKAAC,CAAC,MAAM,GAAG,QAAQ;IAC1C,aAAa,uKAAC,CAAC,IAAI,CAAC;QAAC;QAAW;KAAQ,EAAE,QAAQ;IAClD,kBAAkB,uKAAC,CAAC,IAAI,CAAC;QAAC;QAAW;QAAa;QAAe;QAAU;KAAS,EAAE,QAAQ;IAC9F,kBAAkB,uKAAC,CAAC,MAAM,GAAG,QAAQ;IACrC,aAAa,uKAAC,CAAC,MAAM,GAAG,QAAQ;IAChC,iBAAiB,uKAAC,CAAC,KAAK,CAAC;IACzB,OAAO,uKAAC,CAAC,MAAM,GAAG,QAAQ;IAC1B,wBAAwB,uKAAC,CAAC,MAAM,GAAG,QAAQ;IAC3C,gBAAgB,uKAAC,CAAC,IAAI,CAAC;QAAC;QAAkB;QAAiB;KAAa,EAAE,QAAQ;IAClF,0BAA0B,uKAAC,CAAC,MAAM,GAAG,QAAQ;AAC/C","debugId":null}},
    {"offset": {"line": 1029, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/finance/cheque-deposit/schema.ts"],"sourcesContent":["\n\nimport { z } from 'zod';\n\nexport const chequeSchema = z.object({\n  id: z.string(),\n  chequeNo: z.string().min(1, \"Cheque number is required.\"),\n  chequeDate: z.string().min(1, \"Cheque date is required.\"),\n  amount: z.number().min(0.01, \"Amount must be greater than 0.\"),\n  bankName: z.string().min(1, \"Bank name is required.\"),\n  status: z.enum(['In Hand', 'Deposited', 'Cleared', 'Bounced', 'Cancelled', 'Returned', 'Returned with Cash']),\n  type: z.enum(['Incoming', 'Outgoing']),\n  partyType: z.enum(['Tenant', 'Landlord', 'Customer', 'Vendor', 'Agent']),\n  partyName: z.string().min(1, \"Party name is required.\"),\n  property: z.string().optional(),\n  unitCode: z.string().optional(),\n  roomCode: z.string().optional(),\n  contractNo: z.string().optional(),\n  remarks: z.string().optional(),\n  depositDate: z.string().optional(), // Date it was actually deposited\n  clearanceDate: z.string().optional(), // Date it cleared or bounced\n  bankAccountId: z.string().optional(), // The bank account it was deposited into\n});\n\nexport type Cheque = z.infer<typeof chequeSchema>;\n"],"names":[],"mappings":";;;;AAEA;;AAEO,MAAM,eAAe,uKAAC,CAAC,MAAM,CAAC;IACnC,IAAI,uKAAC,CAAC,MAAM;IACZ,UAAU,uKAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC5B,YAAY,uKAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC9B,QAAQ,uKAAC,CAAC,MAAM,GAAG,GAAG,CAAC,MAAM;IAC7B,UAAU,uKAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC5B,QAAQ,uKAAC,CAAC,IAAI,CAAC;QAAC;QAAW;QAAa;QAAW;QAAW;QAAa;QAAY;KAAqB;IAC5G,MAAM,uKAAC,CAAC,IAAI,CAAC;QAAC;QAAY;KAAW;IACrC,WAAW,uKAAC,CAAC,IAAI,CAAC;QAAC;QAAU;QAAY;QAAY;QAAU;KAAQ;IACvE,WAAW,uKAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC7B,UAAU,uKAAC,CAAC,MAAM,GAAG,QAAQ;IAC7B,UAAU,uKAAC,CAAC,MAAM,GAAG,QAAQ;IAC7B,UAAU,uKAAC,CAAC,MAAM,GAAG,QAAQ;IAC7B,YAAY,uKAAC,CAAC,MAAM,GAAG,QAAQ;IAC/B,SAAS,uKAAC,CAAC,MAAM,GAAG,QAAQ;IAC5B,aAAa,uKAAC,CAAC,MAAM,GAAG,QAAQ;IAChC,eAAe,uKAAC,CAAC,MAAM,GAAG,QAAQ;IAClC,eAAe,uKAAC,CAAC,MAAM,GAAG,QAAQ;AACpC","debugId":null}},
    {"offset": {"line": 1075, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/cron/generate-invoices/route.ts"],"sourcesContent":["\n\nimport { NextResponse } from 'next/server';\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { format, startOfMonth, endOfMonth, isWithinInterval, parseISO, addMonths, getMonth, getYear, getDate } from 'date-fns';\nimport { type Tenant } from '@/app/tenancy/tenants/schema';\nimport { type Invoice } from '@/app/tenancy/customer/invoice/schema';\n// import { saveSubscriptionInvoice } from '@/app/tenancy/customer/invoice/actions';\nimport { getWorkflowSettings } from '@/app/admin/workflow-settings/actions';\n\nconst tenantsFilePath = path.join(process.cwd(), 'src/app/tenancy/tenants/tenants-data.json');\nconst invoicesFilePath = path.join(process.cwd(), 'src/app/tenancy/tenants/invoice/subscription-invoices-data.json');\n\nasync function readData<T>(filePath: string): Promise<T[]> {\n    try {\n        const data = await fs.readFile(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            return [];\n        }\n        throw error;\n    }\n}\n\nexport async function generateInvoices(forceRun = false) {\n  try {\n    // const workflowSettings = await getWorkflowSettings();\n    const today = new Date();\n\n    // if (!forceRun) {\n    //     if (!workflowSettings.automaticInvoiceGenerationEnabled) {\n    //       return { success: true, message: 'Automatic invoice generation is disabled. No invoices were created.' };\n    //     }\n    //     if (getDate(today) !== workflowSettings.invoiceGenerationDay) {\n    //         return { success: true, message: `Skipping invoice generation. Today is not day ${workflowSettings.invoiceGenerationDay}.`};\n    //     }\n    // }\n    \n    const tenants = await readData<{tenantData: Tenant}>(tenantsFilePath);\n    const existingInvoices = await readData<Invoice>(invoicesFilePath);\n\n    const activeSubscriptions = tenants.filter(t => t.tenantData.isSubscriptionActive && t.tenantData.subscriptionAmount > 0);\n    \n    const createdFor: string[] = [];\n\n    for (const tenant of activeSubscriptions) {\n        // for (let i = 0; i < workflowSettings.monthsToGenerate; i++) {\n            const targetMonthDate = addMonths(today, 1);\n            const targetMonthKey = format(targetMonthDate, 'yyyy-MM');\n\n            const hasInvoiceForTargetMonth = existingInvoices.some(inv => \n                inv.customerCode === tenant.tenantData.code &&\n                format(parseISO(inv.invoiceDate), 'yyyy-MM') === targetMonthKey\n            );\n            \n            if (!hasInvoiceForTargetMonth) {\n                const tenantData = tenant.tenantData;\n                const subscriptionAmount = tenantData.subscriptionAmount || 0;\n                \n                const newInvoiceData: Omit<Invoice, 'id' | 'amountPaid'> = {\n                    invoiceNo: '', // Will be generated by saveInvoice\n                    customerCode: tenantData.code,\n                    customerName: tenantData.name,\n                    property: tenantData.property || '',\n                    unitCode: tenantData.unitCode || '',\n                    roomCode: tenantData.roomCode || '',\n                    invoiceDate: format(targetMonthDate, 'yyyy-MM-dd'),\n                    dueDate: format(endOfMonth(targetMonthDate), 'yyyy-MM-dd'),\n                    items: [{ \n                        id: `item-${Date.now()}`, \n                        description: `${tenantData.subscriptionStatus} Subscription for ${format(targetMonthDate, 'MMMM yyyy')}`, \n                        quantity: 1, \n                        unitPrice: subscriptionAmount, \n                        total: subscriptionAmount \n                    }],\n                    subTotal: subscriptionAmount,\n                    tax: 0,\n                    taxType: 'exclusive',\n                    taxRate: 0,\n                    total: subscriptionAmount,\n                    notes: `Automatically generated subscription invoice for ${format(targetMonthDate, 'MMMM yyyy')}.`,\n                    status: 'Sent', // Assume invoices are sent immediately\n                };\n\n                // await saveSubscriptionInvoice({ ...newInvoiceData, isAutoInvoiceNo: true }, 'Cron Job');\n                createdFor.push(`${tenantData.name} (for ${format(targetMonthDate, 'MMM yyyy')})`);\n            }\n        // }\n    }\n    \n    const message = createdFor.length > 0 \n        ? `Created ${createdFor.length} new invoices for: ${createdFor.join(', ')}.`\n        : 'No new invoices needed at this time.';\n        \n    return { success: true, message };\n\n  } catch (error) {\n    console.error('Cron job for invoice generation failed:', error);\n    throw new Error('Failed to generate invoices.');\n  }\n}\n\n\nexport async function GET(request: Request) {\n    try {\n        const result = await generateInvoices();\n        return NextResponse.json(result);\n    } catch(e: any) {\n        return NextResponse.json({ success: false, error: e.message }, { status: 500 });\n    }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1187, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/workflow-settings/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { generateInvoices } from '@/app/api/cron/generate-invoices/route';\n\n\nexport type WorkflowSettings = {\n    approvalProcessEnabled: boolean;\n    automaticInvoiceGenerationEnabled: boolean;\n    invoiceGenerationDay: number;\n    monthsToGenerate: number;\n};\n\nconst settingsFilePath = path.join(process.cwd(), 'src/app/admin/workflow-settings/settings.json');\n\nconst defaultSettings: WorkflowSettings = {\n    approvalProcessEnabled: true,\n    automaticInvoiceGenerationEnabled: true,\n    invoiceGenerationDay: 1,\n    monthsToGenerate: 1,\n};\n\nexport async function getWorkflowSettings(): Promise<WorkflowSettings> {\n    try {\n        await fs.access(settingsFilePath);\n        const data = await fs.readFile(settingsFilePath, 'utf-8');\n        return { ...defaultSettings, ...JSON.parse(data) };\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            return defaultSettings;\n        }\n        throw error;\n    }\n}\n\nexport async function saveWorkflowSettings(data: WorkflowSettings) {\n    try {\n        await fs.writeFile(settingsFilePath, JSON.stringify(data, null, 2), 'utf-8');\n        return { success: true };\n    } catch (error) {\n        console.error('Failed to save workflow settings:', error);\n        return { success: false, error: 'Failed to save settings.' };\n    }\n}\n\nexport async function runInvoiceGeneration() {\n    try {\n        // Directly call the logic from the cron route\n        const result = await generateInvoices(true); // Pass true to force run for simulation\n        return { success: true, message: result.message };\n    } catch (error) {\n        console.error('Manual invoice generation failed:', error);\n        return { success: false, error: (error as Error).message || 'An unknown error occurred' };\n    }\n}\n"],"names":[],"mappings":";;;;;;;;;AAGA;AACA;AACA;;;;;;AAUA,MAAM,mBAAmB,4GAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI;AAElD,MAAM,kBAAoC;IACtC,wBAAwB;IACxB,mCAAmC;IACnC,sBAAsB;IACtB,kBAAkB;AACtB;AAEO,eAAe;IAClB,IAAI;QACA,MAAM,yGAAE,CAAC,MAAM,CAAC;QAChB,MAAM,OAAO,MAAM,yGAAE,CAAC,QAAQ,CAAC,kBAAkB;QACjD,OAAO;YAAE,GAAG,eAAe;YAAE,GAAG,KAAK,KAAK,CAAC,KAAK;QAAC;IACrD,EAAE,OAAO,OAAO;QACZ,IAAI,AAAC,MAAgC,IAAI,KAAK,UAAU;YACpD,OAAO;QACX;QACA,MAAM;IACV;AACJ;AAEO,eAAe,qBAAqB,IAAsB;IAC7D,IAAI;QACA,MAAM,yGAAE,CAAC,SAAS,CAAC,kBAAkB,KAAK,SAAS,CAAC,MAAM,MAAM,IAAI;QACpE,OAAO;YAAE,SAAS;QAAK;IAC3B,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,qCAAqC;QACnD,OAAO;YAAE,SAAS;YAAO,OAAO;QAA2B;IAC/D;AACJ;AAEO,eAAe;IAClB,IAAI;QACA,8CAA8C;QAC9C,MAAM,SAAS,MAAM,IAAA,8KAAgB,EAAC,OAAO,wCAAwC;QACrF,OAAO;YAAE,SAAS;YAAM,SAAS,OAAO,OAAO;QAAC;IACpD,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,qCAAqC;QACnD,OAAO;YAAE,SAAS;YAAO,OAAO,AAAC,MAAgB,OAAO,IAAI;QAA4B;IAC5F;AACJ;;;IAhCsB;IAaA;IAUA;;AAvBA,+OAAA;AAaA,+OAAA;AAUA,+OAAA","debugId":null}},
    {"offset": {"line": 1269, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/workflow/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { z } from 'zod';\nimport { revalidatePath } from 'next/cache';\nimport { type Payment } from '@/app/finance/payment/schema';\nimport type { Role, Status } from './types';\nimport { type BankAccount } from '@/app/finance/banking/schema';\nimport { type Account } from '@/app/finance/chart-of-accounts/schema';\n\n\nconst paymentsFilePath = path.join(process.cwd(), 'src/app/finance/payment/payments-data.json');\nconst bankAccountsFilePath = path.join(process.cwd(), 'src/app/finance/banking/accounts-data.json');\nconst pettyCashFilePath = path.join(process.cwd(), 'src/app/finance/banking/petty-cash.json');\nconst accountsFilePath = path.join(process.cwd(), 'src/app/finance/chart-of-accounts/accounts.json');\nconst invoicesFilePath = path.join(process.cwd(), 'src/app/tenancy/customer/invoice/invoices-data.json');\nconst billsFilePath = path.join(process.cwd(), 'src/app/vendors/bill/bills-data.json');\n\n\nasync function readData(filePath: string): Promise<any[]> {\n    try {\n        await fs.access(filePath);\n        const data = await fs.readFile(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            return [];\n        }\n        throw error;\n    }\n}\n\nasync function writeData(filePath: string, data: any) {\n    await fs.writeFile(filePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\n\nasync function readPayments(): Promise<Payment[]> {\n    return await readData(paymentsFilePath);\n}\nasync function writePayments(data: Payment[]) {\n    await writeData(paymentsFilePath, data);\n}\n\nasync function readBankAccounts(): Promise<BankAccount[]> {\n    return await readData(bankAccountsFilePath);\n}\nasync function writeBankAccounts(data: BankAccount[]) {\n    await writeData(bankAccountsFilePath, data);\n}\n\nasync function readPettyCash(): Promise<{ balance: number }> {\n    const data = await readData(pettyCashFilePath);\n    if (!data || (Array.isArray(data) && data.length === 0)) {\n        return { balance: 0 };\n    }\n    return data as { balance: number };\n}\n\nasync function writePettyCash(data: { balance: number }) {\n    await fs.writeFile(pettyCashFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\n\nexport async function applyFinancialImpact(payment: Payment) {\n    const { type, amount, bankAccountId, paymentFrom, partyType, partyName, expenseAccountId } = payment;\n    const allAccounts: Account[] = await readData(accountsFilePath);\n    const accountsPayableIndex = allAccounts.findIndex(a => a.code === '2110'); // Accounts Payable\n    const ownersEquityAccountIndex = allAccounts.findIndex(a => a.code === '3110'); // Owner's Equity\n\n    // Update Cash/Bank balances\n    if (paymentFrom === 'Petty Cash') {\n        const pettyCash = await readPettyCash();\n        if (type === 'Payment') {\n            pettyCash.balance -= amount;\n        } else { // Receipt\n            pettyCash.balance += amount;\n        }\n        await writePettyCash(pettyCash);\n    } else if (bankAccountId) {\n        const allBankAccounts = await readBankAccounts();\n        const accountIndex = allBankAccounts.findIndex(acc => acc.id === bankAccountId);\n        if (accountIndex !== -1) {\n            if (type === 'Payment') {\n                allBankAccounts[accountIndex].balance -= amount;\n            } else { // Receipt\n                allBankAccounts[accountIndex].balance += amount;\n            }\n            await writeBankAccounts(allBankAccounts);\n        }\n    }\n    \n    // Update Chart of Accounts based on transaction type\n    if (partyName === 'Owner') {\n        if (ownersEquityAccountIndex !== -1) {\n            if (type === 'Payment') { // Withdrawal\n                allAccounts[ownersEquityAccountIndex].balance -= amount;\n            } else { // Contribution\n                allAccounts[ownersEquityAccountIndex].balance += amount;\n            }\n        }\n    } else if (type === 'Payment' && expenseAccountId) {\n        const expenseAccountIndex = allAccounts.findIndex(a => a.code === expenseAccountId);\n        if(expenseAccountIndex !== -1) {\n            allAccounts[expenseAccountIndex].balance += amount;\n        }\n    } else if (type === 'Receipt') {\n        // Assuming non-equity receipts are rental income for simplicity\n        const revenueAccountIndex = allAccounts.findIndex(a => a.code === '4110');\n        if (revenueAccountIndex !== -1) {\n            allAccounts[revenueAccountIndex].balance += amount;\n        }\n    }\n\n    // Update Accounts Payable for vendor transactions\n    if (partyType === 'Vendor') {\n        if (accountsPayableIndex !== -1) {\n             if (type === 'Payment') {\n                allAccounts[accountsPayableIndex].balance -= amount;\n            } else { // Receipt from a vendor (refund)\n                allAccounts[accountsPayableIndex].balance -= amount;\n            }\n        }\n    }\n    \n     await writeData(accountsFilePath, allAccounts);\n}\n\n\ntype WorkflowAction = 'SUBMIT' | 'APPROVE' | 'REJECT' | 'ADD_COMMENT';\n\nconst workflowActionSchema = z.object({\n    transactionId: z.string(),\n    actorId: z.string(),\n    actorRole: z.string(),\n    comment: z.string().optional(),\n});\n\n\nconst performStateTransition = (transaction: Payment, action: WorkflowAction, currentUserRole: Role): Status => {\n    let newStatus: Status = transaction.currentStatus || 'DRAFT';\n\n    switch (action) {\n        case 'SUBMIT':\n            if (transaction.currentStatus === 'DRAFT' || transaction.currentStatus === 'REJECTED') {\n                newStatus = 'PENDING_ADMIN_APPROVAL';\n            }\n            break;\n        case 'APPROVE':\n            if (transaction.currentStatus === 'PENDING_ADMIN_APPROVAL' && currentUserRole === 'Admin') {\n                newStatus = 'PENDING_SUPER_ADMIN_APPROVAL';\n            } else if (transaction.currentStatus === 'PENDING_SUPER_ADMIN_APPROVAL' && currentUserRole === 'Super Admin') {\n                newStatus = 'POSTED';\n            }\n            break;\n        case 'REJECT':\n            if (transaction.currentStatus === 'PENDING_ADMIN_APPROVAL' && currentUserRole === 'Admin') {\n                newStatus = 'REJECTED';\n            } else if (transaction.currentStatus === 'PENDING_SUPER_ADMIN_APPROVAL' && currentUserRole === 'Super Admin') {\n                newStatus = 'REJECTED';\n            }\n            break;\n        default:\n            break;\n    }\n    return newStatus;\n};\n\nconst getHistoryActionText = (action: WorkflowAction, newStatus: Status, previousStatus: Status, role: Role): string => {\n     switch (action) {\n        case 'SUBMIT': return 'Submitted for Approval';\n        case 'APPROVE':\n            if (newStatus === 'POSTED') return 'Final Approval & Posted';\n            return `Approved by ${role}`;\n        case 'REJECT': return `Rejected by ${role}`;\n        case 'ADD_COMMENT': return 'Comment Added';\n        default: return 'Action Performed';\n    }\n}\n\n\nasync function updateTransactionWorkflow(\n    transactionId: string,\n    action: WorkflowAction,\n    actorId: string,\n    actorRole: Role,\n    comment?: string\n) {\n    try {\n        const allPayments = await readPayments();\n        const transactionIndex = allPayments.findIndex(t => t.id === transactionId);\n\n        if (transactionIndex === -1) {\n            return { success: false, error: 'Transaction not found.' };\n        }\n\n        const transaction = allPayments[transactionIndex];\n        const previousStatus = transaction.currentStatus || 'DRAFT';\n        const newStatus = performStateTransition(transaction, action, actorRole);\n        const historyActionText = getHistoryActionText(action, newStatus, previousStatus, actorRole);\n\n        const newHistoryEntry = {\n            action: historyActionText,\n            actorId: actorId,\n            actorRole: actorRole,\n            timestamp: new Date().toISOString(),\n            comments: comment || '',\n        };\n        \n        allPayments[transactionIndex] = {\n            ...transaction,\n            currentStatus: newStatus,\n            approvalHistory: [...(transaction.approvalHistory || []), newHistoryEntry],\n        };\n        \n        if (newStatus === 'POSTED' && previousStatus !== 'POSTED') {\n            await applyFinancialImpact(allPayments[transactionIndex]);\n        }\n\n\n        await writePayments(allPayments);\n        revalidatePath('/workflow');\n        revalidatePath('/finance/banking');\n        revalidatePath('/finance/chart-of-accounts');\n        return { success: true };\n\n    } catch (error) {\n        return { success: false, error: (error as Error).message };\n    }\n}\n\n\nexport async function submitTransaction(params: z.infer<typeof workflowActionSchema>) {\n    const validation = workflowActionSchema.safeParse(params);\n    if (!validation.success) return { success: false, error: \"Invalid input\" };\n    const { transactionId, actorId, actorRole, comment } = validation.data;\n    return await updateTransactionWorkflow(transactionId, 'SUBMIT', actorId, actorRole as Role, comment);\n}\n\nexport async function approveTransaction(params: z.infer<typeof workflowActionSchema>) {\n     const validation = workflowActionSchema.safeParse(params);\n    if (!validation.success) return { success: false, error: \"Invalid input\" };\n    const { transactionId, actorId, actorRole, comment } = validation.data;\n    return await updateTransactionWorkflow(transactionId, 'APPROVE', actorId, actorRole as Role, comment);\n}\n\nexport async function rejectTransaction(params: z.infer<typeof workflowActionSchema>) {\n     const validation = workflowActionSchema.safeParse(params);\n    if (!validation.success) return { success: false, error: \"Invalid input\" };\n    const { transactionId, actorId, actorRole, comment } = validation.data;\n    return await updateTransactionWorkflow(transactionId, 'REJECT', actorId, actorRole as Role, comment);\n}\n\nexport async function addCommentToTransaction(params: z.infer<typeof workflowActionSchema>) {\n    const validation = workflowActionSchema.safeParse(params);\n    if (!validation.success) return { success: false, error: \"Invalid input\" };\n    const { transactionId, actorId, actorRole, comment } = validation.data;\n    return await updateTransactionWorkflow(transactionId, 'ADD_COMMENT', actorId as Role, actorRole as Role, comment);\n}\n\nexport async function reverseFinancialImpact(payment: Payment) {\n    if (payment.currentStatus !== 'POSTED') return; \n\n    if (payment.paymentFrom === 'Petty Cash') {\n        const pettyCash = await readPettyCash();\n        if (payment.type === 'Payment') {\n            pettyCash.balance += payment.amount;\n        } else {\n            pettyCash.balance -= payment.amount;\n        }\n        await writePettyCash(pettyCash);\n    } else if (payment.bankAccountId) {\n        const allBankAccounts = await readBankAccounts();\n        const accountIndex = allBankAccounts.findIndex(acc => acc.id === payment.bankAccountId);\n        if (accountIndex !== -1) {\n            if (payment.type === 'Payment') {\n                allBankAccounts[accountIndex].balance += payment.amount;\n            } else {\n                allBankAccounts[accountIndex].balance -= payment.amount;\n            }\n            await writeBankAccounts(allBankAccounts);\n        }\n    }\n\n    const allAccounts: Account[] = await readData(accountsFilePath);\n    const { type, amount, expenseAccountId, partyType, partyName } = payment;\n    \n    if (partyName === 'Owner') {\n        const ownersEquityAccountIndex = allAccounts.findIndex(a => a.code === '3110');\n        if (ownersEquityAccountIndex !== -1) {\n            if (type === 'Payment') { // Withdrawal\n                allAccounts[ownersEquityAccountIndex].balance += amount;\n            } else { // Contribution\n                allAccounts[ownersEquityAccountIndex].balance -= amount;\n            }\n        }\n    } else if (type === 'Payment' && expenseAccountId) {\n        const expenseAccountIndex = allAccounts.findIndex(a => a.code === expenseAccountId);\n        if(expenseAccountIndex !== -1) {\n            allAccounts[expenseAccountIndex].balance -= amount;\n        }\n    } else if (type === 'Receipt') {\n        const revenueAccountIndex = allAccounts.findIndex(a => a.code === '4110');\n        if (revenueAccountIndex !== -1) {\n            allAccounts[revenueAccountIndex].balance -= amount;\n        }\n    }\n\n    if (partyType === 'Vendor') {\n        const accountsPayableIndex = allAccounts.findIndex(a => a.code === '2110');\n        if (accountsPayableIndex !== -1) {\n             if (type === 'Payment') {\n                allAccounts[accountsPayableIndex].balance += amount;\n            } else { // Refund from vendor\n                allAccounts[accountsPayableIndex].balance += amount;\n            }\n        }\n    }\n\n    await writeData(accountsFilePath, allAccounts);\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1603, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/finance/cheque-deposit/actions.ts"],"sourcesContent":["\n\n'use server';\n\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { z } from 'zod';\nimport { revalidatePath } from 'next/cache';\nimport { chequeSchema, type Cheque } from './schema';\nimport { type Tenant } from '@/app/tenancy/tenants/schema';\nimport { type Landlord } from '@/app/landlord/schema';\nimport { type Contract as TenancyContract, type PaymentInstallment as TenancyPaymentInstallment } from '@/app/tenancy/contract/schema';\nimport { type LeaseContract, type PaymentInstallment as LeasePaymentInstallment } from '@/app/lease/contract/schema';\nimport { startOfWeek, endOfWeek, startOfMonth, isWithinInterval, parseISO, isBefore, startOfToday, format } from 'date-fns';\nimport { type BankAccount } from '../banking/schema';\nimport { type Payment } from '../payment/schema';\nimport { type UserRole } from '@/app/admin/user-roles/schema';\nimport { type Unit } from '@/app/property/units/schema';\nimport { type Room } from '@/app/property/rooms/schema';\nimport { getWorkflowSettings } from '@/app/admin/workflow-settings/actions';\nimport { applyFinancialImpact } from '@/app/workflow/actions';\nimport { type Customer } from '@/app/tenancy/customer/schema';\nimport { type Vendor } from '@/app/vendors/schema';\nimport { type Agent } from '@/app/vendors/agents/schema';\n\nconst chequesFilePath = path.join(process.cwd(), 'src/app/finance/cheque-deposit/cheques-data.json');\nconst tenantsFilePath = path.join(process.cwd(), 'src/app/tenancy/tenants/tenants-data.json');\nconst landlordsFilePath = path.join(process.cwd(), 'src/app/landlord/landlords-data.json');\nconst vendorsFilePath = path.join(process.cwd(), 'src/app/vendors/vendors-data.json');\nconst agentsFilePath = path.join(process.cwd(), 'src/app/vendors/agents/agents-data.json');\nconst customersFilePath = path.join(process.cwd(), 'src/app/tenancy/customer/customers-data.json');\nconst tenancyContractsFilePath = path.join(process.cwd(), 'src/app/tenancy/contract/contracts-data.json');\nconst leaseContractsFilePath = path.join(process.cwd(), 'src/app/lease/contract/contracts-data.json');\nconst bankAccountsFilePath = path.join(process.cwd(), 'src/app/finance/banking/accounts-data.json');\nconst paymentsFilePath = path.join(process.cwd(), 'src/app/finance/payment/payments-data.json');\nconst unitsFilePath = path.join(process.cwd(), 'src/app/property/units/units-data.json');\nconst roomsFilePath = path.join(process.cwd(), 'src/app/property/rooms/rooms-data.json');\n\n\nasync function readCheques(): Promise<Cheque[]> {\n    try {\n        await fs.access(chequesFilePath);\n        const data = await fs.readFile(chequesFilePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            await writeCheques([]);\n            return [];\n        }\n        throw error;\n    }\n}\n\nasync function writeCheques(data: Cheque[]) {\n    await fs.writeFile(chequesFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\nexport async function getBankAccounts(): Promise<BankAccount[]> {\n    try {\n        await fs.access(bankAccountsFilePath);\n        const data = await fs.readFile(bankAccountsFilePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            return [];\n        }\n        throw error;\n    }\n}\n\nasync function writeBankAccounts(data: BankAccount[]) {\n    await fs.writeFile(bankAccountsFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\nasync function readPayments(): Promise<Payment[]> {\n    try {\n        await fs.access(paymentsFilePath);\n        const data = await fs.readFile(paymentsFilePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n         if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            return [];\n        }\n        throw error;\n    }\n}\n\nasync function writePayments(data: Payment[]) {\n     await fs.writeFile(paymentsFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\n\nexport async function getCheques() {\n    const cheques = await readCheques();\n    return cheques.sort((a,b) => new Date(b.chequeDate).getTime() - new Date(a.chequeDate).getTime());\n}\n\nexport async function addCheque(data: Omit<Cheque, 'id'>) {\n    const validation = chequeSchema.omit({ id: true }).safeParse(data);\n    if (!validation.success) {\n        return { success: false, error: 'Invalid data format.' };\n    }\n\n    try {\n        const allCheques = await readCheques();\n        const newCheque: Cheque = {\n            ...validation.data,\n            id: `CHQ-${Date.now()}`,\n        };\n\n        allCheques.push(newCheque);\n        await writeCheques(allCheques);\n        \n        revalidatePath('/finance/cheque-deposit');\n        return { success: true, data: newCheque };\n\n    } catch (error) {\n        return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n\n\nexport async function updateChequeStatus(chequeId: string, status: Cheque['status'], date: string, user: { email: string, name: string, role: string }, bankAccountId?: string) {\n    try {\n        const allCheques = await readCheques();\n        const allPayments = await readPayments();\n        const workflowSettings = await getWorkflowSettings();\n\n        const chequeIndex = allCheques.findIndex(c => c.id === chequeId);\n\n        if (chequeIndex === -1) {\n            return { success: false, error: 'Cheque not found.' };\n        }\n        \n        const originalCheque = allCheques[chequeIndex];\n        \n        const cashReturnRef = `CASH-FOR-${originalCheque.chequeNo}`;\n        const hasExistingTransaction = allPayments.some(p => \n            p.status !== 'Cancelled' && \n            p.referenceNo &&\n            (p.referenceNo === originalCheque.chequeNo || p.referenceNo === cashReturnRef)\n        );\n        \n\n        if (hasExistingTransaction && (status === 'Cleared' || status === 'Returned with Cash')) {\n             return { success: false, error: `A financial transaction for cheque #${originalCheque.chequeNo} already exists. Cannot create another.` };\n        }\n        \n        const updatedCheque = { ...originalCheque, status, bankAccountId };\n        const initialStatus = workflowSettings.approvalProcessEnabled ? 'PENDING_ADMIN_APPROVAL' : 'POSTED';\n        \n        if(status === 'Deposited' && bankAccountId) {\n            updatedCheque.depositDate = date;\n        } else if (status === 'Cleared' && bankAccountId) {\n            updatedCheque.clearanceDate = date;\n        } else if (status === 'Bounced') {\n            updatedCheque.clearanceDate = date;\n        } else if (status === 'Returned with Cash') {\n            updatedCheque.clearanceDate = date;\n        }\n        \n        allCheques[chequeIndex] = updatedCheque;\n        \n        const basePayment: Omit<Payment, 'id'> = {\n            type: originalCheque.type === 'Incoming' ? 'Receipt' : 'Payment',\n            date: date,\n            partyType: originalCheque.partyType,\n            partyName: originalCheque.partyName,\n            amount: originalCheque.amount,\n            property: originalCheque.property,\n            unitCode: originalCheque.unitCode,\n            roomCode: originalCheque.roomCode,\n            createdByUser: user.name,\n            currentStatus: initialStatus,\n            approvalHistory: [{\n                action: 'Created & Submitted',\n                actorId: user.email,\n                actorRole: user.role,\n                timestamp: new Date().toISOString(),\n                comments: `Status updated to ${status}`\n            }]\n        };\n\n        let newPayment: Payment | null = null;\n        \n        if (status === 'Returned with Cash') {\n             newPayment = {\n                ...basePayment,\n                id: `PAY-${Date.now()}`,\n                paymentMethod: 'Cash',\n                bankAccountId: bankAccountId,\n                paymentFrom: bankAccountId ? 'Bank' : 'Petty Cash',\n                referenceNo: cashReturnRef,\n                description: `Cash received for returned cheque #${originalCheque.chequeNo}`,\n                status: 'Received',\n            };\n        } else if (status === 'Cleared') {\n            if (!bankAccountId) {\n                 return { success: false, error: 'Bank account is required to clear a cheque.' };\n            }\n            newPayment = {\n                ...basePayment,\n                id: `PAY-${Date.now()}`,\n                paymentMethod: 'Cheque',\n                bankAccountId: bankAccountId,\n                paymentFrom: 'Bank',\n                referenceNo: originalCheque.chequeNo,\n                remarks: `Cleared Cheque: ${originalCheque.chequeNo}`,\n                status: originalCheque.type === 'Incoming' ? 'Received' : 'Paid',\n            };\n        }\n\n        if (newPayment) {\n            if(initialStatus === 'POSTED') {\n                await applyFinancialImpact(newPayment);\n            }\n            allPayments.push(newPayment);\n            await writePayments(allPayments);\n            revalidatePath('/workflow');\n        }\n        \n        await writeCheques(allCheques);\n        revalidatePath('/finance/cheque-deposit');\n        revalidatePath('/finance/banking');\n        return { success: true };\n    } catch (error) {\n        return { success: false, error: (error as Error).message };\n    }\n}\n\nexport async function deleteCheque(chequeId: string) {\n    try {\n        const allCheques = await readCheques();\n        const paymentToDelete = allCheques.find(p => p.id === chequeId);\n        \n        if (!paymentToDelete) {\n             return { success: false, error: 'Cheque not found.' };\n        }\n        \n        if (paymentToDelete.status === 'Cleared') {\n            const allPayments = await readPayments();\n            const linkedPaymentIndex = allPayments.findIndex(p => p.referenceNo === paymentToDelete.chequeNo);\n            \n            if (linkedPaymentIndex !== -1) {\n                if (allPayments[linkedPaymentIndex].currentStatus === 'POSTED') {\n                    return { success: false, error: 'Cannot delete a cheque linked to a posted payment. Please reverse the payment first.' };\n                }\n                allPayments.splice(linkedPaymentIndex, 1);\n                await writePayments(allPayments);\n            }\n        }\n        \n        const updatedCheques = allCheques.filter(c => c.id !== chequeId);\n\n        await writeCheques(updatedCheques);\n        revalidatePath('/finance/cheque-deposit');\n        return { success: true };\n    } catch (error) {\n        return { success: false, error: (error as Error).message };\n    }\n}\n\nexport async function getLookups() {\n    const tenants: {tenantData: Tenant}[] = await fs.readFile(tenantsFilePath, 'utf-8').then(JSON.parse).catch(() => []);\n    const landlords: {landlordData: Landlord}[] = await fs.readFile(landlordsFilePath, 'utf-8').then(JSON.parse).catch(() => []);\n    const vendors: {vendorData: Vendor}[] = await fs.readFile(vendorsFilePath, 'utf-8').then(JSON.parse).catch(() => []);\n    const agents: Agent[] = await fs.readFile(agentsFilePath, 'utf-8').then(JSON.parse).catch(() => []);\n    const customers: {customerData: Customer}[] = await fs.readFile(customersFilePath, 'utf-8').then(JSON.parse).catch(() => []);\n    const tenancyContracts: TenancyContract[] = await fs.readFile(tenancyContractsFilePath, 'utf-8').then(JSON.parse).catch(() => []);\n    const leaseContracts: LeaseContract[] = await fs.readFile(leaseContractsFilePath, 'utf-8').then(JSON.parse).catch(() => []);\n    const bankAccounts: BankAccount[] = await fs.readFile(bankAccountsFilePath, 'utf-8').then(JSON.parse).catch(() => []);\n    const units: Unit[] = await fs.readFile(unitsFilePath, 'utf-8').then(JSON.parse).catch(() => []);\n    const rooms: Room[] = await fs.readFile(roomsFilePath, 'utf-8').then(JSON.parse).catch(() => []);\n    const existingCheques = await readCheques();\n    \n    const existingChequeNumbers = new Set(existingCheques.map(c => c.chequeNo));\n\n    const landlordMap = new Map<string, string>();\n    landlords.forEach(l => landlordMap.set(l.landlordData.code, l.landlordData.name));\n\n    const filterPaymentSchedule = (schedule?: (TenancyPaymentInstallment | LeasePaymentInstallment)[]) => {\n        if (!schedule) return [];\n        return schedule.filter(installment => !installment.chequeNo || !existingChequeNumbers.has(installment.chequeNo));\n    };\n\n    return {\n        tenants: tenants.map(t => ({ value: t.tenantData.code, label: t.tenantData.name, contractNo: t.tenantData.contractNo })),\n        landlords: landlords.map(l => ({ value: l.landlordData.code, label: l.landlordData.name })),\n        vendors: vendors.map(v => ({ value: v.vendorData.code, label: v.vendorData.name })),\n        agents: agents.map(a => ({ value: a.code, label: a.name })),\n        customers: customers.map(c => ({ value: c.customerData.code, label: c.customerData.name })),\n        tenancyContracts: tenancyContracts.map(c => ({ \n            value: c.contractNo, \n            label: c.contractNo, \n            property: c.property, \n            unitCode: c.unitCode, \n            roomCode: c.roomCode, \n            partyName: c.tenantName, \n            paymentSchedule: filterPaymentSchedule(c.paymentSchedule) \n        })),\n        leaseContracts: leaseContracts.map(c => ({ \n            value: c.contractNo, \n            label: c.contractNo, \n            property: c.property, \n            partyName: c.landlordCode ? (landlordMap.get(c.landlordCode) || c.landlordCode) : 'Unknown', \n            paymentSchedule: filterPaymentSchedule(c.paymentSchedule) \n        })),\n        bankAccounts: bankAccounts.map(b => ({ value: b.id, label: `${b.accountName} (${b.bankName})`})),\n        units: units.map(u => ({ value: u.unitCode, label: u.unitCode, propertyCode: u.propertyCode})),\n        rooms: rooms.map(r => ({ value: r.roomCode, label: r.roomCode, unitCode: r.unitCode, propertyCode: r.propertyCode })),\n    }\n}\n\nexport async function getSummary() {\n    const cheques = await readCheques();\n    const now = new Date();\n    const today = startOfToday();\n    const startOfThisWeek = startOfWeek(now);\n    const endOfThisWeek = endOfWeek(now);\n    const startOfThisMonth = startOfMonth(now);\n\n    const summary = {\n        inHandCount: 0,\n        inHandTotal: 0,\n        dueThisWeekCount: 0,\n        dueThisWeekTotal: 0,\n        depositedCount: 0,\n        depositedTotal: 0,\n        clearedThisMonthCount: 0,\n        clearedThisMonthTotal: 0,\n        overdueCount: 0,\n        overdueTotal: 0,\n    };\n\n    for (const cheque of cheques) {\n        const chequeDate = parseISO(cheque.chequeDate);\n\n        if (cheque.status === 'In Hand') {\n            summary.inHandCount++;\n            summary.inHandTotal += cheque.amount;\n\n            if (isWithinInterval(chequeDate, { start: startOfThisWeek, end: endOfThisWeek })) {\n                summary.dueThisWeekCount++;\n                summary.dueThisWeekTotal += cheque.amount;\n            }\n\n            if (isBefore(chequeDate, today)) {\n                summary.overdueCount++;\n                summary.overdueTotal += cheque.amount;\n            }\n\n        } else if (cheque.status === 'Deposited') {\n            summary.depositedCount++;\n            summary.depositedTotal += cheque.amount;\n        } else if (cheque.status === 'Cleared' && cheque.clearanceDate) {\n             const clearanceDate = parseISO(cheque.clearanceDate);\n             if (isWithinInterval(clearanceDate, { start: startOfThisMonth, end: now })) {\n                summary.clearedThisMonthCount++;\n                summary.clearedThisMonthTotal += cheque.amount;\n             }\n        }\n    }\n    \n    return summary;\n}\n\nexport async function createDepositVoucher(\n  chequeIds: string[],\n  depositDate: string,\n  bankAccountId: string,\n  user: { email: string; name: string; role: string }\n) {\n  try {\n    const allCheques = await readCheques();\n    const allPayments = await fs.readFile(paymentsFilePath, 'utf-8').then(JSON.parse).catch(() => []);\n    const workflowSettings = await getWorkflowSettings();\n\n    const selectedCheques = allCheques.filter(c => chequeIds.includes(c.id) && c.status === 'In Hand');\n\n    if (selectedCheques.length === 0) {\n      return { success: false, error: \"No valid 'In Hand' cheques were selected.\" };\n    }\n\n    const totalAmount = selectedCheques.reduce((sum, c) => sum + c.amount, 0);\n    const chequeNumbers = selectedCheques.map(c => c.chequeNo).join(', ');\n    const initialStatus = workflowSettings.approvalProcessEnabled ? 'PENDING_ADMIN_APPROVAL' : 'POSTED';\n\n\n    const newPayment: Payment = {\n      id: `PAY-${Date.now()}`,\n      type: 'Receipt',\n      date: depositDate,\n      partyType: 'Customer', // Simplified for deposit voucher\n      partyName: `Cheque Deposit - ${depositDate}`,\n      amount: totalAmount,\n      paymentMethod: 'Cheque',\n      paymentFrom: 'Bank',\n      bankAccountId: bankAccountId,\n      referenceNo: `DEP-${Date.now()}`,\n      description: `Deposit of ${selectedCheques.length} cheques: ${chequeNumbers}`,\n      remarks: `Cheque IDs: ${chequeIds.join(', ')}`,\n      status: 'Received', // Final status upon posting\n      createdByUser: user.name,\n      currentStatus: initialStatus,\n      approvalHistory: [\n        {\n          action: 'Created & Submitted',\n          actorId: user.email,\n          actorRole: user.role,\n          timestamp: new Date().toISOString(),\n          comments: 'Cheque deposit voucher created.',\n        },\n      ],\n    };\n    \n    if (initialStatus === 'POSTED') {\n        await applyFinancialImpact(newPayment);\n    }\n    \n    allPayments.push(newPayment);\n    await fs.writeFile(paymentsFilePath, JSON.stringify(allPayments, null, 2), 'utf-8');\n\n    // Mark cheques as pending deposit\n    const updatedCheques = allCheques.map(cheque => {\n      if (chequeIds.includes(cheque.id)) {\n        return {\n          ...cheque,\n          status: 'Deposited' as const,\n          depositDate,\n          bankAccountId,\n        };\n      }\n      return cheque;\n    });\n\n    await writeCheques(updatedCheques);\n\n    revalidatePath('/finance/cheque-deposit');\n    revalidatePath('/workflow');\n    return { success: true, count: selectedCheques.length };\n\n  } catch (error) {\n    return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n  }\n}\n\ninterface ReturnChequeParams {\n    chequeIds: string[];\n    returnWithCash: boolean;\n    paymentDetails?: {\n        paymentFrom: 'Petty Cash' | 'Bank';\n        bankAccountId?: string;\n        user: { email: string, name: string, role: UserRole['role'] };\n    }\n}\n\nexport async function returnCheque({ chequeIds, returnWithCash, paymentDetails }: ReturnChequeParams) {\n    try {\n        const allCheques = await readCheques();\n        const allPayments = await readPayments();\n        const workflowSettings = await getWorkflowSettings();\n        let updatedCount = 0;\n        const newStatus = returnWithCash ? 'Returned with Cash' : 'Returned';\n        const initialStatus = workflowSettings.approvalProcessEnabled ? 'PENDING_ADMIN_APPROVAL' : 'POSTED';\n\n        const selectedCheques = allCheques.filter(c => chequeIds.includes(c.id) && c.status === 'In Hand');\n\n        if (selectedCheques.length === 0) {\n            return { success: false, error: \"No valid 'In Hand' cheques were selected to return.\" };\n        }\n\n        const updatedCheques = allCheques.map(cheque => {\n            if (chequeIds.includes(cheque.id) && cheque.status === 'In Hand') {\n                updatedCount++;\n                return {\n                    ...cheque,\n                    status: newStatus,\n                };\n            }\n            return cheque;\n        });\n\n        if (returnWithCash && paymentDetails) {\n            for (const cheque of selectedCheques) {\n                 const newPayment: Payment = {\n                    id: `PAY-${Date.now()}-${cheque.id}`,\n                    type: 'Payment',\n                    date: format(new Date(), 'yyyy-MM-dd'),\n                    partyType: cheque.partyType,\n                    partyName: cheque.partyName,\n                    amount: cheque.amount,\n                    paymentMethod: 'Cash',\n                    paymentFrom: paymentDetails.paymentFrom,\n                    bankAccountId: paymentDetails.bankAccountId,\n                    referenceNo: `RTRN-${cheque.chequeNo}`,\n                    description: `Cash return for Cheque #${cheque.chequeNo}`,\n                    remarks: `Cheque returned with cash settlement.`,\n                    status: 'Paid',\n                    createdByUser: paymentDetails.user.name,\n                    currentStatus: initialStatus,\n                    approvalHistory: [{\n                        action: 'Created & Submitted',\n                        actorId: paymentDetails.user.email,\n                        actorRole: paymentDetails.user.role,\n                        timestamp: new Date().toISOString(),\n                        comments: 'Cheque returned with cash payment.',\n                    }],\n                };\n                if(initialStatus === 'POSTED') await applyFinancialImpact(newPayment);\n                allPayments.push(newPayment);\n            }\n            await writePayments(allPayments);\n            revalidatePath('/workflow');\n        } else if (!returnWithCash && paymentDetails) { // Logic for 'Returned' status\n             for (const cheque of selectedCheques) {\n                 const newPayment: Payment = {\n                    id: `PAY-${Date.now()}-${cheque.id}`,\n                    type: 'Payment',\n                    date: format(new Date(), 'yyyy-MM-dd'),\n                    partyType: cheque.partyType,\n                    partyName: cheque.partyName,\n                    amount: cheque.amount,\n                    paymentMethod: 'Cash', // Or another appropriate method\n                    paymentFrom: paymentDetails.paymentFrom,\n                    bankAccountId: paymentDetails.bankAccountId,\n                    referenceNo: `RTRN-${cheque.chequeNo}`,\n                    description: `Reversal for returned Cheque #${cheque.chequeNo}`,\n                    remarks: `Cheque returned.`,\n                    status: 'Paid',\n                    createdByUser: paymentDetails.user.name,\n                    currentStatus: initialStatus,\n                    approvalHistory: [{\n                        action: 'Created & Submitted',\n                        actorId: paymentDetails.user.email,\n                        actorRole: paymentDetails.user.role,\n                        timestamp: new Date().toISOString(),\n                        comments: 'Cheque returned.',\n                    }],\n                };\n                if(initialStatus === 'POSTED') await applyFinancialImpact(newPayment);\n                allPayments.push(newPayment);\n            }\n            await writePayments(allPayments);\n            revalidatePath('/workflow');\n        }\n\n        await writeCheques(updatedCheques);\n        revalidatePath('/finance/cheque-deposit');\n        return { success: true, count: updatedCount };\n\n    } catch (error) {\n        return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2212, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/property/units/schema.ts"],"sourcesContent":["\n\nimport { z } from 'zod';\n\nexport const unitSchema = z.object({\n  id: z.string(),\n  unitCode: z.string().min(1, \"Unit code is required.\"),\n  unitName: z.string().optional(),\n  propertyCode: z.string().min(1, \"Property code is required.\"),\n  unitType: z.string().min(1, \"Unit type is required.\"),\n  annualRent: z.number().min(0, \"Annual rent must be a positive number.\").optional(),\n  unitStatus: z.enum(['Active', 'Inactive']),\n  occupancyStatus: z.enum(['Vacant', 'Occupied', 'Partially Occupied']).optional(),\n});\n\nexport type Unit = z.infer<typeof unitSchema>;\n\n"],"names":[],"mappings":";;;;AAEA;;AAEO,MAAM,aAAa,uKAAC,CAAC,MAAM,CAAC;IACjC,IAAI,uKAAC,CAAC,MAAM;IACZ,UAAU,uKAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC5B,UAAU,uKAAC,CAAC,MAAM,GAAG,QAAQ;IAC7B,cAAc,uKAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAChC,UAAU,uKAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC5B,YAAY,uKAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,0CAA0C,QAAQ;IAChF,YAAY,uKAAC,CAAC,IAAI,CAAC;QAAC;QAAU;KAAW;IACzC,iBAAiB,uKAAC,CAAC,IAAI,CAAC;QAAC;QAAU;QAAY;KAAqB,EAAE,QAAQ;AAChF","debugId":null}},
    {"offset": {"line": 2239, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/property/units/actions.ts"],"sourcesContent":["\n\n'use server';\n\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { z } from 'zod';\nimport { revalidatePath } from 'next/cache';\nimport { unitSchema, type Unit } from './schema';\nimport { type Contract } from '@/app/tenancy/contract/schema';\nimport { type Room } from '../rooms/schema';\nimport { type Tenant } from '@/app/tenancy/tenants/schema';\n\nconst unitsFilePath = path.join(process.cwd(), 'src/app/property/units/units-data.json');\nconst contractsFilePath = path.join(process.cwd(), 'src/app/tenancy/contract/contracts-data.json');\nconst roomsFilePath = path.join(process.cwd(), 'src/app/property/rooms/rooms-data.json');\nconst tenantsFilePath = path.join(process.cwd(), 'src/app/tenancy/tenants/tenants-data.json');\n\n\nasync function readData<T>(filePath: string): Promise<any[]> {\n    try {\n        await fs.access(filePath);\n        const data = await fs.readFile(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            return [];\n        }\n        throw error;\n    }\n}\n\nasync function readUnits(): Promise<Unit[]> {\n    return await readData(unitsFilePath);\n}\nasync function writeUnits(data: Unit[]) {\n    await fs.writeFile(unitsFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\nexport async function getUnits() {\n    const allUnits = await readUnits();\n    const allContracts: Contract[] = await readData(contractsFilePath);\n    const allRooms: Room[] = await readData(roomsFilePath);\n    const allTenants: {tenantData: Tenant}[] = await readData(tenantsFilePath);\n\n    const activeContracts = allContracts.filter(c => c.status === 'New' || c.status === 'Renew');\n    const activeSubscriptionTenants = allTenants.filter(t => t.tenantData.isSubscriptionActive);\n\n    // 1. Consolidate all occupied spaces from both sources\n    const fullyOccupiedUnitCodes = new Set<string>();\n    activeContracts.filter(c => !c.roomCode && c.unitCode).forEach(c => fullyOccupiedUnitCodes.add(c.unitCode!));\n    activeSubscriptionTenants.filter(t => t.tenantData.unitCode && !t.tenantData.roomCode).forEach(t => fullyOccupiedUnitCodes.add(t.tenantData.unitCode!));\n\n    const occupiedRoomCodes = new Set<string>();\n    activeContracts.filter(c => c.roomCode).forEach(c => occupiedRoomCodes.add(c.roomCode!));\n    activeSubscriptionTenants.filter(t => t.tenantData.roomCode).forEach(t => occupiedRoomCodes.add(t.tenantData.roomCode!));\n    \n    // 2. Determine status for each unit based on the consolidated data\n    return allUnits.map(unit => {\n        let occupancyStatus: 'Vacant' | 'Occupied' | 'Partially Occupied' = 'Vacant';\n\n        // Case 1: The entire unit is rented under one agreement.\n        if (fullyOccupiedUnitCodes.has(unit.unitCode)) {\n            occupancyStatus = 'Occupied';\n        } else {\n            // Case 2: The unit is not rented as a whole, so check its rooms.\n            const roomsInUnit = allRooms.filter(r => r.propertyCode === unit.propertyCode && r.unitCode === unit.unitCode);\n            \n            if (roomsInUnit.length > 0) {\n                // It's a parent unit with rooms. Check how many are occupied.\n                const occupiedRoomsCount = roomsInUnit.filter(r => occupiedRoomCodes.has(r.roomCode)).length;\n\n                if (occupiedRoomsCount === 0) {\n                    occupancyStatus = 'Vacant';\n                } else if (occupiedRoomsCount < roomsInUnit.length) {\n                    occupancyStatus = 'Partially Occupied';\n                } else { // occupiedRoomsCount === roomsInUnit.length\n                    occupancyStatus = 'Occupied';\n                }\n            } else {\n                // Case 3: It's a standalone unit with no rooms and no active contract/subscription.\n                occupancyStatus = 'Vacant';\n            }\n        }\n\n        return {\n            ...unit,\n            occupancyStatus,\n        };\n    });\n}\n\nconst addUnitFormSchema = unitSchema.omit({ id: true, occupancyStatus: true, unitName: true, annualRent: true });\n\nexport async function addUnit(data: z.infer<typeof addUnitFormSchema>) {\n    const validation = addUnitFormSchema.safeParse(data);\n    if (!validation.success) {\n        return { success: false, error: 'Invalid data format.' };\n    }\n\n    try {\n        const allUnits = await readUnits();\n        const unitExists = allUnits.some(u => u.unitCode === data.unitCode && u.propertyCode === data.propertyCode);\n        if (unitExists) {\n            return { success: false, error: `Unit with code \"${data.unitCode}\" already exists in this property.` };\n        }\n\n        const newUnit: Unit = {\n            ...validation.data,\n            id: `UNIT-${Date.now()}`,\n            floor: '',\n            annualRent: 0,\n        };\n\n        allUnits.push(newUnit);\n        await writeUnits(allUnits);\n        \n        revalidatePath(`/property/properties`);\n        revalidatePath(`/property/properties/add`);\n        revalidatePath(`/property/properties/list`);\n        revalidatePath(`/property/units/list`);\n        if (data.propertyCode) {\n            revalidatePath(`/property/properties?code=${data.propertyCode}`);\n        }\n        return { success: true, data: newUnit };\n\n    } catch (error) {\n        return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n\nconst updateUnitFormSchema = unitSchema.partial();\n\nexport async function updateUnit(data: z.infer<typeof updateUnitFormSchema>) {\n     const validation = updateUnitFormSchema.safeParse(data);\n    if (!validation.success) {\n        return { success: false, error: 'Invalid data format.' };\n    }\n    \n    const { id, ...dataToUpdate } = validation.data;\n\n    try {\n        const allUnits = await readUnits();\n        const unitIndex = allUnits.findIndex(u => u.id === id);\n        if (unitIndex === -1) {\n            return { success: false, error: 'Unit not found.' };\n        }\n        \n        allUnits[unitIndex] = { ...allUnits[unitIndex], ...dataToUpdate };\n        \n        await writeUnits(allUnits);\n        \n        revalidatePath(`/property/properties`);\n        revalidatePath(`/property/properties/add`);\n        revalidatePath(`/property/properties/list`);\n        revalidatePath(`/property/units/list`);\n\n        if (allUnits[unitIndex].propertyCode) {\n           revalidatePath(`/property/properties?code=${allUnits[unitIndex].propertyCode}`);\n        }\n\n        return { success: true, data: allUnits[unitIndex] };\n\n    } catch (error) {\n        return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n\n\nexport async function deleteUnit(unitId: string) {\n    if (!unitId) {\n        return { success: false, error: \"Unit ID is required.\" };\n    }\n\n    try {\n        const allUnits = await readUnits();\n        const unitToDelete = allUnits.find(u => u.id === unitId);\n        \n        if (!unitToDelete) {\n             return { success: false, error: 'Unit not found.' };\n        }\n\n        const updatedUnits = allUnits.filter(u => u.id !== unitId);\n        \n        await writeUnits(updatedUnits);\n\n        revalidatePath(`/property/properties`);\n        revalidatePath(`/property/properties/add`);\n        revalidatePath(`/property/properties/list`);\n        revalidatePath(`/property/units/list`);\n        if (unitToDelete.propertyCode) {\n            revalidatePath(`/property/properties?code=${unitToDelete.propertyCode}`);\n        }\n        return { success: true };\n    } catch (error) {\n        return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n\nasync function readProperties() {\n    try {\n        const data = await fs.readFile(path.join(process.cwd(), 'src/app/property/properties/list/properties-data.json'), 'utf-8');\n        return JSON.parse(data);\n    } catch (e) {\n        return [];\n    }\n}\n\nexport async function getUnitLookups(propertyCode: string) {\n    const properties = await readProperties();\n    return {\n        properties: properties.map((p:any) => ({ value: p.propertyData.code, label: p.propertyData.name })),\n    }\n}\n\n\nconst importUnitSchema = unitSchema.omit({ id: true, occupancyStatus: true });\nconst importUnitsSchema = z.array(importUnitSchema);\n\nexport async function importUnits(unitsData: unknown) {\n    const validation = importUnitsSchema.safeParse(unitsData);\n    if (!validation.success) {\n        console.error(\"Import validation error:\", validation.error.format());\n        return { success: false, error: 'Invalid data format for one or more rows.' };\n    }\n    \n    try {\n        const allUnits = await readUnits();\n        let updatedCount = 0;\n        let addedCount = 0;\n        let propertyCodeForRevalidation = '';\n\n        validation.data.forEach(importedUnit => {\n            if (importedUnit.propertyCode) {\n                 propertyCodeForRevalidation = importedUnit.propertyCode;\n            }\n\n            const existingUnitIndex = allUnits.findIndex(u => u.unitCode === importedUnit.unitCode && u.propertyCode === importedUnit.propertyCode);\n            \n            if (existingUnitIndex > -1) {\n                // Update existing unit\n                allUnits[existingUnitIndex] = { ...allUnits[existingUnitIndex], ...importedUnit };\n                updatedCount++;\n            } else {\n                // Add new unit\n                const newUnit: Unit = {\n                    ...importedUnit,\n                    id: `UNIT-${Date.now()}-${Math.random()}`.replace('.', ''),\n                };\n                allUnits.push(newUnit);\n                addedCount++;\n            }\n        });\n\n        await writeUnits(allUnits);\n        \n        if (propertyCodeForRevalidation) {\n            revalidatePath(`/property/properties?code=${propertyCodeForRevalidation}`);\n        }\n        \n        return { success: true, added: addedCount, updated: updatedCount };\n\n    } catch (error) {\n        console.error(\"Error importing units:\", error);\n        return { success: false, error: (error as Error).message || 'An unknown error occurred during import.' };\n    }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2552, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/property/rooms/schema.ts"],"sourcesContent":["\n\nimport { z } from 'zod';\n\nexport const roomSchema = z.object({\n  id: z.string(),\n  roomCode: z.string().min(1, \"Room code is required.\"),\n  propertyCode: z.string().min(1, \"Property code is required.\"),\n  unitCode: z.string().optional(),\n  roomName: z.string().optional(),\n  roomType: z.string().optional(),\n  rentAmount: z.number().optional(),\n  rentFrequency: z.enum(['Monthly', 'Yearly']).optional(),\n  occupancyStatus: z.enum(['Vacant', 'Occupied']).optional(),\n});\n\nexport type Room = z.infer<typeof roomSchema>;\n"],"names":[],"mappings":";;;;AAEA;;AAEO,MAAM,aAAa,uKAAC,CAAC,MAAM,CAAC;IACjC,IAAI,uKAAC,CAAC,MAAM;IACZ,UAAU,uKAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC5B,cAAc,uKAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAChC,UAAU,uKAAC,CAAC,MAAM,GAAG,QAAQ;IAC7B,UAAU,uKAAC,CAAC,MAAM,GAAG,QAAQ;IAC7B,UAAU,uKAAC,CAAC,MAAM,GAAG,QAAQ;IAC7B,YAAY,uKAAC,CAAC,MAAM,GAAG,QAAQ;IAC/B,eAAe,uKAAC,CAAC,IAAI,CAAC;QAAC;QAAW;KAAS,EAAE,QAAQ;IACrD,iBAAiB,uKAAC,CAAC,IAAI,CAAC;QAAC;QAAU;KAAW,EAAE,QAAQ;AAC1D","debugId":null}},
    {"offset": {"line": 2579, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/property/rooms/actions.ts"],"sourcesContent":["\n\n'use server';\n\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { z } from 'zod';\nimport { revalidatePath } from 'next/cache';\nimport { roomSchema, type Room } from './schema';\nimport { type Unit } from '@/app/property/units/schema';\nimport { type Contract } from '@/app/tenancy/contract/schema';\nimport { type Tenant } from '@/app/tenancy/tenants/schema';\n\nconst roomsFilePath = path.join(process.cwd(), 'src/app/property/rooms/rooms-data.json');\nconst contractsFilePath = path.join(process.cwd(), 'src/app/tenancy/contract/contracts-data.json');\nconst tenantsFilePath = path.join(process.cwd(), 'src/app/tenancy/tenants/tenants-data.json');\n\n\nasync function readData<T>(filePath: string): Promise<any[]> {\n    try {\n        await fs.access(filePath);\n        const data = await fs.readFile(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            return [];\n        }\n        throw error;\n    }\n}\n\nasync function readRooms(): Promise<Room[]> {\n    return await readData(roomsFilePath);\n}\n\nasync function writeRooms(data: Room[]) {\n    await fs.writeFile(roomsFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\nexport async function getRooms() {\n    const allRooms = await readRooms();\n    const contractsData = await fs.readFile(contractsFilePath, 'utf-8').catch(() => '[]');\n    const allContracts: Contract[] = JSON.parse(contractsData);\n    const allTenants: {tenantData: Tenant}[] = await readData(tenantsFilePath);\n\n    const activeContracts = allContracts.filter(c => c.status === 'New' || c.status === 'Renew');\n    const occupiedRoomCodesFromContracts = new Set(activeContracts.filter(c => c.roomCode).map(c => c.roomCode!));\n    \n    const subscribedRoomCodes = new Set(\n      allTenants\n        .filter(t => t.tenantData.isSubscriptionActive && t.tenantData.roomCode)\n        .map(t => t.tenantData.roomCode!)\n    );\n    \n    const allOccupiedRoomCodes = new Set([...occupiedRoomCodesFromContracts, ...subscribedRoomCodes]);\n\n    return allRooms.map(room => ({\n        ...room,\n        occupancyStatus: allOccupiedRoomCodes.has(room.roomCode) ? 'Occupied' : 'Vacant',\n    }));\n}\n\nexport async function getRoomsForProperty(propertyCode: string) {\n    try {\n        const allRooms = await getRooms();\n        const propertyRooms = allRooms.filter(r => r.propertyCode === propertyCode);\n        return { success: true, data: propertyRooms };\n    } catch (error) {\n        return { success: false, error: (error as Error).message };\n    }\n}\n\nconst addRoomFormSchema = roomSchema.omit({ id: true, occupancyStatus: true });\n\nexport async function addRoom(data: z.infer<typeof addRoomFormSchema>) {\n    const validation = addRoomFormSchema.safeParse(data);\n    if (!validation.success) {\n        return { success: false, error: 'Invalid data format.' };\n    }\n\n    try {\n        const allRooms = await readRooms();\n        const roomExists = allRooms.some(r => r.roomCode === data.roomCode && r.propertyCode === data.propertyCode);\n        if (roomExists) {\n            return { success: false, error: `Room with code \"${data.roomCode}\" already exists in this property.` };\n        }\n\n        const newRoom: Room = {\n            ...validation.data,\n            id: `ROOM-${Date.now()}`,\n        };\n\n        allRooms.push(newRoom);\n        await writeRooms(allRooms);\n        \n        revalidatePath(`/property/properties`);\n        revalidatePath(`/property/properties/add`);\n        revalidatePath(`/property/properties/list`);\n        revalidatePath(`/property/rooms/list`);\n        if (data.propertyCode) {\n            revalidatePath(`/property/properties?code=${data.propertyCode}`);\n        }\n        return { success: true, data: newRoom };\n\n    } catch (error) {\n        return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n\nconst updateRoomFormSchema = roomSchema.partial();\n\nexport async function updateRoom(data: z.infer<typeof updateRoomFormSchema>) {\n     const validation = updateRoomFormSchema.safeParse(data);\n    if (!validation.success) {\n        return { success: false, error: 'Invalid data format.' };\n    }\n    \n    const { id, ...dataToUpdate } = validation.data;\n\n    try {\n        const allRooms = await readRooms();\n        const roomIndex = allRooms.findIndex(r => r.id === id);\n        if (roomIndex === -1) {\n            return { success: false, error: 'Room not found.' };\n        }\n        \n        allRooms[roomIndex] = { ...allRooms[roomIndex], ...dataToUpdate };\n        \n        await writeRooms(allRooms);\n        \n        revalidatePath(`/property/properties`);\n        revalidatePath(`/property/properties/add`);\n        revalidatePath(`/property/properties/list`);\n        revalidatePath(`/property/rooms/list`);\n        if (allRooms[roomIndex].propertyCode) {\n            revalidatePath(`/property/properties?code=${allRooms[roomIndex].propertyCode}`);\n        }\n        return { success: true, data: allRooms[roomIndex] };\n\n    } catch (error) {\n        return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n\n\nexport async function deleteRoom(roomId: string) {\n    if (!roomId) {\n        return { success: false, error: \"Room ID is required.\" };\n    }\n\n    try {\n        const allRooms = await readRooms();\n        const roomToDelete = allRooms.find(r => r.id === roomId);\n        \n        if (!roomToDelete) {\n             return { success: false, error: 'Room not found.' };\n        }\n\n        const updatedRooms = allRooms.filter(r => r.id !== roomId);\n        \n        await writeRooms(updatedRooms);\n        revalidatePath(`/property/properties`);\n        revalidatePath(`/property/properties/add`);\n        revalidatePath(`/property/properties/list`);\n        revalidatePath(`/property/rooms/list`);\n        if (roomToDelete.propertyCode) {\n           revalidatePath(`/property/properties?code=${roomToDelete.propertyCode}`);\n        }\n        return { success: true };\n    } catch (error) {\n        return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n\nasync function readUnits(): Promise<Unit[]> {\n    try {\n        const data = await fs.readFile(path.join(process.cwd(), 'src/app/property/units/units-data.json'), 'utf-8');\n        return JSON.parse(data);\n    } catch (e) {\n        return [];\n    }\n}\n\n\nexport async function getRoomLookups(propertyCode: string) {\n    const units = await readUnits();\n    return {\n        units: units.filter((u: any) => u.propertyCode === propertyCode).map((u:any) => ({ value: u.unitCode, label: u.unitCode })),\n    }\n}\n\nconst importRoomSchema = roomSchema.omit({ id: true, occupancyStatus: true });\nconst importRoomsSchema = z.array(importRoomSchema);\n\nexport async function importRooms(roomsData: unknown) {\n    const validation = importRoomsSchema.safeParse(roomsData);\n    if (!validation.success) {\n        console.error(\"Import validation error:\", validation.error.format());\n        return { success: false, error: 'Invalid data format for one or more rows.' };\n    }\n    \n    try {\n        const allRooms = await readRooms();\n        let updatedCount = 0;\n        let addedCount = 0;\n        let propertyCodeForRevalidation = '';\n\n        validation.data.forEach(importedRoom => {\n            if (importedRoom.propertyCode) {\n                 propertyCodeForRevalidation = importedRoom.propertyCode;\n            }\n\n            const existingRoomIndex = allRooms.findIndex(r => r.roomCode === importedRoom.roomCode && r.propertyCode === importedRoom.propertyCode);\n            \n            if (existingRoomIndex > -1) {\n                // Update existing room\n                allRooms[existingRoomIndex] = { ...allRooms[existingRoomIndex], ...importedRoom };\n                updatedCount++;\n            } else {\n                // Add new room\n                const newRoom: Room = {\n                    ...importedRoom,\n                    id: `ROOM-${Date.now()}-${Math.random()}`.replace('.', ''),\n                };\n                allRooms.push(newRoom);\n                addedCount++;\n            }\n        });\n\n        await writeRooms(allRooms);\n        \n        if (propertyCodeForRevalidation) {\n            revalidatePath(`/property/properties?code=${propertyCodeForRevalidation}`);\n        }\n        \n        return { success: true, added: addedCount, updated: updatedCount };\n\n    } catch (error) {\n        console.error(\"Error importing rooms:\", error);\n        return { success: false, error: (error as Error).message || 'An unknown error occurred during import.' };\n    }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2879, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/tenancy/contract/actions.ts"],"sourcesContent":["\n\n'use server';\n\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { z } from 'zod';\nimport { revalidatePath } from 'next/cache';\nimport { contractSchema, type Contract } from './schema';\nimport { type Unit } from '@/app/property/units/schema';\nimport { type Floor } from '@/app/property/floors/schema';\nimport { type Room } from '@/app/property/rooms/schema';\nimport { type Tenant } from '@/app/tenancy/tenants/schema';\nimport { addCheque } from '@/app/finance/cheque-deposit/actions';\nimport { differenceInDays, parseISO, addDays } from 'date-fns';\nimport { getUnits } from '@/app/property/units/actions';\nimport { getRooms } from '@/app/property/rooms/actions';\n\n\nconst contractsFilePath = path.join(process.cwd(), 'src/app/tenancy/contract/contracts-data.json');\nconst propertiesFilePath = path.join(process.cwd(), 'src/app/property/properties/list/properties-data.json');\nconst tenantsFilePath = path.join(process.cwd(), 'src/app/tenancy/tenants/tenants-data.json');\n\n\nasync function readData(filePath: string) {\n    try {\n        await fs.access(filePath);\n        const data = await fs.readFile(filePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            return [];\n        }\n        throw error;\n    }\n}\n\nasync function readContracts(): Promise<Contract[]> {\n    try {\n        await fs.access(contractsFilePath);\n        const data = await fs.readFile(contractsFilePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            return [];\n        }\n        throw error;\n    }\n}\n\nasync function writeContracts(data: Contract[]) {\n    await fs.writeFile(contractsFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\nexport async function getAllContracts() {\n    return await readContracts();\n}\n\n\nasync function createChequesFromContract(contract: Contract) {\n    if (contract.paymentMode !== 'cheque' || !contract.paymentSchedule) {\n        return;\n    }\n\n    for (const installment of contract.paymentSchedule) {\n        if (installment.chequeNo) {\n            await addCheque({\n                chequeNo: installment.chequeNo,\n                chequeDate: installment.dueDate,\n                amount: installment.amount,\n                bankName: installment.bankName || '',\n                status: 'In Hand',\n                type: 'Incoming',\n                partyType: 'Tenant',\n                partyName: contract.tenantCode,\n                property: contract.property,\n                unitCode: contract.unitCode,\n                roomCode: contract.roomCode,\n                contractNo: contract.contractNo,\n                remarks: `Installment ${installment.installment}`,\n            });\n        }\n    }\n}\n\nexport async function saveContractData(data: Omit<Contract, 'id'> & { id?: string, isAutoContractNo?: boolean }, isNewRecord: boolean) {\n    const { isAutoContractNo, ...contractData } = data;\n    const validation = contractSchema.omit({id: true}).safeParse(contractData);\n\n    if (!validation.success) {\n        const errors = validation.error.errors.map(e => e.message).join(', ');\n        return { success: false, error: errors };\n    }\n\n    try {\n        const allContracts = await readContracts();\n        const validatedData = validation.data;\n        \n        let savedContract: Contract;\n        \n        if (isNewRecord) {\n             let newContractNo = validatedData.contractNo;\n             if (isAutoContractNo || !newContractNo) {\n                newContractNo = await getNextContractNumber();\n             } else {\n                const contractExists = allContracts.some(c => c.contractNo === newContractNo);\n                if (contractExists) {\n                    return { success: false, error: `A contract with number \"${newContractNo}\" already exists.`};\n                }\n             }\n\n             const newContract: Contract = {\n                ...validatedData,\n                contractNo: newContractNo,\n                id: `CON-${Date.now()}`,\n            };\n            allContracts.push(newContract);\n            savedContract = newContract;\n        } else {\n            const index = allContracts.findIndex(c => c.id === data.id);\n            if (index !== -1) {\n                allContracts[index] = { ...allContracts[index], ...validatedData };\n                savedContract = allContracts[index];\n            } else {\n                 return { success: false, error: `Contract with ID \"${data.id}\" not found.` };\n            }\n        }\n        \n        await writeContracts(allContracts);\n        \n        await createChequesFromContract(savedContract);\n        \n        revalidatePath('/tenancy/contracts');\n        revalidatePath('/finance/cheque-deposit');\n        revalidatePath(`/tenancy/contract?id=${data.id}`);\n        return { success: true, data: savedContract };\n\n    } catch (error) {\n        console.error('Failed to save contract:', error);\n        return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n\nasync function getNextContractNumber() {\n    const allContracts = await readContracts();\n    let maxNum = 0;\n    allContracts.forEach(c => {\n        const match = c.contractNo.match(/^TC-(\\d+)$/);\n        if (match) {\n            const num = parseInt(match[1], 10);\n            if (num > maxNum) {\n                maxNum = num;\n            }\n        }\n    });\n    return `TC-${(maxNum + 1).toString().padStart(4, '0')}`;\n}\n\nexport async function findContract(query: { unitCode?: string, tenantName?: string, contractId?: string }): Promise<{ success: boolean; data?: Contract; error?: string }> {\n    try {\n        const allContracts = await readContracts();\n        let foundContract: Contract | undefined;\n\n        if (query.contractId === 'new') {\n            const newContractNo = await getNextContractNumber();\n            return { success: true, data: { ...initialContractState, contractNo: newContractNo } };\n        }\n        \n        if (query.contractId) {\n            foundContract = allContracts.find(c => c.id === query.contractId);\n        } else if (query.unitCode) {\n            foundContract = allContracts.find(c => c.unitCode === query.unitCode);\n        } else if (query.tenantName) {\n            foundContract = allContracts.find(c => c.tenantName.toLowerCase() === query.tenantName.toLowerCase());\n        }\n\n        if (foundContract) {\n            return { success: true, data: foundContract };\n        } else {\n            return { success: false, error: 'Contract not found.' };\n        }\n    } catch (error) {\n        console.error('Failed to find contract:', error);\n        return { success: false, error: (error as Error).message || 'An unknown error occurred' };\n    }\n}\n\n\nconst initialContractState: Contract = {\n    id: '',\n    contractNo: '',\n    contractDate: '',\n    unitCode: '',\n    roomCode: '',\n    property: '',\n    tenantCode: '',\n    tenantName: '',\n    mobile: '',\n    email: '',\n    address: '',\n    startDate: '',\n    endDate: '',\n    totalRent: 0,\n    paymentMode: 'cash',\n    status: 'New',\n    terminationDate: '',\n    rentBasedOn: 'Monthly',\n    paymentFrequency: 'Monthly',\n    numberOfPayments: 1,\n    gracePeriod: 0,\n    paymentSchedule: [],\n    terms: '',\n    tawtheeqRegistrationNo: '',\n    tawtheeqStatus: 'Not Registered',\n    tawtheeqRegistrationDate: '',\n};\n\nexport async function deleteContract(contractId: string) {\n    try {\n        const allContracts = await readContracts();\n        const updatedContracts = allContracts.filter(c => c.id !== contractId);\n\n        if (allContracts.length === updatedContracts.length) {\n            return { success: false, error: 'Contract not found.' };\n        }\n        \n        await writeContracts(updatedContracts);\n        revalidatePath('/tenancy/contracts');\n        return { success: true };\n    } catch (error) {\n        console.error('Failed to delete contract:', error);\n        return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n\nasync function readProperties() {\n    try {\n        const data = await fs.readFile(propertiesFilePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (e) {\n        return [];\n    }\n}\n\nasync function readTenants(): Promise<{tenantData: Tenant}[]> {\n    try {\n        const data = await fs.readFile(tenantsFilePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (e) {\n        return [];\n    }\n}\n\n\nexport async function getContractLookups() {\n    const properties = await readProperties();\n    const tenants = await readTenants();\n    const units = await getUnits();\n    const rooms = await getRooms();\n\n    return {\n        properties: properties.map((p: any) => ({ value: (p.propertyData || p).code, label: (p.propertyData || p).name })),\n        tenants: tenants.map((t: any) => ({ value: t.tenantData.code, label: t.tenantData.name, ...t.tenantData })),\n        units: units.map(u => ({...u, value: u.unitCode, label: u.unitCode })),\n        rooms: rooms.map(r => ({...r, value: r.roomCode, label: r.roomCode })),\n    }\n}\n\nexport async function getUnitsForProperty(propertyCode: string) {\n    const allUnits = await getUnits();\n    return allUnits\n        .filter(u => u.propertyCode === propertyCode && u.occupancyStatus !== 'Occupied')\n        .map((u: any) => ({ ...u, value: u.unitCode, label: u.unitCode }));\n}\n\nexport async function getRoomsForUnit(propertyCode: string, unitCode: string) {\n    const allRooms = await getRooms();\n    return allRooms\n        .filter(r => r.propertyCode === propertyCode && r.unitCode === unitCode && r.occupancyStatus === 'Vacant')\n        .map((r: any) => ({ ...r, value: r.roomCode, label: r.roomCode }));\n}\n\nexport async function getUnitDetails(unitCode: string) {\n    const allUnits = await getUnits();\n    const unit = allUnits.find(u => u.unitCode === unitCode);\n\n    if (!unit) {\n        return { success: false, error: 'Unit not found' };\n    }\n    \n    return { \n        success: true, \n        data: {\n            totalRent: unit.annualRent,\n        }\n    };\n}\n\nexport async function getRoomDetails(roomCode: string) {\n    const allRooms = await getRooms();\n    const room = allRooms.find(r => r.roomCode === roomCode);\n    if (!room) {\n        return { success: false, error: 'Room not found' };\n    }\n    return { success: true, data: room };\n}\n\nexport async function getTenantForProperty(propertyCode: string, unitCode: string, roomCode?: string) {\n    try {\n        const contracts: Contract[] = await fs.readFile(contractsFilePath, 'utf-8').then(JSON.parse);\n        \n        const activeContract = contracts.find(c =>\n            c.property === propertyCode &&\n            c.unitCode === unitCode &&\n            (roomCode ? c.roomCode === roomCode : true) && // Match room if provided\n            (c.status === 'New' || c.status === 'Renew')\n        );\n\n        if (activeContract) {\n            return { success: true, tenantName: activeContract.tenantName };\n        }\n        return { success: false, error: 'No active tenant found for this location.' };\n\n    } catch (error) {\n        return { success: false, error: (error as Error).message };\n    }\n}\n\nconst moveTenantSchema = z.object({\n    contractId: z.string(),\n    newPropertyCode: z.string(),\n    newUnitCode: z.string(),\n    newRoomCode: z.string().optional(),\n    moveDate: z.string(),\n});\n\nexport async function moveTenant(data: z.infer<typeof moveTenantSchema>) {\n    const validation = moveTenantSchema.safeParse(data);\n    if (!validation.success) {\n        return { success: false, error: 'Invalid data provided.' };\n    }\n\n    const { contractId, newPropertyCode, newUnitCode, newRoomCode, moveDate } = validation.data;\n\n    try {\n        const allContracts = await readContracts();\n        const contractIndex = allContracts.findIndex(c => c.id === contractId);\n\n        if (contractIndex === -1) {\n            return { success: false, error: 'Active contract not found for this tenant.' };\n        }\n\n        const contract = allContracts[contractIndex];\n        const oldLocation = `${contract.property}/${contract.unitCode}${contract.roomCode ? '/'+contract.roomCode : ''}`;\n        const newLocation = `${newPropertyCode}/${newUnitCode}${newRoomCode ? '/'+newRoomCode : ''}`;\n\n        contract.property = newPropertyCode;\n        contract.unitCode = newUnitCode;\n        contract.roomCode = newRoomCode;\n\n        contract.paymentSchedule.push({\n            installment: 0, \n            dueDate: moveDate,\n            amount: 0,\n            status: 'paid', \n            chequeNo: 'MOVEMENT',\n            bankName: `Moved from ${oldLocation} to ${newLocation}`,\n        });\n        \n        allContracts[contractIndex] = contract;\n\n        await writeContracts(allContracts);\n\n        revalidatePath('/tenancy/tenants/add');\n        revalidatePath('/property/properties');\n        revalidatePath('/property/units/vacant');\n        \n        return { success: true };\n\n    } catch (error) {\n        return { success: false, error: (error as Error).message };\n    }\n}\n\nexport async function getLatestContractForTenant(tenantCode: string): Promise<{ success: boolean; data?: Contract; error?: string }> {\n    if (!tenantCode) {\n        return { success: false, error: \"Tenant code is required.\" };\n    }\n    try {\n        const allContracts = await readContracts();\n        const tenantContracts = allContracts.filter(c => c.tenantCode === tenantCode);\n        if (tenantContracts.length === 0) {\n            return { success: false, error: 'No contracts found for this tenant.' };\n        }\n        tenantContracts.sort((a, b) => new Date(b.endDate).getTime() - new Date(a.endDate).getTime());\n        return { success: true, data: tenantContracts[0] };\n    } catch (error) {\n        return { success: false, error: (error as Error).message };\n    }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3384, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/firebase/admin-config.ts"],"sourcesContent":["\nimport * as admin from 'firebase-admin';\nimport { existsSync } from 'fs';\n\nconst projectId = process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID;\n\n// The recommended approach is to use Application Default Credentials (ADC).\n// Initialize without any arguments and it will automatically use ADC if available.\ntry {\n    if (!admin.apps.length) {\n        console.log(\"Attempting to initialize Firebase Admin with Application Default Credentials...\");\n        admin.initializeApp({ projectId });\n        console.log(\"Firebase Admin initialized successfully with Application Default Credentials.\");\n    }\n} catch (e) {\n    console.warn(\"Could not initialize with Application Default Credentials, trying service account path.\", e);\n    \n    // Fallback for local development outside of a GCP environment\n    const serviceAccountPath = process.env.SERVICE_ACCOUNT_JSON_PATH;\n\n    if (!serviceAccountPath) {\n        throw new Error(\n            'Firebase initialization failed. Application Default Credentials not found. ' +\n            'For local development, set the SERVICE_ACCOUNT_JSON_PATH environment variable to the path of your service account JSON file in your .env.local'\n        );\n    }\n\n    if (!existsSync(serviceAccountPath)) {\n        throw new Error(\n            `Firebase initialization failed. Service account file not found at path: ${serviceAccountPath}. ` +\n            'Please check the SERVICE_ACCOUNT_JSON_PATH in your .env.local file.'\n        );\n    }\n    \n    if (!admin.apps.length) {\n        console.log(`Attempting to initialize Firebase Admin with service account file: ${serviceAccountPath}`);\n        admin.initializeApp({\n            credential: admin.credential.cert(serviceAccountPath),\n            projectId: projectId,\n        });\n        console.log(\"Firebase Admin initialized successfully with service account file.\");\n    }\n}\n\nconst firestoreAdmin = admin.firestore();\n\nexport { firestoreAdmin };\n"],"names":[],"mappings":";;;;AACA;AACA;;;AAEA,MAAM;AAEN,4EAA4E;AAC5E,mFAAmF;AACnF,IAAI;IACA,IAAI,CAAC,mIAAU,CAAC,MAAM,EAAE;QACpB,QAAQ,GAAG,CAAC;QACZ,4IAAmB,CAAC;YAAE;QAAU;QAChC,QAAQ,GAAG,CAAC;IAChB;AACJ,EAAE,OAAO,GAAG;IACR,QAAQ,IAAI,CAAC,2FAA2F;IAExG,8DAA8D;IAC9D,MAAM,qBAAqB,QAAQ,GAAG,CAAC,yBAAyB;IAEhE,IAAI,CAAC,oBAAoB;QACrB,MAAM,IAAI,MACN,gFACA;IAER;IAEA,IAAI,CAAC,IAAA,2GAAU,EAAC,qBAAqB;QACjC,MAAM,IAAI,MACN,CAAC,wEAAwE,EAAE,mBAAmB,EAAE,CAAC,GACjG;IAER;IAEA,IAAI,CAAC,mIAAU,CAAC,MAAM,EAAE;QACpB,QAAQ,GAAG,CAAC,CAAC,mEAAmE,EAAE,oBAAoB;QACtG,4IAAmB,CAAC;YAChB,YAAY,yIAAgB,CAAC,IAAI,CAAC;YAClC,WAAW;QACf;QACA,QAAQ,GAAG,CAAC;IAChB;AACJ;AAEA,MAAM,iBAAiB,wIAAe","debugId":null}},
    {"offset": {"line": 3428, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/tenancy/tenants/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { firestoreAdmin } from '@/lib/firebase/admin-config';\nimport { revalidatePath } from 'next/cache';\nimport { type Contract } from '../contract/schema';\nimport { type Tenant } from '@/app/tenancy/tenants/schema';\nimport { type Invoice } from '@/app/tenancy/customer/invoice/schema';\n\nasync function getTenants() {\n    const tenantsCollection = firestoreAdmin.collection('tenants');\n    const snapshot = await tenantsCollection.get();\n    return snapshot.docs.map(doc => doc.data());\n}\n\nasync function getContracts(): Promise<Contract[]> {\n    const contractsCollection = firestoreAdmin.collection('contracts');\n    const snapshot = await contractsCollection.get();\n    return snapshot.docs.map(doc => doc.data() as Contract);\n}\n\nasync function getInvoices(): Promise<Invoice[]> {\n    const invoicesCollection = firestoreAdmin.collection('invoices');\n    const snapshot = await invoicesCollection.get();\n    return snapshot.docs.map(doc => doc.data() as Invoice);\n}\n\nexport async function getAllTenants() {\n    const tenants:any = await getTenants();\n    const contracts = await getContracts();\n    const invoices = await getInvoices();\n    \n    const contractsByTenantCode = new Map<string, Contract>();\n    for (const contract of contracts) {\n        if(contract.tenantCode) {\n             if (!contractsByTenantCode.has(contract.tenantCode) || new Date(contract.endDate) > new Date(contractsByTenantCode.get(contract.tenantCode)!.endDate)) {\n                contractsByTenantCode.set(contract.tenantCode, contract);\n            }\n        }\n    }\n\n    const invoiceStatsByCustomer = new Map<string, { totalBilled: number, totalPaid: number }>();\n    for (const invoice of invoices) {\n        if (invoice.status !== 'Cancelled') {\n            if (!invoiceStatsByCustomer.has(invoice.customerCode)) {\n                invoiceStatsByCustomer.set(invoice.customerCode, { totalBilled: 0, totalPaid: 0 });\n            }\n            const stats = invoiceStatsByCustomer.get(invoice.customerCode)!;\n            stats.totalBilled += invoice.total;\n            stats.totalPaid += invoice.amountPaid || 0;\n        }\n    }\n\n    return tenants\n        .filter((l: any) => l.tenantData && l.tenantData.code)\n        .map((l: any) => {\n            const tenantCode = l.tenantData.code;\n            const contract = contractsByTenantCode.get(tenantCode);\n            let dueBalance = 0;\n            let contractValue = 0;\n            let paidAmount = 0;\n\n            if (l.tenantData.isSubscriptionActive) {\n                const stats = invoiceStatsByCustomer.get(tenantCode) || { totalBilled: 0, totalPaid: 0 };\n                contractValue = stats.totalBilled;\n                paidAmount = stats.totalPaid;\n                dueBalance = contractValue - paidAmount;\n            } else if (contract) {\n                contractValue = contract.totalRent;\n                const paidInstallments = contract.paymentSchedule.filter(p => p.status === 'paid');\n                paidAmount = paidInstallments.reduce((sum, p) => sum + p.amount, 0);\n                dueBalance = contractValue - paidAmount;\n            }\n\n            return {\n                ...l.tenantData,\n                attachments: l.attachments || [],\n                contractId: contract?.id || null,\n                contractNo: contract?.contractNo || null,\n                isSubscriptionActive: l.tenantData.isSubscriptionActive || false,\n                contractValue,\n                paidAmount,\n                dueBalance,\n            }\n        });\n}\n\nasync function getNextTenantCode() {\n    const allTenants:any = await getTenants();\n    let maxNum = 0;\n    allTenants.forEach((t: any) => {\n        const code = t.tenantData.code || '';\n        const match = code.match(/^T(\\d+)$/);\n        if(match) {\n            const num = parseInt(match[1], 10);\n            if (num > maxNum) {\n                maxNum = num;\n            }\n        }\n    });\n    const nextNum = maxNum + 1;\n    return `T${nextNum.toString().padStart(4, '0')}`;\n}\n\nexport async function saveTenantData(dataToSave: any, isNewRecord: boolean, isAutoCode: boolean) {\n    try {\n        const { attachments, ...tenantData } = dataToSave;\n        let tenantCode = tenantData.code;\n        if (isNewRecord && isAutoCode) {\n            tenantCode = await getNextTenantCode();\n            tenantData.code = tenantCode;\n        }\n\n        const docRef = firestoreAdmin.collection('tenants').doc(tenantCode);\n\n        const dataForDb = { tenantData, attachments };\n\n        if (isNewRecord) {\n            await docRef.set(dataForDb);\n        } else {\n            await docRef.update(dataForDb);\n        }\n\n        revalidatePath('/tenancy/tenants');\n        return { success: true, data: dataForDb };\n    } catch (error: any) {\n        return { success: false, error: error.message };\n    }\n}\n\nexport async function findTenantData(tenantCode: string) {\n    try {\n        const docRef = firestoreAdmin.collection('tenants').doc(tenantCode);\n        const doc = await docRef.get();\n\n        if (doc.exists) {\n            return { success: true, data: doc.data() };\n        } else {\n            return { success: false, error: 'Tenant not found' };\n        }\n    } catch (error: any) {\n        return { success: false, error: error.message };\n    }\n}\n\nexport async function deleteTenantData(tenantCode: string) {\n    try {\n        const docRef = firestoreAdmin.collection('tenants').doc(tenantCode);\n        await docRef.delete();\n\n        revalidatePath('/tenancy/tenants');\n        return { success: true };\n    } catch (error: any) {\n        return { success: false, error: error.message };\n    }\n}\n\nexport async function cancelSubscription(tenantCode: string) {\n    try {\n        const docRef = firestoreAdmin.collection('tenants').doc(tenantCode);\n        await docRef.update({ 'tenantData.isSubscriptionActive': false });\n\n        revalidatePath('/tenancy/tenants');\n        return { success: true };\n    } catch (error: any) {\n        return { success: false, error: error.message };\n    }\n}\n\nexport async function saveSubscriptionSettings(tenantCode: string, settings: Partial<Tenant>) {\n    try {\n        const docRef = firestoreAdmin.collection('tenants').doc(tenantCode);\n        await docRef.update({ 'tenantData.subscription': settings });\n\n        revalidatePath('/tenancy/tenants');\n        return { success: true };\n    } catch (error: any) {\n        return { success: false, error: error.message };\n    }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3658, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/finance/banking/schema.ts"],"sourcesContent":["\nimport { z } from 'zod';\n\nexport const bankAccountSchema = z.object({\n  id: z.string(),\n  accountName: z.string().min(1, 'Account name is required.'),\n  bankName: z.string().min(1, 'Bank name is required.'),\n  accountNumber: z.string().min(1, 'Account number is required.'),\n  balance: z.number().min(0, 'Balance cannot be negative.'),\n  currency: z.string().min(3, 'Currency code is required.').default('AED'),\n});\n\nexport type BankAccount = z.infer<typeof bankAccountSchema>;\n"],"names":[],"mappings":";;;;AACA;;AAEO,MAAM,oBAAoB,uKAAC,CAAC,MAAM,CAAC;IACxC,IAAI,uKAAC,CAAC,MAAM;IACZ,aAAa,uKAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC/B,UAAU,uKAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC5B,eAAe,uKAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IACjC,SAAS,uKAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC3B,UAAU,uKAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,8BAA8B,OAAO,CAAC;AACpE","debugId":null}},
    {"offset": {"line": 3676, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/finance/banking/actions.ts"],"sourcesContent":["'use server';\n\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { z } from 'zod';\nimport { revalidatePath } from 'next/cache';\nimport { bankAccountSchema, type BankAccount } from './schema';\nimport { type Payment, paymentSchema } from '../payment/schema';\nimport { type Cheque } from '../cheque-deposit/schema';\nimport { getWorkflowSettings } from '@/app/admin/workflow-settings/actions';\nimport { applyFinancialImpact } from '@/app/workflow/actions';\n\n\nconst accountsFilePath = path.join(process.cwd(), 'src/app/finance/banking/accounts-data.json');\nconst paymentsFilePath = path.join(process.cwd(), 'src/app/finance/payment/payments-data.json');\nconst pettyCashFilePath = path.join(process.cwd(), 'src/app/finance/banking/petty-cash.json');\nconst chequesFilePath = path.join(process.cwd(), 'src/app/finance/cheque-deposit/cheques-data.json');\n\n\nasync function readAccounts(): Promise<BankAccount[]> {\n    try {\n        await fs.access(accountsFilePath);\n        const data = await fs.readFile(accountsFilePath, 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            await writeAccounts([]);\n            return [];\n        }\n        throw error;\n    }\n}\n\nasync function writeAccounts(data: BankAccount[]) {\n    await fs.writeFile(accountsFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\nexport async function readPettyCash() {\n    try {\n        await fs.access(pettyCashFilePath);\n        const data = await fs.readFile(pettyCashFilePath, 'utf-8');\n        if (!data || (Array.isArray(data) && data.length === 0)) return { balance: 0 };\n        return JSON.parse(data);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            return { balance: 0 };\n        }\n        throw error;\n    }\n}\n\nexport async function writePettyCash(data: { balance: number }) {\n    await fs.writeFile(pettyCashFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\n\nexport async function getBankAccounts() {\n    const storedAccounts = await readAccounts();\n    const pettyCashData = await readPettyCash();\n    const pettyCashAccount: BankAccount = {\n        id: \"acc_3\",\n        accountName: \"Petty Cash\",\n        bankName: \"Cash on Hand\",\n        accountNumber: \"N/A\",\n        balance: pettyCashData.balance,\n        currency: \"AED\",\n    };\n    return [pettyCashAccount, ...storedAccounts];\n}\n\n\nconst formSchema = bankAccountSchema.omit({ id: true });\n\nexport async function saveBankAccount(data: z.infer<typeof bankAccountSchema>, isNew: boolean) {\n    const validation = bankAccountSchema.safeParse(data);\n    if (!validation.success) {\n        return { success: false, error: 'Invalid data format.' };\n    }\n\n    try {\n        const allAccounts = await readAccounts();\n        \n        if (isNew) {\n            const newAccount: BankAccount = {\n                ...validation.data,\n                id: `acc_${Date.now()}`,\n            };\n            allAccounts.push(newAccount);\n        } else {\n            const index = allAccounts.findIndex(acc => acc.id === data.id);\n            if (index === -1) {\n                return { success: false, error: 'Account not found.' };\n            }\n            allAccounts[index] = validation.data;\n        }\n\n        await writeAccounts(allAccounts);\n        revalidatePath('/finance/banking');\n        return { success: true };\n\n    } catch (error) {\n        return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n\nexport async function deleteBankAccount(accountId: string) {\n     try {\n        if (accountId === 'acc_3') {\n            return { success: true }; // Silently succeed for petty cash\n        }\n        \n        const allAccounts = await readAccounts();\n        const updatedAccounts = allAccounts.filter(acc => acc.id !== accountId);\n        \n        if (allAccounts.length === updatedAccounts.length) {\n            return { success: false, error: 'Account not found.' };\n        }\n\n        await writeAccounts(updatedAccounts);\n        revalidatePath('/finance/banking');\n        return { success: true };\n\n    } catch (error) {\n        return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n\nasync function readAllPayments(): Promise<Payment[]> {\n    try {\n        const paymentsData = await fs.readFile(paymentsFilePath, 'utf-8');\n        return JSON.parse(paymentsData);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            return [];\n        }\n        console.error('Failed to read payments file:', error);\n        return [];\n    }\n}\n\nasync function writePayments(data: Payment[]) {\n    await fs.writeFile(paymentsFilePath, JSON.stringify(data, null, 2), 'utf-8');\n}\n\n\nasync function readAllCheques(): Promise<Cheque[]> {\n    try {\n        const chequesData = await fs.readFile(chequesFilePath, 'utf-8');\n        return JSON.parse(chequesData);\n    } catch (error) {\n        if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n            return [];\n        }\n        console.error('Failed to read cheques file:', error);\n        return [];\n    }\n}\n\n\nexport async function getAllTransactions(): Promise<Payment[]> {\n    const payments = await readAllPayments();\n    \n    const allTransactions = [...payments].filter(p => p.currentStatus === 'POSTED');\n\n    return allTransactions.sort((a,b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n}\n\nexport async function getTransactionsForAccount(accountId: string): Promise<Payment[]> {\n     try {\n        const allTransactions = await readAllPayments();\n        \n        const accountPayments = allTransactions.filter((p: Payment) => {\n            if (p.currentStatus !== 'POSTED') return false; // Only show posted transactions\n            \n            if (accountId === 'acc_3') { // Petty Cash account\n                return p.paymentFrom === 'Petty Cash';\n            }\n            return p.bankAccountId === accountId;\n        });\n\n        return accountPayments.sort((a,b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n    } catch (error) {\n        console.error('Failed to read payments file:', error);\n        return [];\n    }\n}\n\nconst fundTransferSchema = z.object({\n    fromAccountId: z.string().min(1, \"From account is required.\"),\n    toAccountId: z.string().min(1, \"To account is required.\"),\n    amount: z.number().min(0.01, \"Amount must be positive.\"),\n    date: z.string().min(1, \"Date is required.\"),\n    remarks: z.string().optional(),\n});\n\n\nexport async function transferFunds(data: z.infer<typeof fundTransferSchema>) {\n    const validation = fundTransferSchema.safeParse(data);\n    if (!validation.success) {\n        return { success: false, error: 'Invalid data format.' };\n    }\n\n    const { fromAccountId, toAccountId, amount, date, remarks } = validation.data;\n\n    if (fromAccountId === toAccountId) {\n        return { success: false, error: \"From and To accounts cannot be the same.\" };\n    }\n    \n    try {\n        const workflowSettings = await getWorkflowSettings();\n        const initialStatus = workflowSettings.approvalProcessEnabled ? 'DRAFT' : 'POSTED';\n\n        if (initialStatus === 'POSTED') {\n            // If direct posting, do the balance update. Otherwise, it happens on final approval.\n            const allAccounts = await readAccounts();\n            const pettyCash = await readPettyCash();\n            \n            const fromAccount = fromAccountId === 'acc_3' ? { ...pettyCash, id: 'acc_3', accountName: 'Petty Cash' } : allAccounts.find(acc => acc.id === fromAccountId);\n            const toAccount = toAccountId === 'acc_3' ? { ...pettyCash, id: 'acc_3', accountName: 'Petty Cash' } : allAccounts.find(acc => acc.id === toAccountId);\n\n            if (!fromAccount || !toAccount) {\n                return { success: false, error: \"One or both accounts not found.\" };\n            }\n            \n            if(fromAccount.balance < amount) {\n                return { success: false, error: `Insufficient funds in ${fromAccount.accountName}.` };\n            }\n\n            if (fromAccountId === 'acc_3') {\n                pettyCash.balance -= amount;\n            } else {\n                const fromIndex = allAccounts.findIndex(acc => acc.id === fromAccountId);\n                allAccounts[fromIndex].balance -= amount;\n            }\n            \n            if (toAccountId === 'acc_3') {\n                pettyCash.balance += amount;\n            } else {\n                const toIndex = allAccounts.findIndex(acc => acc.id === toAccountId);\n                allAccounts[toIndex].balance += amount;\n            }\n            \n            await writeAccounts(allAccounts);\n            await writePettyCash(pettyCash);\n        }\n\n        // Create payment records regardless of workflow status\n        const allPayments = await readAllPayments();\n        const referenceNo = `TRF-${Date.now()}`;\n        const fromAccountName = fromAccountId === 'acc_3' ? 'Petty Cash' : (await readAccounts()).find(a => a.id === fromAccountId)?.accountName || 'Bank';\n        const toAccountName = toAccountId === 'acc_3' ? 'Petty Cash' : (await readAccounts()).find(a => a.id === toAccountId)?.accountName || 'Bank';\n        \n        const paymentRecord: Payment = {\n            id: `PAY-${Date.now()}-OUT`,\n            type: 'Payment',\n            date: date,\n            partyType: 'Vendor', // Internal Transfer\n            partyName: `Transfer to ${toAccountName}`,\n            amount: amount,\n            paymentMethod: fromAccountId === 'acc_3' ? 'Cash' : 'Bank Transfer',\n            bankAccountId: fromAccountId,\n            paymentFrom: fromAccountId === 'acc_3' ? 'Petty Cash' : 'Bank',\n            referenceNo,\n            remarks,\n            status: 'Paid',\n            currentStatus: initialStatus,\n        };\n\n         const receiptRecord: Payment = {\n            id: `PAY-${Date.now()}-IN`,\n            type: 'Receipt',\n            date: date,\n            partyType: 'Customer', // Internal Transfer\n            partyName: `Transfer from ${fromAccountName}`,\n            amount: amount,\n            paymentMethod: toAccountId === 'acc_3' ? 'Cash' : 'Bank Transfer',\n            bankAccountId: toAccountId,\n            paymentFrom: toAccountId === 'acc_3' ? 'Petty Cash' : 'Bank',\n            referenceNo,\n            remarks,\n            status: 'Received',\n            currentStatus: initialStatus,\n        };\n        \n        allPayments.push(paymentRecord, receiptRecord);\n        await writePayments(allPayments);\n\n        revalidatePath('/finance/banking');\n        revalidatePath('/workflow');\n        return { success: true };\n\n    } catch (error) {\n        return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n\nexport async function createDepositVoucher(data: { bankAccountId: string, depositDate: string, chequeIds: string[] }) {\n    const { bankAccountId, depositDate, chequeIds } = data;\n\n    try {\n        const allCheques = await readAllCheques();\n        const chequesToDeposit = allCheques.filter(c => chequeIds.includes(c.id));\n\n        if (chequesToDeposit.length === 0) {\n            return { success: false, error: 'No valid cheques found for deposit.' };\n        }\n\n        const totalAmount = chequesToDeposit.reduce((sum, cheque) => sum + cheque.amount, 0);\n        const remarks = `Deposit of ${chequesToDeposit.length} cheques. Cheque numbers: ${chequesToDeposit.map(c => c.chequeNo).join(', ')}`;\n\n        const allAccounts = await readAccounts();\n        const accountIndex = allAccounts.findIndex(acc => acc.id === bankAccountId);\n\n        if (accountIndex === -1) {\n            return { success: false, error: 'Bank account not found.' };\n        }\n\n        allAccounts[accountIndex].balance += totalAmount;\n        await writeAccounts(allAccounts);\n\n        const allPayments = await readAllPayments();\n        const newReceipt: Payment = {\n            id: `RCPT-${Date.now()}`,\n            type: 'Receipt',\n            date: depositDate,\n            partyType: 'Customer',\n            partyName: 'Cheque Deposit',\n            amount: totalAmount,\n            paymentMethod: 'Cheque',\n            bankAccountId: bankAccountId,\n            paymentFrom: 'Bank',\n            referenceNo: `DEP-${Date.now()}`,\n            remarks: remarks,\n            status: 'Received',\n            currentStatus: 'POSTED', \n        };\n\n        allPayments.push(newReceipt);\n        await writePayments(allPayments);\n\n        revalidatePath('/finance/banking');\n        return { success: true };\n\n    } catch (error) {\n        return { success: false, error: (error as Error).message || 'An unknown error occurred.' };\n    }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 4077, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/admin/contract-continuity/actions.ts"],"sourcesContent":["\n'use server';\n\nimport {promises as fs} from 'fs';\nimport path from 'path';\nimport {revalidatePath} from 'next/cache';\nimport {type Contract} from '@/app/tenancy/contract/schema';\nimport {differenceInDays, parseISO, addDays, isBefore} from 'date-fns';\n\nconst contractsFilePath = path.join(\n  process.cwd(),\n  'src/app/tenancy/contract/contracts-data.json'\n);\n\nasync function readContracts(): Promise<Contract[]> {\n  try {\n    await fs.access(contractsFilePath);\n    const data = await fs.readFile(contractsFilePath, 'utf-8');\n    return JSON.parse(data);\n  } catch (error) {\n    if ((error as NodeJS.ErrnoException).code === 'ENOENT') {\n      return [];\n    }\n    throw error;\n  }\n}\n\nexport async function getProblematicContracts(): Promise<Contract[]> {\n  const contracts = await readContracts();\n\n  // Sort contracts by tenant and then by start date to check for continuity\n  const sortedContracts = [...contracts].sort((a, b) => {\n    if (a.tenantCode! < b.tenantCode!) return -1;\n    if (a.tenantCode! > b.tenantCode!) return 1;\n    return new Date(a.startDate).getTime() - new Date(b.startDate).getTime();\n  });\n\n  const contractsWithStatus = sortedContracts.map((contract, index) => {\n    let periodStatus: 'OK' | 'Gap' | 'Overlap' = 'OK';\n\n    const previousContract = sortedContracts[index - 1];\n\n    // Check continuity only if it's the same tenant and unit/room\n    if (\n      previousContract &&\n      previousContract.tenantCode === contract.tenantCode &&\n      previousContract.property === contract.property &&\n      previousContract.unitCode === contract.unitCode &&\n      previousContract.roomCode === contract.roomCode\n    ) {\n      const prevEndDate = parseISO(previousContract.endDate);\n      const currentStartDate = parseISO(contract.startDate);\n      const daysBetween = differenceInDays(currentStartDate, prevEndDate);\n\n      if (daysBetween > 1) {\n        periodStatus = 'Gap';\n      } else if (daysBetween < 1) {\n        periodStatus = 'Overlap';\n      }\n    }\n\n    return {\n      ...contract,\n      periodStatus,\n    };\n  });\n\n  // Filter for only problematic contracts\n  return contractsWithStatus.filter(\n    c => c.periodStatus === 'Overlap' || c.periodStatus === 'Gap'\n  );\n}\n\n\nexport type MovementHistoryItem = {\n    date: string;\n    details: string;\n    tenantName: string;\n    tenantCode: string;\n    contractNo: string;\n    contractStartDate: string;\n    daysInPreviousLocation: number | null;\n};\n\nexport async function getMovementHistory(): Promise<MovementHistoryItem[]> {\n    const allContracts: Contract[] = await readContracts();\n    const allMovements: MovementHistoryItem[] = [];\n\n    allContracts.forEach(contract => {\n        const movements = contract.paymentSchedule\n            .filter(item => item.chequeNo === 'MOVEMENT')\n            .map((item, index, arr) => {\n                const previousMovements = arr.slice(0, index);\n                const lastMoveDate = previousMovements.length > 0 \n                    ? parseISO(previousMovements[previousMovements.length - 1].dueDate) \n                    : null;\n                \n                const startDateOfStay = lastMoveDate || parseISO(contract.startDate);\n                const moveOutDate = parseISO(item.dueDate);\n                \n                const daysStayed = differenceInDays(moveOutDate, startDateOfStay);\n\n                return {\n                    date: item.dueDate,\n                    details: item.bankName || 'Unknown Movement',\n                    tenantName: contract.tenantName,\n                    tenantCode: contract.tenantCode || '',\n                    contractNo: contract.contractNo,\n                    contractStartDate: contract.startDate,\n                    daysInPreviousLocation: daysStayed,\n                };\n            });\n        allMovements.push(...movements);\n    });\n\n    allMovements.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n    return allMovements;\n}\n\nexport type VacantPeriod = {\n    id: string;\n    property: string;\n    unitCode: string;\n    roomCode?: string;\n    vacancyStartDate: string;\n    vacancyEndDate: string;\n    daysVacant: number;\n    previousContractNo?: string;\n    nextContractNo?: string;\n}\n\nexport async function getVacantPeriods(): Promise<VacantPeriod[]> {\n    const contracts = await readContracts();\n    const vacantPeriods: VacantPeriod[] = [];\n    const contractsByUnit = new Map<string, Contract[]>();\n\n    // Group contracts by unit (and room if applicable)\n    contracts.forEach(contract => {\n        const key = `${contract.property}-${contract.unitCode}${contract.roomCode ? `-${contract.roomCode}`: ''}`;\n        if (!contractsByUnit.has(key)) {\n            contractsByUnit.set(key, []);\n        }\n        contractsByUnit.get(key)!.push(contract);\n    });\n\n    // For each unit, sort contracts and find gaps\n    contractsByUnit.forEach((unitContracts, key) => {\n        if (unitContracts.length < 2) return;\n\n        const sorted = unitContracts.sort((a,b) => new Date(a.startDate).getTime() - new Date(b.startDate).getTime());\n\n        for (let i = 0; i < sorted.length - 1; i++) {\n            const prevContract = sorted[i];\n            const nextContract = sorted[i+1];\n\n            const vacancyStart = addDays(parseISO(prevContract.endDate), 1);\n            const vacancyEnd = addDays(parseISO(nextContract.startDate), -1);\n\n            if (isBefore(vacancyStart, vacancyEnd) || vacancyStart.getTime() === vacancyEnd.getTime()) {\n                const daysVacant = differenceInDays(vacancyEnd, vacancyStart) + 1;\n                vacantPeriods.push({\n                    id: `${key}-${i}`,\n                    property: prevContract.property,\n                    unitCode: prevContract.unitCode,\n                    roomCode: prevContract.roomCode,\n                    vacancyStartDate: vacancyStart.toISOString(),\n                    vacancyEndDate: vacancyEnd.toISOString(),\n                    daysVacant,\n                    previousContractNo: prevContract.contractNo,\n                    nextContractNo: nextContract.contractNo,\n                });\n            }\n        }\n    });\n\n    return vacantPeriods.sort((a,b) => new Date(b.vacancyStartDate).getTime() - new Date(a.vacancyStartDate).getTime());\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 4219, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {getCompanyProfile as '00b6be478acfdf6b7794a7b34be547b3606ebfd51c'} from 'ACTIONS_MODULE0'\nexport {saveCompanyProfile as '40c9350172a0cc49767c134a7e5ed44affe0683337'} from 'ACTIONS_MODULE0'\nexport {checkLicenseStatus as '008a29e84bd260b304f797613c7c39c01029f96950'} from 'ACTIONS_MODULE1'\nexport {getCurrencySettings as '00bf02fbdbf2069a58be66f4c215b7083c555f2e0f'} from 'ACTIONS_MODULE2'\nexport {getCombinedAccessControlData as '00484ec9aa59cb806ed9f49233b1daa442fefc4db8'} from 'ACTIONS_MODULE3'\nexport {getAllContracts as '00de1d3a0c22cf56737ed21e125e399021367eac00'} from 'ACTIONS_MODULE4'\nexport {getContractLookups as '00f88d1e90fb6c3415b45aee1770533def22ee037a'} from 'ACTIONS_MODULE4'\nexport {deleteContract as '40075856c1c2d8110aa7a4cd4e8da4ec6abe71b17b'} from 'ACTIONS_MODULE4'\nexport {findContract as '40626a77dbc21e4658f06f2792a09356cb122eb779'} from 'ACTIONS_MODULE4'\nexport {getLatestContractForTenant as '407c09006f63d1bb2a514488ac13bf6b46f094d528'} from 'ACTIONS_MODULE4'\nexport {getRoomDetails as '4092f46dc27d4da73e017e103ff56fa73bcebeac3b'} from 'ACTIONS_MODULE4'\nexport {moveTenant as '40cfa4557364dc13775cb4e0c40a69587c11a8093c'} from 'ACTIONS_MODULE4'\nexport {getUnitsForProperty as '40d52f21d76de530da6ade7100f9ea79263e09668f'} from 'ACTIONS_MODULE4'\nexport {getUnitDetails as '40fc6cefcb41c1ad5539e2c7450165448210af0532'} from 'ACTIONS_MODULE4'\nexport {getRoomsForUnit as '603085fc5f3519957092a1e3a5a517954f29516b70'} from 'ACTIONS_MODULE4'\nexport {saveContractData as '60d43db9f0f1b365784c0288cbb92f01d58fe0af94'} from 'ACTIONS_MODULE4'\nexport {getTenantForProperty as '70004aebdd3fe6a41b2aa3757bb1e2b284a9ebc6a5'} from 'ACTIONS_MODULE4'\nexport {getUnits as '009d71925a0aa8baf76f29de076166c79061f05b3d'} from 'ACTIONS_MODULE5'\nexport {deleteUnit as '403cf2f178261df15005eaccdd185e49cb17f7a7c3'} from 'ACTIONS_MODULE5'\nexport {importUnits as '405dbe3934d0715511534a54c5c65d53900e0ab219'} from 'ACTIONS_MODULE5'\nexport {addUnit as '40691211f38c2fa8204710aa6695055a487566e9b4'} from 'ACTIONS_MODULE5'\nexport {getUnitLookups as '40a5b1e77a7da64fe8593ea6641b277b69dd1945b2'} from 'ACTIONS_MODULE5'\nexport {updateUnit as '40d61b0d31509d22fea637b0fbd461b3c89f08ba48'} from 'ACTIONS_MODULE5'\nexport {getAllTenants as '00831fee985f82fbb15a66fe64cff566d6c6f2867b'} from 'ACTIONS_MODULE6'\nexport {deleteTenantData as '400726e3bdf468c8f88bbdb9aaa36ab5f223b4fb88'} from 'ACTIONS_MODULE6'\nexport {findTenantData as '403c44f137a3ca19d2679727ba3eaf54e85a4e3dd6'} from 'ACTIONS_MODULE6'\nexport {cancelSubscription as '40c7c6f727d1176bc496bfd420805a4dd89df95ec4'} from 'ACTIONS_MODULE6'\nexport {saveSubscriptionSettings as '6036964a174b54674356664e3bee36f62e4123d1df'} from 'ACTIONS_MODULE6'\nexport {saveTenantData as '70d98d48fadc7e403939dd6b646483c6ffbf3102b8'} from 'ACTIONS_MODULE6'\nexport {getBankAccounts as '006a88420b11906d11a02e60bbc1d08a3ff381a608'} from 'ACTIONS_MODULE7'\nexport {getAllTransactions as '00d3d1c13e5b326b206ba4708cc47f513877954c3a'} from 'ACTIONS_MODULE7'\nexport {readPettyCash as '00d765bad3197e297469ba1a64a90e8c966c0e3713'} from 'ACTIONS_MODULE7'\nexport {getTransactionsForAccount as '400c481d00070cb57c56ac30b3016042b9ac563f1e'} from 'ACTIONS_MODULE7'\nexport {writePettyCash as '401e9906d804110d526195abaac1f1177eb290cee2'} from 'ACTIONS_MODULE7'\nexport {createDepositVoucher as '4087b09237d80718e6c7722daca35c3b40e916d9fd'} from 'ACTIONS_MODULE7'\nexport {transferFunds as '40c681baaa6ac4134faf54796bcecb422ad060e160'} from 'ACTIONS_MODULE7'\nexport {deleteBankAccount as '40eadf85ff8bd172b35e07036c54b6a9cf4a6ae9cb'} from 'ACTIONS_MODULE7'\nexport {saveBankAccount as '606ba51a1c7455d0fac84142011d1e63ca94ea5790'} from 'ACTIONS_MODULE7'\nexport {getVacantPeriods as '0058c26caef1ffa252ed3d0b4904737c8e4fe91b30'} from 'ACTIONS_MODULE8'\nexport {getMovementHistory as '006fcb15c795a34b56c2800406e1d4864bf75843f7'} from 'ACTIONS_MODULE8'\nexport {getProblematicContracts as '00855cfa2af8cc3be18ec8e3fa781494bf06e9010a'} from 'ACTIONS_MODULE8'\nexport {getCheques as '001985af95bd59f2fe397be78e6c46957bf413f178'} from 'ACTIONS_MODULE9'\nexport {getSummary as '002c72322081bd96844e713b5cce3d64acde28bdae'} from 'ACTIONS_MODULE9'\nexport {getBankAccounts as '0062ead3797ea17061497dc7d98e7c40c05ffee1cb'} from 'ACTIONS_MODULE9'\nexport {getLookups as '007872f779c5c7a5e0d483fadb98bcdf2347de8e30'} from 'ACTIONS_MODULE9'\nexport {returnCheque as '401b7e78972b424e8e47a64542e02a13021583ec26'} from 'ACTIONS_MODULE9'\nexport {deleteCheque as '408cc8240d9380fb768b58fa4c21f7b2f6e90e4644'} from 'ACTIONS_MODULE9'\nexport {addCheque as '4097722b643ebcb6e67ec037f440b1523daddec4a9'} from 'ACTIONS_MODULE9'\nexport {createDepositVoucher as '787e70e69a011aeb9f85068a3917692d23511eadd9'} from 'ACTIONS_MODULE9'\nexport {updateChequeStatus as '7c7690dcb0bd227fd0bd479de6cef7719ef7ccd799'} from 'ACTIONS_MODULE9'\nexport {getRooms as '00b1ebe317367791d5f70b764d08349bd9c02ef33c'} from 'ACTIONS_MODULE10'\nexport {addRoom as '4023c3eb56adbb239c5560193b399ee2492bd900f0'} from 'ACTIONS_MODULE10'\nexport {importRooms as '4044e14ab75ff70890912bfc2d3d4fafbbd833f1ca'} from 'ACTIONS_MODULE10'\nexport {getRoomLookups as '4058c67745e0064e1678711947654824be147cafc2'} from 'ACTIONS_MODULE10'\nexport {getRoomsForProperty as '406c1afcbb6346d0d80153380e54e1434ff763cc4c'} from 'ACTIONS_MODULE10'\nexport {deleteRoom as '407c1163a0fb9226bb8e7d1e6e99f16cfc7c548e5c'} from 'ACTIONS_MODULE10'\nexport {updateRoom as '40c720ba235f2c41c6f29626d6f17db1a6984f48b2'} from 'ACTIONS_MODULE10'\nexport {getWorkflowSettings as '0026cbe30d3946ca5d202d147dfd3dd10c963bca8b'} from 'ACTIONS_MODULE11'\nexport {runInvoiceGeneration as '00698a84b77221a25f617c69b2c492b0adfcf77554'} from 'ACTIONS_MODULE11'\nexport {saveWorkflowSettings as '405fd00783ca2c0909e1bc9ea8170dd1dcc1cb4c5f'} from 'ACTIONS_MODULE11'\nexport {submitTransaction as '4047f1be9f4ec23f6c3699a601835a82156d8eb5e4'} from 'ACTIONS_MODULE12'\nexport {approveTransaction as '408b6ef6fc8d09194066701fa2edd4ea8f9305defb'} from 'ACTIONS_MODULE12'\nexport {addCommentToTransaction as '40979727ef980c7aba95e802e0d29daccf4b768563'} from 'ACTIONS_MODULE12'\nexport {reverseFinancialImpact as '40a66ec237e98904229939f469d1841c1eb84346ba'} from 'ACTIONS_MODULE12'\nexport {applyFinancialImpact as '40bf8da82d2e5d4234a62b8c165efb090a74e54a42'} from 'ACTIONS_MODULE12'\nexport {rejectTransaction as '40c95dd5b507e2eb7d80a18ecfb45b4f1808addef8'} from 'ACTIONS_MODULE12'\n"],"names":[],"mappings":";AAAA;AAEA;AACA;AACA;AACA;AAYA;AAMA;AAMA;AASA;AAGA;AASA;AAOA;AAGA","debugId":null}},
    {"offset": {"line": 4463, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/dashboard-client.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const DashboardClient = registerClientReference(\n    function() { throw new Error(\"Attempted to call DashboardClient() from the server but DashboardClient is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard-client.tsx <module evaluation>\",\n    \"DashboardClient\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;AACO,MAAM,kBAAkB,IAAA,wQAAuB,EAClD;IAAa,MAAM,IAAI,MAAM;AAA8O,GAC3Q,8DACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4477, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/dashboard-client.tsx/__nextjs-internal-proxy.mjs"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const DashboardClient = registerClientReference(\n    function() { throw new Error(\"Attempted to call DashboardClient() from the server but DashboardClient is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard-client.tsx\",\n    \"DashboardClient\",\n);\n"],"names":[],"mappings":"AAAA,uEAAuE;;;;;AACvE;;AACO,MAAM,kBAAkB,IAAA,wQAAuB,EAClD;IAAa,MAAM,IAAI,MAAM;AAA8O,GAC3Q,0CACA","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4491, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 4499, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx"],"sourcesContent":["\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { differenceInDays, parseISO, format, getMonth, getYear, isFuture } from 'date-fns';\nimport { getAllContracts } from '@/app/tenancy/contract/actions';\nimport { getUnits } from '@/app/property/units/actions';\nimport { getAllTenants } from '@/app/tenancy/tenants/actions';\nimport { Contract } from '@/app/tenancy/contract/schema';\nimport { Unit } from '@/app/property/units/schema';\nimport { DashboardClient } from './dashboard-client';\nimport { type LeaseContract } from '@/app/lease/contract/schema';\nimport { type Cheque } from '@/app/finance/cheque-deposit/schema';\nimport { getBankAccounts } from '@/app/finance/banking/actions';\nimport { getMovementHistory } from './admin/contract-continuity/actions';\nimport { type Room } from '@/app/property/rooms/schema';\n\nasync function getExpiryReport() {\n    const contracts = await getAllContracts();\n    const today = new Date();\n    \n    const expiringSoon = contracts.filter(contract => {\n        const daysRemaining = differenceInDays(parseISO(contract.endDate), today);\n        return daysRemaining >= 0 && daysRemaining <= 30;\n    });\n\n    const uniqueContracts = new Map<string, Contract>();\n    for (const contract of expiringSoon) {\n        if (!uniqueContracts.has(contract.contractNo)) {\n            uniqueContracts.set(contract.contractNo, contract);\n        }\n    }\n    \n    return Array.from(uniqueContracts.values());\n}\n\nasync function getDashboardData() {\n    const contracts = await getAllContracts();\n    const allUnits = await getUnits();\n    const tenants = await getAllTenants();\n    \n    const propertiesData = await fs.readFile(\n      path.join(process.cwd(), 'src/app/property/properties/list/properties-data.json')\n    );\n    const allProperties = JSON.parse(propertiesData.toString());\n    const allRoomsData = await fs.readFile(\n        path.join(process.cwd(), 'src/app/property/rooms/rooms-data.json'), 'utf-8'\n    ).catch(() => '[]');\n    const allRooms: Room[] = JSON.parse(allRoomsData);\n\n\n    const leaseContractsData = await fs.readFile(\n      path.join(process.cwd(), 'src/app/lease/contract/contracts-data.json'), 'utf-8'\n    ).catch(() => '[]');\n    const allLeaseContracts: LeaseContract[] = JSON.parse(leaseContractsData);\n    \n    // KPI: Vacant Units & Rooms\n    const activeContracts = contracts.filter(c => c.status === 'New' || c.status === 'Renew');\n    const occupiedUnitCodes = new Set(activeContracts.filter(c => !c.roomCode).map(c => c.unitCode));\n    const occupiedRoomCodes = new Set(activeContracts.filter(c => c.roomCode).map(c => c.roomCode));\n\n    const vacantUnitsCount = allUnits.filter(unit => \n        unit.unitStatus === 'Active' && !occupiedUnitCodes.has(unit.unitCode) && allRooms.every(r => r.unitCode !== unit.unitCode)\n    ).length;\n    \n    const vacantRoomsCount = allRooms.filter(room => !occupiedRoomCodes.has(room.roomCode)).length;\n\n    const totalUnits = allUnits.length;\n    const totalRooms = allRooms.length;\n    \n    // KPI: Tenancy Contracts Expiring\n    const today = new Date();\n    const expiringSoonCount = contracts.filter(contract => {\n        const daysRemaining = differenceInDays(parseISO(contract.endDate), today);\n        return daysRemaining >= 0 && daysRemaining <= 30;\n    }).length;\n\n    // KPI: Lease Contracts Expiring\n    const leaseExpiringSoonCount = allLeaseContracts.filter(contract => {\n        const daysRemaining = differenceInDays(parseISO(contract.endDate), today);\n        return daysRemaining >= 0 && daysRemaining <= 30;\n    }).length;\n\n    return {\n        vacantUnitsCount,\n        totalUnits,\n        vacantRoomsCount,\n        totalRooms,\n        expiringSoonCount,\n        leaseExpiringSoonCount,\n        totalTenants: tenants.length,\n        totalProperties: allProperties.length,\n    };\n}\n\n\nexport default async function DashboardPage() {\n    const dashboardData = await getDashboardData();\n    const expiringContracts = await getExpiryReport();\n    const bankAccounts = await getBankAccounts();\n    const movementHistory = await getMovementHistory();\n\n    return (\n        <DashboardClient\n            initialDashboardData={dashboardData}\n            initialExpiringContracts={expiringContracts}\n            initialBankAccounts={bankAccounts}\n            initialMovementHistoryCount={movementHistory.length}\n        />\n    );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}